
test8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000894c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  08008a60  08008a60  00018a60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f38  08008f38  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008f38  08008f38  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008f38  08008f38  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f38  08008f38  00018f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f3c  08008f3c  00018f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008f40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c0  200001e0  0800911c  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007a0  0800911c  000207a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba49  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021c4  00000000  00000000  0002bc4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009a8  00000000  00000000  0002de18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000890  00000000  00000000  0002e7c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014ce1  00000000  00000000  0002f050  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000938e  00000000  00000000  00043d31  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006d4f0  00000000  00000000  0004d0bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ba5af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000331c  00000000  00000000  000ba62c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008a44 	.word	0x08008a44

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08008a44 	.word	0x08008a44

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c38:	f1a2 0201 	sub.w	r2, r2, #1
 8000c3c:	d1ed      	bne.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <GPS_Strtoke>:
uint8_t GPSWorkingBuffer[GPS_WORKING_BUFFER_SIZE];
uint8_t GPSBuffer[GPS_BUFFER_SIZE];


//Function for parsing NMEA messages
char* GPS_Strtoke(char *str, const char *delim){
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  static char *start = NULL; /* stores string str for consecutive calls */
  char *token = NULL; /* found token */
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
  /* assign new start in case */
  if (str) start = str;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d002      	beq.n	8001052 <GPS_Strtoke+0x1a>
 800104c:	4a12      	ldr	r2, [pc, #72]	; (8001098 <GPS_Strtoke+0x60>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6013      	str	r3, [r2, #0]
  /* check whether text to parse left */
  if (!start) return NULL;
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <GPS_Strtoke+0x60>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <GPS_Strtoke+0x26>
 800105a:	2300      	movs	r3, #0
 800105c:	e017      	b.n	800108e <GPS_Strtoke+0x56>
  /* remember current start as found token */
  token = start;
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <GPS_Strtoke+0x60>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	60fb      	str	r3, [r7, #12]
  /* find next occurrence of delim */
  start = strpbrk(start, delim);
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <GPS_Strtoke+0x60>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6839      	ldr	r1, [r7, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f004 fde0 	bl	8005c30 <strpbrk>
 8001070:	4602      	mov	r2, r0
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <GPS_Strtoke+0x60>)
 8001074:	601a      	str	r2, [r3, #0]
  /* replace delim with terminator and move start to follower */
  if (start) *start++ = '\0';
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <GPS_Strtoke+0x60>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d006      	beq.n	800108c <GPS_Strtoke+0x54>
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <GPS_Strtoke+0x60>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	1c5a      	adds	r2, r3, #1
 8001084:	4904      	ldr	r1, [pc, #16]	; (8001098 <GPS_Strtoke+0x60>)
 8001086:	600a      	str	r2, [r1, #0]
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
  /* done */
  return token;
 800108c:	68fb      	ldr	r3, [r7, #12]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200001fc 	.word	0x200001fc

0800109c <GPS_GetCharFromBuffer>:

int GPS_GetCharFromBuffer(){
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
	if(GPSBufferHead == GPSBufferTail){
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <GPS_GetCharFromBuffer+0x40>)
 80010a2:	781a      	ldrb	r2, [r3, #0]
 80010a4:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <GPS_GetCharFromBuffer+0x44>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d102      	bne.n	80010b2 <GPS_GetCharFromBuffer+0x16>
		return -1;
 80010ac:	f04f 33ff 	mov.w	r3, #4294967295
 80010b0:	e00f      	b.n	80010d2 <GPS_GetCharFromBuffer+0x36>
	}
	GPSBufferTail = (GPSBufferTail + 1) % GPS_BUFFER_SIZE;
 80010b2:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <GPS_GetCharFromBuffer+0x44>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	3301      	adds	r3, #1
 80010b8:	425a      	negs	r2, r3
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	bf58      	it	pl
 80010c0:	4253      	negpl	r3, r2
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <GPS_GetCharFromBuffer+0x44>)
 80010c6:	701a      	strb	r2, [r3, #0]
	return GPSBuffer[GPSBufferTail];
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <GPS_GetCharFromBuffer+0x44>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <GPS_GetCharFromBuffer+0x48>)
 80010d0:	5c9b      	ldrb	r3, [r3, r2]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000229 	.word	0x20000229
 80010e0:	200003fb 	.word	0x200003fb
 80010e4:	20000238 	.word	0x20000238

080010e8 <GPS_GetLineFromBuffer>:

int GPS_GetLineFromBuffer(){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
	char LocalChar;
	char* LocalLinePointer = (char*)GPSWorkingBuffer;
 80010ee:	4b13      	ldr	r3, [pc, #76]	; (800113c <GPS_GetLineFromBuffer+0x54>)
 80010f0:	607b      	str	r3, [r7, #4]
	if(GPSBufferLines){
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <GPS_GetLineFromBuffer+0x58>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d01b      	beq.n	8001132 <GPS_GetLineFromBuffer+0x4a>
		while((LocalChar = GPS_GetCharFromBuffer())){
 80010fa:	e008      	b.n	800110e <GPS_GetLineFromBuffer+0x26>
			if(LocalChar == 13){							//detecting CR
 80010fc:	78fb      	ldrb	r3, [r7, #3]
 80010fe:	2b0d      	cmp	r3, #13
 8001100:	d00d      	beq.n	800111e <GPS_GetLineFromBuffer+0x36>
				break;
			}
			*LocalLinePointer = LocalChar;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	78fa      	ldrb	r2, [r7, #3]
 8001106:	701a      	strb	r2, [r3, #0]
			LocalLinePointer++;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3301      	adds	r3, #1
 800110c:	607b      	str	r3, [r7, #4]
		while((LocalChar = GPS_GetCharFromBuffer())){
 800110e:	f7ff ffc5 	bl	800109c <GPS_GetCharFromBuffer>
 8001112:	4603      	mov	r3, r0
 8001114:	70fb      	strb	r3, [r7, #3]
 8001116:	78fb      	ldrb	r3, [r7, #3]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1ef      	bne.n	80010fc <GPS_GetLineFromBuffer+0x14>
 800111c:	e000      	b.n	8001120 <GPS_GetLineFromBuffer+0x38>
				break;
 800111e:	bf00      	nop
		}
		*LocalLinePointer = 0;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
		GPSBufferLines--;
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <GPS_GetLineFromBuffer+0x58>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	3b01      	subs	r3, #1
 800112c:	b2da      	uxtb	r2, r3
 800112e:	4b04      	ldr	r3, [pc, #16]	; (8001140 <GPS_GetLineFromBuffer+0x58>)
 8001130:	701a      	strb	r2, [r3, #0]
	}
	return 0;
 8001132:	2300      	movs	r3, #0
}
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000428 	.word	0x20000428
 8001140:	20000423 	.word	0x20000423

08001144 <GPS_UartReceiveChar>:

void GPS_UartReceiveChar(){
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
	uint8_t LocalHead;
	LocalHead=(GPSBufferHead + 1) % GPS_BUFFER_SIZE;
 800114a:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <GPS_UartReceiveChar+0x94>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	3301      	adds	r3, #1
 8001150:	425a      	negs	r2, r3
 8001152:	b2db      	uxtb	r3, r3
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	bf58      	it	pl
 8001158:	4253      	negpl	r3, r2
 800115a:	71fb      	strb	r3, [r7, #7]
	if(LocalHead == GPSBufferTail){
 800115c:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <GPS_UartReceiveChar+0x98>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	79fa      	ldrb	r2, [r7, #7]
 8001162:	429a      	cmp	r2, r3
 8001164:	d104      	bne.n	8001170 <GPS_UartReceiveChar+0x2c>
		GPSBufferHead = GPSBufferTail;
 8001166:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <GPS_UartReceiveChar+0x98>)
 8001168:	781a      	ldrb	r2, [r3, #0]
 800116a:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <GPS_UartReceiveChar+0x94>)
 800116c:	701a      	strb	r2, [r3, #0]
 800116e:	e027      	b.n	80011c0 <GPS_UartReceiveChar+0x7c>
	}
		else{
			if(GPSReceivedChar == 13){
 8001170:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <GPS_UartReceiveChar+0x9c>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b0d      	cmp	r3, #13
 8001178:	d10f      	bne.n	800119a <GPS_UartReceiveChar+0x56>
				GPSBufferLines++;
 800117a:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <GPS_UartReceiveChar+0xa0>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	3301      	adds	r3, #1
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <GPS_UartReceiveChar+0xa0>)
 8001184:	701a      	strb	r2, [r3, #0]
				GPSBufferHead = LocalHead;
 8001186:	4a14      	ldr	r2, [pc, #80]	; (80011d8 <GPS_UartReceiveChar+0x94>)
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	7013      	strb	r3, [r2, #0]
				GPSBuffer[LocalHead] = GPSReceivedChar;
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	4a14      	ldr	r2, [pc, #80]	; (80011e0 <GPS_UartReceiveChar+0x9c>)
 8001190:	7812      	ldrb	r2, [r2, #0]
 8001192:	b2d1      	uxtb	r1, r2
 8001194:	4a14      	ldr	r2, [pc, #80]	; (80011e8 <GPS_UartReceiveChar+0xa4>)
 8001196:	54d1      	strb	r1, [r2, r3]
 8001198:	e012      	b.n	80011c0 <GPS_UartReceiveChar+0x7c>
			}
			else if((GPSReceivedChar == 0) || (GPSReceivedChar == 10)){} //Ignore that chars
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <GPS_UartReceiveChar+0x9c>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d00d      	beq.n	80011c0 <GPS_UartReceiveChar+0x7c>
 80011a4:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <GPS_UartReceiveChar+0x9c>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b0a      	cmp	r3, #10
 80011ac:	d008      	beq.n	80011c0 <GPS_UartReceiveChar+0x7c>
			else{
				GPSBufferHead = LocalHead;
 80011ae:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <GPS_UartReceiveChar+0x94>)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	7013      	strb	r3, [r2, #0]
				GPSBuffer[LocalHead] = GPSReceivedChar;
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <GPS_UartReceiveChar+0x9c>)
 80011b8:	7812      	ldrb	r2, [r2, #0]
 80011ba:	b2d1      	uxtb	r1, r2
 80011bc:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <GPS_UartReceiveChar+0xa4>)
 80011be:	54d1      	strb	r1, [r2, r3]
			}

		}
	HAL_UART_Receive_IT(GPS_huart, (uint8_t*)&GPSReceivedChar, 1);
 80011c0:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <GPS_UartReceiveChar+0xa8>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2201      	movs	r2, #1
 80011c6:	4906      	ldr	r1, [pc, #24]	; (80011e0 <GPS_UartReceiveChar+0x9c>)
 80011c8:	4618      	mov	r0, r3
 80011ca:	f003 fcd9 	bl	8004b80 <HAL_UART_Receive_IT>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000229 	.word	0x20000229
 80011dc:	200003fb 	.word	0x200003fb
 80011e0:	20000234 	.word	0x20000234
 80011e4:	20000423 	.word	0x20000423
 80011e8:	20000238 	.word	0x20000238
 80011ec:	20000230 	.word	0x20000230

080011f0 <GPS_ParseGRMC>:

void GPS_ParseGRMC(){
 80011f0:	b5b0      	push	{r4, r5, r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
	char *LocalParsePointer;
	uint32_t LocalTemp;

		//Time
	LocalParsePointer = GPS_Strtoke(NULL, ",");
 80011f6:	49ae      	ldr	r1, [pc, #696]	; (80014b0 <GPS_ParseGRMC+0x2c0>)
 80011f8:	2000      	movs	r0, #0
 80011fa:	f7ff ff1d 	bl	8001038 <GPS_Strtoke>
 80011fe:	6078      	str	r0, [r7, #4]
	if(strlen(LocalParsePointer) > 0){
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d034      	beq.n	8001272 <GPS_ParseGRMC+0x82>
		LocalTemp = atoi(LocalParsePointer);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f004 f862 	bl	80052d2 <atoi>
 800120e:	4603      	mov	r3, r0
 8001210:	603b      	str	r3, [r7, #0]
		GPS_Second = LocalTemp % 100;
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	4ba7      	ldr	r3, [pc, #668]	; (80014b4 <GPS_ParseGRMC+0x2c4>)
 8001216:	fba3 1302 	umull	r1, r3, r3, r2
 800121a:	095b      	lsrs	r3, r3, #5
 800121c:	2164      	movs	r1, #100	; 0x64
 800121e:	fb01 f303 	mul.w	r3, r1, r3
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4ba4      	ldr	r3, [pc, #656]	; (80014b8 <GPS_ParseGRMC+0x2c8>)
 8001228:	701a      	strb	r2, [r3, #0]
		GPS_Minute = (LocalTemp / 100) % 100;
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	4aa1      	ldr	r2, [pc, #644]	; (80014b4 <GPS_ParseGRMC+0x2c4>)
 800122e:	fba2 2303 	umull	r2, r3, r2, r3
 8001232:	095a      	lsrs	r2, r3, #5
 8001234:	4b9f      	ldr	r3, [pc, #636]	; (80014b4 <GPS_ParseGRMC+0x2c4>)
 8001236:	fba3 1302 	umull	r1, r3, r3, r2
 800123a:	095b      	lsrs	r3, r3, #5
 800123c:	2164      	movs	r1, #100	; 0x64
 800123e:	fb01 f303 	mul.w	r3, r1, r3
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b9d      	ldr	r3, [pc, #628]	; (80014bc <GPS_ParseGRMC+0x2cc>)
 8001248:	701a      	strb	r2, [r3, #0]
		GPS_Hour = ((LocalTemp / 10000) % 100)+utc;
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	4a9c      	ldr	r2, [pc, #624]	; (80014c0 <GPS_ParseGRMC+0x2d0>)
 800124e:	fba2 2303 	umull	r2, r3, r2, r3
 8001252:	0b5a      	lsrs	r2, r3, #13
 8001254:	4b97      	ldr	r3, [pc, #604]	; (80014b4 <GPS_ParseGRMC+0x2c4>)
 8001256:	fba3 1302 	umull	r1, r3, r3, r2
 800125a:	095b      	lsrs	r3, r3, #5
 800125c:	2164      	movs	r1, #100	; 0x64
 800125e:	fb01 f303 	mul.w	r3, r1, r3
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4b97      	ldr	r3, [pc, #604]	; (80014c4 <GPS_ParseGRMC+0x2d4>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	4413      	add	r3, r2
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4b96      	ldr	r3, [pc, #600]	; (80014c8 <GPS_ParseGRMC+0x2d8>)
 8001270:	701a      	strb	r2, [r3, #0]
	}

		//Valid flag for GPS data -> A=correct data, V=incorrect data
	LocalParsePointer = GPS_Strtoke(NULL, ",");
 8001272:	498f      	ldr	r1, [pc, #572]	; (80014b0 <GPS_ParseGRMC+0x2c0>)
 8001274:	2000      	movs	r0, #0
 8001276:	f7ff fedf 	bl	8001038 <GPS_Strtoke>
 800127a:	6078      	str	r0, [r7, #4]
	if(strlen(LocalParsePointer) > 0){
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <GPS_ParseGRMC+0x9c>
		GPS_Valid = *LocalParsePointer;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	781a      	ldrb	r2, [r3, #0]
 8001288:	4b90      	ldr	r3, [pc, #576]	; (80014cc <GPS_ParseGRMC+0x2dc>)
 800128a:	701a      	strb	r2, [r3, #0]
		}

		// Latitude
	LocalParsePointer = GPS_Strtoke(NULL, ",");
 800128c:	4988      	ldr	r1, [pc, #544]	; (80014b0 <GPS_ParseGRMC+0x2c0>)
 800128e:	2000      	movs	r0, #0
 8001290:	f7ff fed2 	bl	8001038 <GPS_Strtoke>
 8001294:	6078      	str	r0, [r7, #4]
	if(strlen(LocalParsePointer) > 0){
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d04e      	beq.n	800133c <GPS_ParseGRMC+0x14c>
		GPS_Latitude = atof(LocalParsePointer);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f004 f814 	bl	80052cc <atof>
 80012a4:	4603      	mov	r3, r0
 80012a6:	460c      	mov	r4, r1
 80012a8:	4a89      	ldr	r2, [pc, #548]	; (80014d0 <GPS_ParseGRMC+0x2e0>)
 80012aa:	e9c2 3400 	strd	r3, r4, [r2]
		GPS_LatitudeDeg = GPS_Latitude / 100;								//converting to decimal coordinates
 80012ae:	4b88      	ldr	r3, [pc, #544]	; (80014d0 <GPS_ParseGRMC+0x2e0>)
 80012b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	4b86      	ldr	r3, [pc, #536]	; (80014d4 <GPS_ParseGRMC+0x2e4>)
 80012ba:	f7ff fa41 	bl	8000740 <__aeabi_ddiv>
 80012be:	4603      	mov	r3, r0
 80012c0:	460c      	mov	r4, r1
 80012c2:	4618      	mov	r0, r3
 80012c4:	4621      	mov	r1, r4
 80012c6:	f7ff fbe9 	bl	8000a9c <__aeabi_d2uiz>
 80012ca:	4603      	mov	r3, r0
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	4b82      	ldr	r3, [pc, #520]	; (80014d8 <GPS_ParseGRMC+0x2e8>)
 80012d0:	801a      	strh	r2, [r3, #0]
		GPS_LatitudeSec = GPS_Latitude - (GPS_LatitudeDeg*100);
 80012d2:	4b7f      	ldr	r3, [pc, #508]	; (80014d0 <GPS_ParseGRMC+0x2e0>)
 80012d4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80012d8:	4b7f      	ldr	r3, [pc, #508]	; (80014d8 <GPS_ParseGRMC+0x2e8>)
 80012da:	881b      	ldrh	r3, [r3, #0]
 80012dc:	461a      	mov	r2, r3
 80012de:	2364      	movs	r3, #100	; 0x64
 80012e0:	fb03 f302 	mul.w	r3, r3, r2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff f897 	bl	8000418 <__aeabi_i2d>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4620      	mov	r0, r4
 80012f0:	4629      	mov	r1, r5
 80012f2:	f7fe ff43 	bl	800017c <__aeabi_dsub>
 80012f6:	4603      	mov	r3, r0
 80012f8:	460c      	mov	r4, r1
 80012fa:	4618      	mov	r0, r3
 80012fc:	4621      	mov	r1, r4
 80012fe:	f7ff fbed 	bl	8000adc <__aeabi_d2f>
 8001302:	4602      	mov	r2, r0
 8001304:	4b75      	ldr	r3, [pc, #468]	; (80014dc <GPS_ParseGRMC+0x2ec>)
 8001306:	601a      	str	r2, [r3, #0]
		GPS_Latitude = GPS_LatitudeDeg + (GPS_LatitudeSec)/60;
 8001308:	4b73      	ldr	r3, [pc, #460]	; (80014d8 <GPS_ParseGRMC+0x2e8>)
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fcef 	bl	8000cf0 <__aeabi_i2f>
 8001312:	4604      	mov	r4, r0
 8001314:	4b71      	ldr	r3, [pc, #452]	; (80014dc <GPS_ParseGRMC+0x2ec>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4971      	ldr	r1, [pc, #452]	; (80014e0 <GPS_ParseGRMC+0x2f0>)
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fdf0 	bl	8000f00 <__aeabi_fdiv>
 8001320:	4603      	mov	r3, r0
 8001322:	4619      	mov	r1, r3
 8001324:	4620      	mov	r0, r4
 8001326:	f7ff fc2f 	bl	8000b88 <__addsf3>
 800132a:	4603      	mov	r3, r0
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f885 	bl	800043c <__aeabi_f2d>
 8001332:	4603      	mov	r3, r0
 8001334:	460c      	mov	r4, r1
 8001336:	4a66      	ldr	r2, [pc, #408]	; (80014d0 <GPS_ParseGRMC+0x2e0>)
 8001338:	e9c2 3400 	strd	r3, r4, [r2]
	}

		// Latitude Direction
	LocalParsePointer = GPS_Strtoke(NULL, ",");
 800133c:	495c      	ldr	r1, [pc, #368]	; (80014b0 <GPS_ParseGRMC+0x2c0>)
 800133e:	2000      	movs	r0, #0
 8001340:	f7ff fe7a 	bl	8001038 <GPS_Strtoke>
 8001344:	6078      	str	r0, [r7, #4]
	if(strlen(LocalParsePointer) > 0){
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <GPS_ParseGRMC+0x166>
		GPS_LatitudeDirection = *LocalParsePointer;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	781a      	ldrb	r2, [r3, #0]
 8001352:	4b64      	ldr	r3, [pc, #400]	; (80014e4 <GPS_ParseGRMC+0x2f4>)
 8001354:	701a      	strb	r2, [r3, #0]
	}

		// Longnitude
	LocalParsePointer = GPS_Strtoke(NULL, ",");
 8001356:	4956      	ldr	r1, [pc, #344]	; (80014b0 <GPS_ParseGRMC+0x2c0>)
 8001358:	2000      	movs	r0, #0
 800135a:	f7ff fe6d 	bl	8001038 <GPS_Strtoke>
 800135e:	6078      	str	r0, [r7, #4]
	if(strlen(LocalParsePointer) > 0){
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d04e      	beq.n	8001406 <GPS_ParseGRMC+0x216>
		GPS_Longitude = atof(LocalParsePointer);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f003 ffaf 	bl	80052cc <atof>
 800136e:	4603      	mov	r3, r0
 8001370:	460c      	mov	r4, r1
 8001372:	4a5d      	ldr	r2, [pc, #372]	; (80014e8 <GPS_ParseGRMC+0x2f8>)
 8001374:	e9c2 3400 	strd	r3, r4, [r2]
		GPS_LongitudeDeg = GPS_Longitude /100;								//converting to decimal coordinates
 8001378:	4b5b      	ldr	r3, [pc, #364]	; (80014e8 <GPS_ParseGRMC+0x2f8>)
 800137a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	4b54      	ldr	r3, [pc, #336]	; (80014d4 <GPS_ParseGRMC+0x2e4>)
 8001384:	f7ff f9dc 	bl	8000740 <__aeabi_ddiv>
 8001388:	4603      	mov	r3, r0
 800138a:	460c      	mov	r4, r1
 800138c:	4618      	mov	r0, r3
 800138e:	4621      	mov	r1, r4
 8001390:	f7ff fb84 	bl	8000a9c <__aeabi_d2uiz>
 8001394:	4603      	mov	r3, r0
 8001396:	b29a      	uxth	r2, r3
 8001398:	4b54      	ldr	r3, [pc, #336]	; (80014ec <GPS_ParseGRMC+0x2fc>)
 800139a:	801a      	strh	r2, [r3, #0]
		GPS_LongitudeSec = GPS_Longitude - (GPS_LongitudeDeg*100);
 800139c:	4b52      	ldr	r3, [pc, #328]	; (80014e8 <GPS_ParseGRMC+0x2f8>)
 800139e:	e9d3 4500 	ldrd	r4, r5, [r3]
 80013a2:	4b52      	ldr	r3, [pc, #328]	; (80014ec <GPS_ParseGRMC+0x2fc>)
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	461a      	mov	r2, r3
 80013a8:	2364      	movs	r3, #100	; 0x64
 80013aa:	fb03 f302 	mul.w	r3, r3, r2
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f832 	bl	8000418 <__aeabi_i2d>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4620      	mov	r0, r4
 80013ba:	4629      	mov	r1, r5
 80013bc:	f7fe fede 	bl	800017c <__aeabi_dsub>
 80013c0:	4603      	mov	r3, r0
 80013c2:	460c      	mov	r4, r1
 80013c4:	4618      	mov	r0, r3
 80013c6:	4621      	mov	r1, r4
 80013c8:	f7ff fb88 	bl	8000adc <__aeabi_d2f>
 80013cc:	4602      	mov	r2, r0
 80013ce:	4b48      	ldr	r3, [pc, #288]	; (80014f0 <GPS_ParseGRMC+0x300>)
 80013d0:	601a      	str	r2, [r3, #0]
		GPS_Longitude = GPS_LongitudeDeg + (GPS_LongitudeSec)/60;
 80013d2:	4b46      	ldr	r3, [pc, #280]	; (80014ec <GPS_ParseGRMC+0x2fc>)
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fc8a 	bl	8000cf0 <__aeabi_i2f>
 80013dc:	4604      	mov	r4, r0
 80013de:	4b44      	ldr	r3, [pc, #272]	; (80014f0 <GPS_ParseGRMC+0x300>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	493f      	ldr	r1, [pc, #252]	; (80014e0 <GPS_ParseGRMC+0x2f0>)
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fd8b 	bl	8000f00 <__aeabi_fdiv>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4619      	mov	r1, r3
 80013ee:	4620      	mov	r0, r4
 80013f0:	f7ff fbca 	bl	8000b88 <__addsf3>
 80013f4:	4603      	mov	r3, r0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff f820 	bl	800043c <__aeabi_f2d>
 80013fc:	4603      	mov	r3, r0
 80013fe:	460c      	mov	r4, r1
 8001400:	4a39      	ldr	r2, [pc, #228]	; (80014e8 <GPS_ParseGRMC+0x2f8>)
 8001402:	e9c2 3400 	strd	r3, r4, [r2]

	}

		// Longnitude Direction
	LocalParsePointer = GPS_Strtoke(NULL, ",");
 8001406:	492a      	ldr	r1, [pc, #168]	; (80014b0 <GPS_ParseGRMC+0x2c0>)
 8001408:	2000      	movs	r0, #0
 800140a:	f7ff fe15 	bl	8001038 <GPS_Strtoke>
 800140e:	6078      	str	r0, [r7, #4]
	if(strlen(LocalParsePointer) > 0){
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <GPS_ParseGRMC+0x230>
		GPS_LongitudeDirection = *LocalParsePointer;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	781a      	ldrb	r2, [r3, #0]
 800141c:	4b35      	ldr	r3, [pc, #212]	; (80014f4 <GPS_ParseGRMC+0x304>)
 800141e:	701a      	strb	r2, [r3, #0]
	}

		//Unnecessary elements
	LocalParsePointer = GPS_Strtoke(NULL, ",");
 8001420:	4923      	ldr	r1, [pc, #140]	; (80014b0 <GPS_ParseGRMC+0x2c0>)
 8001422:	2000      	movs	r0, #0
 8001424:	f7ff fe08 	bl	8001038 <GPS_Strtoke>
 8001428:	6078      	str	r0, [r7, #4]
	LocalParsePointer = GPS_Strtoke(NULL, ",");
 800142a:	4921      	ldr	r1, [pc, #132]	; (80014b0 <GPS_ParseGRMC+0x2c0>)
 800142c:	2000      	movs	r0, #0
 800142e:	f7ff fe03 	bl	8001038 <GPS_Strtoke>
 8001432:	6078      	str	r0, [r7, #4]
	LocalParsePointer = GPS_Strtoke(NULL, ",");
 8001434:	491e      	ldr	r1, [pc, #120]	; (80014b0 <GPS_ParseGRMC+0x2c0>)
 8001436:	2000      	movs	r0, #0
 8001438:	f7ff fdfe 	bl	8001038 <GPS_Strtoke>
 800143c:	6078      	str	r0, [r7, #4]

		//Date
	if(strlen(LocalParsePointer) > 0){
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d030      	beq.n	80014a8 <GPS_ParseGRMC+0x2b8>
		LocalTemp = atoi(LocalParsePointer);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f003 ff43 	bl	80052d2 <atoi>
 800144c:	4603      	mov	r3, r0
 800144e:	603b      	str	r3, [r7, #0]
		GPS_Year = (LocalTemp % 100);
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <GPS_ParseGRMC+0x2c4>)
 8001454:	fba3 1302 	umull	r1, r3, r3, r2
 8001458:	095b      	lsrs	r3, r3, #5
 800145a:	2164      	movs	r1, #100	; 0x64
 800145c:	fb01 f303 	mul.w	r3, r1, r3
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	b29a      	uxth	r2, r3
 8001464:	4b24      	ldr	r3, [pc, #144]	; (80014f8 <GPS_ParseGRMC+0x308>)
 8001466:	801a      	strh	r2, [r3, #0]
		GPS_Month = (LocalTemp / 100) % 100;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <GPS_ParseGRMC+0x2c4>)
 800146c:	fba2 2303 	umull	r2, r3, r2, r3
 8001470:	095a      	lsrs	r2, r3, #5
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <GPS_ParseGRMC+0x2c4>)
 8001474:	fba3 1302 	umull	r1, r3, r3, r2
 8001478:	095b      	lsrs	r3, r3, #5
 800147a:	2164      	movs	r1, #100	; 0x64
 800147c:	fb01 f303 	mul.w	r3, r1, r3
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	b2da      	uxtb	r2, r3
 8001484:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <GPS_ParseGRMC+0x30c>)
 8001486:	701a      	strb	r2, [r3, #0]
		GPS_Day = (LocalTemp / 10000) % 100;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	4a0d      	ldr	r2, [pc, #52]	; (80014c0 <GPS_ParseGRMC+0x2d0>)
 800148c:	fba2 2303 	umull	r2, r3, r2, r3
 8001490:	0b5a      	lsrs	r2, r3, #13
 8001492:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <GPS_ParseGRMC+0x2c4>)
 8001494:	fba3 1302 	umull	r1, r3, r3, r2
 8001498:	095b      	lsrs	r3, r3, #5
 800149a:	2164      	movs	r1, #100	; 0x64
 800149c:	fb01 f303 	mul.w	r3, r1, r3
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	4b16      	ldr	r3, [pc, #88]	; (8001500 <GPS_ParseGRMC+0x310>)
 80014a6:	701a      	strb	r2, [r3, #0]
	}
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bdb0      	pop	{r4, r5, r7, pc}
 80014b0:	08008a60 	.word	0x08008a60
 80014b4:	51eb851f 	.word	0x51eb851f
 80014b8:	2000022a 	.word	0x2000022a
 80014bc:	20000421 	.word	0x20000421
 80014c0:	d1b71759 	.word	0xd1b71759
 80014c4:	20000228 	.word	0x20000228
 80014c8:	20000424 	.word	0x20000424
 80014cc:	20000413 	.word	0x20000413
 80014d0:	20000408 	.word	0x20000408
 80014d4:	40590000 	.word	0x40590000
 80014d8:	200004a8 	.word	0x200004a8
 80014dc:	2000022c 	.word	0x2000022c
 80014e0:	42700000 	.word	0x42700000
 80014e4:	200003f9 	.word	0x200003f9
 80014e8:	20000418 	.word	0x20000418
 80014ec:	20000416 	.word	0x20000416
 80014f0:	200003fc 	.word	0x200003fc
 80014f4:	2000022b 	.word	0x2000022b
 80014f8:	20000410 	.word	0x20000410
 80014fc:	20000400 	.word	0x20000400
 8001500:	20000412 	.word	0x20000412

08001504 <GPS_ParseLine>:

void GPS_ParseLine(){
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
	char* LocalParsePointer = GPS_Strtoke((char*)GPSWorkingBuffer, ",");
 800150a:	4909      	ldr	r1, [pc, #36]	; (8001530 <GPS_ParseLine+0x2c>)
 800150c:	4809      	ldr	r0, [pc, #36]	; (8001534 <GPS_ParseLine+0x30>)
 800150e:	f7ff fd93 	bl	8001038 <GPS_Strtoke>
 8001512:	6078      	str	r0, [r7, #4]
	if(strcmp(LocalParsePointer, "$GPRMC") == 0) GPS_ParseGRMC();
 8001514:	4908      	ldr	r1, [pc, #32]	; (8001538 <GPS_ParseLine+0x34>)
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7fe fe1a 	bl	8000150 <strcmp>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <GPS_ParseLine+0x22>
 8001522:	f7ff fe65 	bl	80011f0 <GPS_ParseGRMC>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	08008a60 	.word	0x08008a60
 8001534:	20000428 	.word	0x20000428
 8001538:	08008a64 	.word	0x08008a64

0800153c <GPS_Work>:

void GPS_Work(){
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	if(GPSBufferLines){
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <GPS_Work+0x18>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <GPS_Work+0x14>
		GPS_GetLineFromBuffer();
 8001548:	f7ff fdce 	bl	80010e8 <GPS_GetLineFromBuffer>
		GPS_ParseLine();
 800154c:	f7ff ffda 	bl	8001504 <GPS_ParseLine>
	}
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000423 	.word	0x20000423

08001558 <GPS_Init>:

void GPS_Init(UART_HandleTypeDef *huart1){
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	GPS_huart = huart1;
 8001560:	4a19      	ldr	r2, [pc, #100]	; (80015c8 <GPS_Init+0x70>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6013      	str	r3, [r2, #0]
	GPS_Hour=0;
 8001566:	4b19      	ldr	r3, [pc, #100]	; (80015cc <GPS_Init+0x74>)
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
	GPS_Minute=0;
 800156c:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <GPS_Init+0x78>)
 800156e:	2200      	movs	r2, #0
 8001570:	701a      	strb	r2, [r3, #0]
	GPS_Second=0;
 8001572:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <GPS_Init+0x7c>)
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
	GPS_Year=0;
 8001578:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <GPS_Init+0x80>)
 800157a:	2200      	movs	r2, #0
 800157c:	801a      	strh	r2, [r3, #0]
	GPS_Month=0;
 800157e:	4b17      	ldr	r3, [pc, #92]	; (80015dc <GPS_Init+0x84>)
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]
	GPS_Day=0;
 8001584:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <GPS_Init+0x88>)
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
	GPS_Latitude=0;
 800158a:	4a16      	ldr	r2, [pc, #88]	; (80015e4 <GPS_Init+0x8c>)
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	f04f 0400 	mov.w	r4, #0
 8001594:	e9c2 3400 	strd	r3, r4, [r2]
	GPS_LatitudeDirection='0';
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <GPS_Init+0x90>)
 800159a:	2230      	movs	r2, #48	; 0x30
 800159c:	701a      	strb	r2, [r3, #0]
	GPS_Longitude=0;
 800159e:	4a13      	ldr	r2, [pc, #76]	; (80015ec <GPS_Init+0x94>)
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	f04f 0400 	mov.w	r4, #0
 80015a8:	e9c2 3400 	strd	r3, r4, [r2]
	GPS_LongitudeDirection='0';
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <GPS_Init+0x98>)
 80015ae:	2230      	movs	r2, #48	; 0x30
 80015b0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(GPS_huart, (uint8_t*)&GPSReceivedChar, 1);
 80015b2:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <GPS_Init+0x70>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2201      	movs	r2, #1
 80015b8:	490e      	ldr	r1, [pc, #56]	; (80015f4 <GPS_Init+0x9c>)
 80015ba:	4618      	mov	r0, r3
 80015bc:	f003 fae0 	bl	8004b80 <HAL_UART_Receive_IT>
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd90      	pop	{r4, r7, pc}
 80015c8:	20000230 	.word	0x20000230
 80015cc:	20000424 	.word	0x20000424
 80015d0:	20000421 	.word	0x20000421
 80015d4:	2000022a 	.word	0x2000022a
 80015d8:	20000410 	.word	0x20000410
 80015dc:	20000400 	.word	0x20000400
 80015e0:	20000412 	.word	0x20000412
 80015e4:	20000408 	.word	0x20000408
 80015e8:	200003f9 	.word	0x200003f9
 80015ec:	20000418 	.word	0x20000418
 80015f0:	2000022b 	.word	0x2000022b
 80015f4:	20000234 	.word	0x20000234

080015f8 <GSM_GetCharFromBuffer>:
uint8_t GSMWorkingBuffer[GSM_WORKING_BUFFER_SIZE];
uint8_t GSMBuffer[GSM_BUFFER_SIZE];
uint16_t size=0;


int GSM_GetCharFromBuffer(){
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
	if(GSMBufferHead == GSMBufferTail){
 80015fc:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <GSM_GetCharFromBuffer+0x40>)
 80015fe:	781a      	ldrb	r2, [r3, #0]
 8001600:	4b0e      	ldr	r3, [pc, #56]	; (800163c <GSM_GetCharFromBuffer+0x44>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	429a      	cmp	r2, r3
 8001606:	d102      	bne.n	800160e <GSM_GetCharFromBuffer+0x16>
		return -1;
 8001608:	f04f 33ff 	mov.w	r3, #4294967295
 800160c:	e00f      	b.n	800162e <GSM_GetCharFromBuffer+0x36>
	}
	GSMBufferTail = (GSMBufferTail + 1) % GSM_BUFFER_SIZE;
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <GSM_GetCharFromBuffer+0x44>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	3301      	adds	r3, #1
 8001614:	425a      	negs	r2, r3
 8001616:	b2db      	uxtb	r3, r3
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	bf58      	it	pl
 800161c:	4253      	negpl	r3, r2
 800161e:	b2da      	uxtb	r2, r3
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <GSM_GetCharFromBuffer+0x44>)
 8001622:	701a      	strb	r2, [r3, #0]
	return GSMBuffer[GSMBufferTail];
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <GSM_GetCharFromBuffer+0x44>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	4b05      	ldr	r3, [pc, #20]	; (8001640 <GSM_GetCharFromBuffer+0x48>)
 800162c:	5c9b      	ldrb	r3, [r3, r2]
}
 800162e:	4618      	mov	r0, r3
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	200004b0 	.word	0x200004b0
 800163c:	20000534 	.word	0x20000534
 8001640:	20000538 	.word	0x20000538

08001644 <GSM_GetLineFromBuffer>:

int GSM_GetLineFromBuffer(){
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
	char LocalChar;
	char* LocalLinePointer = (char*)GSMWorkingBuffer;
 800164a:	4b13      	ldr	r3, [pc, #76]	; (8001698 <GSM_GetLineFromBuffer+0x54>)
 800164c:	607b      	str	r3, [r7, #4]
	if(GSMBufferLines){
 800164e:	4b13      	ldr	r3, [pc, #76]	; (800169c <GSM_GetLineFromBuffer+0x58>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d01b      	beq.n	800168e <GSM_GetLineFromBuffer+0x4a>
		while((LocalChar = GSM_GetCharFromBuffer())){
 8001656:	e008      	b.n	800166a <GSM_GetLineFromBuffer+0x26>
			if(LocalChar == 13){							//detecting CR
 8001658:	78fb      	ldrb	r3, [r7, #3]
 800165a:	2b0d      	cmp	r3, #13
 800165c:	d00d      	beq.n	800167a <GSM_GetLineFromBuffer+0x36>
				break;
			}
			*LocalLinePointer = LocalChar;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	78fa      	ldrb	r2, [r7, #3]
 8001662:	701a      	strb	r2, [r3, #0]
			LocalLinePointer++;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3301      	adds	r3, #1
 8001668:	607b      	str	r3, [r7, #4]
		while((LocalChar = GSM_GetCharFromBuffer())){
 800166a:	f7ff ffc5 	bl	80015f8 <GSM_GetCharFromBuffer>
 800166e:	4603      	mov	r3, r0
 8001670:	70fb      	strb	r3, [r7, #3]
 8001672:	78fb      	ldrb	r3, [r7, #3]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1ef      	bne.n	8001658 <GSM_GetLineFromBuffer+0x14>
 8001678:	e000      	b.n	800167c <GSM_GetLineFromBuffer+0x38>
				break;
 800167a:	bf00      	nop
		}
		*LocalLinePointer = 0;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
		GSMBufferLines--;
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <GSM_GetLineFromBuffer+0x58>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	3b01      	subs	r3, #1
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4b04      	ldr	r3, [pc, #16]	; (800169c <GSM_GetLineFromBuffer+0x58>)
 800168c:	701a      	strb	r2, [r3, #0]
	}
	return 0;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	200004b4 	.word	0x200004b4
 800169c:	20000638 	.word	0x20000638

080016a0 <GSM_UartReceiveChar>:

void GSM_UartReceiveChar(){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
	uint8_t LocalHead;
	LocalHead=(GSMBufferHead + 1) % GSM_BUFFER_SIZE;
 80016a6:	4b23      	ldr	r3, [pc, #140]	; (8001734 <GSM_UartReceiveChar+0x94>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	3301      	adds	r3, #1
 80016ac:	425a      	negs	r2, r3
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	bf58      	it	pl
 80016b4:	4253      	negpl	r3, r2
 80016b6:	71fb      	strb	r3, [r7, #7]
	if(LocalHead == GSMBufferTail){
 80016b8:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <GSM_UartReceiveChar+0x98>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	79fa      	ldrb	r2, [r7, #7]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d104      	bne.n	80016cc <GSM_UartReceiveChar+0x2c>
		GSMBufferHead = GSMBufferTail;
 80016c2:	4b1d      	ldr	r3, [pc, #116]	; (8001738 <GSM_UartReceiveChar+0x98>)
 80016c4:	781a      	ldrb	r2, [r3, #0]
 80016c6:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <GSM_UartReceiveChar+0x94>)
 80016c8:	701a      	strb	r2, [r3, #0]
 80016ca:	e027      	b.n	800171c <GSM_UartReceiveChar+0x7c>
	}
		else{
			if(GSMReceivedChar == 13){
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <GSM_UartReceiveChar+0x9c>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b0d      	cmp	r3, #13
 80016d4:	d10f      	bne.n	80016f6 <GSM_UartReceiveChar+0x56>
				GSMBufferLines++;
 80016d6:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <GSM_UartReceiveChar+0xa0>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	3301      	adds	r3, #1
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	4b18      	ldr	r3, [pc, #96]	; (8001740 <GSM_UartReceiveChar+0xa0>)
 80016e0:	701a      	strb	r2, [r3, #0]
				GSMBufferHead = LocalHead;
 80016e2:	4a14      	ldr	r2, [pc, #80]	; (8001734 <GSM_UartReceiveChar+0x94>)
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	7013      	strb	r3, [r2, #0]
				GSMBuffer[LocalHead] = GSMReceivedChar;
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	4a14      	ldr	r2, [pc, #80]	; (800173c <GSM_UartReceiveChar+0x9c>)
 80016ec:	7812      	ldrb	r2, [r2, #0]
 80016ee:	b2d1      	uxtb	r1, r2
 80016f0:	4a14      	ldr	r2, [pc, #80]	; (8001744 <GSM_UartReceiveChar+0xa4>)
 80016f2:	54d1      	strb	r1, [r2, r3]
 80016f4:	e012      	b.n	800171c <GSM_UartReceiveChar+0x7c>
			}
			else if((GSMReceivedChar == 0) || (GSMReceivedChar == 10)){} //Ignore that chars
 80016f6:	4b11      	ldr	r3, [pc, #68]	; (800173c <GSM_UartReceiveChar+0x9c>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d00d      	beq.n	800171c <GSM_UartReceiveChar+0x7c>
 8001700:	4b0e      	ldr	r3, [pc, #56]	; (800173c <GSM_UartReceiveChar+0x9c>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b0a      	cmp	r3, #10
 8001708:	d008      	beq.n	800171c <GSM_UartReceiveChar+0x7c>
			else{
				GSMBufferHead = LocalHead;
 800170a:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <GSM_UartReceiveChar+0x94>)
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	7013      	strb	r3, [r2, #0]
				GSMBuffer[LocalHead] = GSMReceivedChar;
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	4a0a      	ldr	r2, [pc, #40]	; (800173c <GSM_UartReceiveChar+0x9c>)
 8001714:	7812      	ldrb	r2, [r2, #0]
 8001716:	b2d1      	uxtb	r1, r2
 8001718:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <GSM_UartReceiveChar+0xa4>)
 800171a:	54d1      	strb	r1, [r2, r3]
			}

		}
	HAL_UART_Receive_IT(GSM_huart, (uint8_t*)&GSMReceivedChar, 1);
 800171c:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <GSM_UartReceiveChar+0xa8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2201      	movs	r2, #1
 8001722:	4906      	ldr	r1, [pc, #24]	; (800173c <GSM_UartReceiveChar+0x9c>)
 8001724:	4618      	mov	r0, r3
 8001726:	f003 fa2b 	bl	8004b80 <HAL_UART_Receive_IT>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200004b0 	.word	0x200004b0
 8001738:	20000534 	.word	0x20000534
 800173c:	200004b1 	.word	0x200004b1
 8001740:	20000638 	.word	0x20000638
 8001744:	20000538 	.word	0x20000538
 8001748:	200004ac 	.word	0x200004ac

0800174c <GSM_ParseNumber>:

void GSM_ParseNumber(){
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
	char *LocalParsePointer;

		//**Get phone number only in init**//
		LocalParsePointer = GPS_Strtoke(NULL, " ");
 8001752:	4915      	ldr	r1, [pc, #84]	; (80017a8 <GSM_ParseNumber+0x5c>)
 8001754:	2000      	movs	r0, #0
 8001756:	f7ff fc6f 	bl	8001038 <GPS_Strtoke>
 800175a:	4603      	mov	r3, r0
 800175c:	607b      	str	r3, [r7, #4]
			if((strlen(LocalParsePointer) > 0)&&(controlLCD==0)){
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d007      	beq.n	8001776 <GSM_ParseNumber+0x2a>
 8001766:	4b11      	ldr	r3, [pc, #68]	; (80017ac <GSM_ParseNumber+0x60>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d103      	bne.n	8001776 <GSM_ParseNumber+0x2a>
				sprintf(number,"%s",LocalParsePointer);
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	480f      	ldr	r0, [pc, #60]	; (80017b0 <GSM_ParseNumber+0x64>)
 8001772:	f004 fa55 	bl	8005c20 <strcpy>
			}

		//**Get UTC correction**//
		LocalParsePointer = GPS_Strtoke(NULL, " ");
 8001776:	490c      	ldr	r1, [pc, #48]	; (80017a8 <GSM_ParseNumber+0x5c>)
 8001778:	2000      	movs	r0, #0
 800177a:	f7ff fc5d 	bl	8001038 <GPS_Strtoke>
 800177e:	4603      	mov	r3, r0
 8001780:	607b      	str	r3, [r7, #4]
			if((strlen(LocalParsePointer) > 0)&&(controlLCD==0)){
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00a      	beq.n	80017a0 <GSM_ParseNumber+0x54>
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <GSM_ParseNumber+0x60>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d106      	bne.n	80017a0 <GSM_ParseNumber+0x54>
				utc=atoi(LocalParsePointer);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f003 fd9d 	bl	80052d2 <atoi>
 8001798:	4603      	mov	r3, r0
 800179a:	b2da      	uxtb	r2, r3
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <GSM_ParseNumber+0x68>)
 800179e:	701a      	strb	r2, [r3, #0]
			}
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	08008a6c 	.word	0x08008a6c
 80017ac:	20000422 	.word	0x20000422
 80017b0:	20000338 	.word	0x20000338
 80017b4:	20000228 	.word	0x20000228

080017b8 <GSM_ParseMode>:

void GSM_ParseMode(){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
	char *LocalParsePointer;

		//**Get mode**//
		LocalParsePointer = GPS_Strtoke(NULL, " ");
 80017be:	4917      	ldr	r1, [pc, #92]	; (800181c <GSM_ParseMode+0x64>)
 80017c0:	2000      	movs	r0, #0
 80017c2:	f7ff fc39 	bl	8001038 <GPS_Strtoke>
 80017c6:	4603      	mov	r3, r0
 80017c8:	607b      	str	r3, [r7, #4]
			if(strlen(LocalParsePointer) > 0){
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00e      	beq.n	80017f0 <GSM_ParseMode+0x38>
				mode = atoi(LocalParsePointer);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f003 fd7d 	bl	80052d2 <atoi>
 80017d8:	4603      	mov	r3, r0
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	4b10      	ldr	r3, [pc, #64]	; (8001820 <GSM_ParseMode+0x68>)
 80017de:	701a      	strb	r2, [r3, #0]
				if(mode==1){
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <GSM_ParseMode+0x68>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d103      	bne.n	80017f0 <GSM_ParseMode+0x38>
					compareMinutes=GPS_Minute;
 80017e8:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <GSM_ParseMode+0x6c>)
 80017ea:	781a      	ldrb	r2, [r3, #0]
 80017ec:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <GSM_ParseMode+0x70>)
 80017ee:	701a      	strb	r2, [r3, #0]
				}
			}

		//**Get interval between messages in mode 1**//
		LocalParsePointer = GPS_Strtoke(NULL, " ");
 80017f0:	490a      	ldr	r1, [pc, #40]	; (800181c <GSM_ParseMode+0x64>)
 80017f2:	2000      	movs	r0, #0
 80017f4:	f7ff fc20 	bl	8001038 <GPS_Strtoke>
 80017f8:	4603      	mov	r3, r0
 80017fa:	607b      	str	r3, [r7, #4]
			if(strlen(LocalParsePointer) > 0){
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d006      	beq.n	8001812 <GSM_ParseMode+0x5a>
				interval = atoi(LocalParsePointer);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f003 fd64 	bl	80052d2 <atoi>
 800180a:	4603      	mov	r3, r0
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4b07      	ldr	r3, [pc, #28]	; (800182c <GSM_ParseMode+0x74>)
 8001810:	701a      	strb	r2, [r3, #0]
			}
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	08008a6c 	.word	0x08008a6c
 8001820:	200003fa 	.word	0x200003fa
 8001824:	20000421 	.word	0x20000421
 8001828:	20000414 	.word	0x20000414
 800182c:	20000420 	.word	0x20000420

08001830 <GSM_Read>:

void GSM_Read(){
 8001830:	b5b0      	push	{r4, r5, r7, lr}
 8001832:	af00      	add	r7, sp, #0
	size=sprintf(Message, "at+cmgl=\"REC UNREAD\"\r");
 8001834:	4a0d      	ldr	r2, [pc, #52]	; (800186c <GSM_Read+0x3c>)
 8001836:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <GSM_Read+0x40>)
 8001838:	4615      	mov	r5, r2
 800183a:	461c      	mov	r4, r3
 800183c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800183e:	6028      	str	r0, [r5, #0]
 8001840:	6069      	str	r1, [r5, #4]
 8001842:	60aa      	str	r2, [r5, #8]
 8001844:	60eb      	str	r3, [r5, #12]
 8001846:	6820      	ldr	r0, [r4, #0]
 8001848:	6128      	str	r0, [r5, #16]
 800184a:	88a3      	ldrh	r3, [r4, #4]
 800184c:	82ab      	strh	r3, [r5, #20]
 800184e:	2315      	movs	r3, #21
 8001850:	b29a      	uxth	r2, r3
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <GSM_Read+0x44>)
 8001854:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_IT(GSM_huart, Message, size);
 8001856:	4b08      	ldr	r3, [pc, #32]	; (8001878 <GSM_Read+0x48>)
 8001858:	6818      	ldr	r0, [r3, #0]
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <GSM_Read+0x44>)
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	461a      	mov	r2, r3
 8001860:	4902      	ldr	r1, [pc, #8]	; (800186c <GSM_Read+0x3c>)
 8001862:	f003 f949 	bl	8004af8 <HAL_UART_Transmit_IT>
}
 8001866:	bf00      	nop
 8001868:	bdb0      	pop	{r4, r5, r7, pc}
 800186a:	bf00      	nop
 800186c:	20000344 	.word	0x20000344
 8001870:	08008a70 	.word	0x08008a70
 8001874:	20000200 	.word	0x20000200
 8001878:	200004ac 	.word	0x200004ac

0800187c <GSM_SelectNumber>:

void GSM_SelectNumber(){
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
		size=sprintf(Message, "AT+CMGS=\"+48%s\"\r",number);
 8001880:	4a09      	ldr	r2, [pc, #36]	; (80018a8 <GSM_SelectNumber+0x2c>)
 8001882:	490a      	ldr	r1, [pc, #40]	; (80018ac <GSM_SelectNumber+0x30>)
 8001884:	480a      	ldr	r0, [pc, #40]	; (80018b0 <GSM_SelectNumber+0x34>)
 8001886:	f004 f9ab 	bl	8005be0 <siprintf>
 800188a:	4603      	mov	r3, r0
 800188c:	b29a      	uxth	r2, r3
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <GSM_SelectNumber+0x38>)
 8001890:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_IT(GSM_huart, Message, size);
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <GSM_SelectNumber+0x3c>)
 8001894:	6818      	ldr	r0, [r3, #0]
 8001896:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <GSM_SelectNumber+0x38>)
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	4904      	ldr	r1, [pc, #16]	; (80018b0 <GSM_SelectNumber+0x34>)
 800189e:	f003 f92b 	bl	8004af8 <HAL_UART_Transmit_IT>
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000338 	.word	0x20000338
 80018ac:	08008a88 	.word	0x08008a88
 80018b0:	20000344 	.word	0x20000344
 80018b4:	20000200 	.word	0x20000200
 80018b8:	200004ac 	.word	0x200004ac

080018bc <GSM_ParseLine>:

void GSM_ParseLine(){
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
	char* LocalParsePointer = GPS_Strtoke((char*)GSMWorkingBuffer, " ");
 80018c2:	491b      	ldr	r1, [pc, #108]	; (8001930 <GSM_ParseLine+0x74>)
 80018c4:	481b      	ldr	r0, [pc, #108]	; (8001934 <GSM_ParseLine+0x78>)
 80018c6:	f7ff fbb7 	bl	8001038 <GPS_Strtoke>
 80018ca:	4603      	mov	r3, r0
 80018cc:	607b      	str	r3, [r7, #4]
	if(strcmp(LocalParsePointer, "+CMTI:") == 0){
 80018ce:	491a      	ldr	r1, [pc, #104]	; (8001938 <GSM_ParseLine+0x7c>)
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7fe fc3d 	bl	8000150 <strcmp>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <GSM_ParseLine+0x24>
		GSM_Read();
 80018dc:	f7ff ffa8 	bl	8001830 <GSM_Read>
	}

	if(strcmp(LocalParsePointer, "NUMBER") == 0){
 80018e0:	4916      	ldr	r1, [pc, #88]	; (800193c <GSM_ParseLine+0x80>)
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7fe fc34 	bl	8000150 <strcmp>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <GSM_ParseLine+0x36>
			GSM_ParseNumber();
 80018ee:	f7ff ff2d 	bl	800174c <GSM_ParseNumber>
		}

	if(strcmp(LocalParsePointer, "MODE") == 0){
 80018f2:	4913      	ldr	r1, [pc, #76]	; (8001940 <GSM_ParseLine+0x84>)
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7fe fc2b 	bl	8000150 <strcmp>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d106      	bne.n	800190e <GSM_ParseLine+0x52>
		GSM_Response=2;
 8001900:	4b10      	ldr	r3, [pc, #64]	; (8001944 <GSM_ParseLine+0x88>)
 8001902:	2202      	movs	r2, #2
 8001904:	701a      	strb	r2, [r3, #0]
		GSM_ParseMode();
 8001906:	f7ff ff57 	bl	80017b8 <GSM_ParseMode>
		GSM_SelectNumber();
 800190a:	f7ff ffb7 	bl	800187c <GSM_SelectNumber>
	}

	if(strcmp(LocalParsePointer, "FIND") == 0){
 800190e:	490e      	ldr	r1, [pc, #56]	; (8001948 <GSM_ParseLine+0x8c>)
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7fe fc1d 	bl	8000150 <strcmp>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d104      	bne.n	8001926 <GSM_ParseLine+0x6a>
		GSM_Response=3;
 800191c:	4b09      	ldr	r3, [pc, #36]	; (8001944 <GSM_ParseLine+0x88>)
 800191e:	2203      	movs	r2, #3
 8001920:	701a      	strb	r2, [r3, #0]
		GSM_SelectNumber();
 8001922:	f7ff ffab 	bl	800187c <GSM_SelectNumber>
	}
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	08008a6c 	.word	0x08008a6c
 8001934:	200004b4 	.word	0x200004b4
 8001938:	08008a9c 	.word	0x08008a9c
 800193c:	08008aa4 	.word	0x08008aa4
 8001940:	08008aac 	.word	0x08008aac
 8001944:	20000235 	.word	0x20000235
 8001948:	08008ab4 	.word	0x08008ab4

0800194c <GSM_LocateMessage>:

void GSM_LocateMessage(){
 800194c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800194e:	b091      	sub	sp, #68	; 0x44
 8001950:	af0c      	add	r7, sp, #48	; 0x30
	size=sprintf(Message, "%02d.%02d.%4d %02d:%02d:%02d\nTu jestem:\n%6f%c\n%6f%c\r\x1A", GPS_Day, GPS_Month, GPS_Year+2000, GPS_Hour, GPS_Minute, GPS_Second,
 8001952:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <GSM_LocateMessage+0x88>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	469c      	mov	ip, r3
 8001958:	4b1f      	ldr	r3, [pc, #124]	; (80019d8 <GSM_LocateMessage+0x8c>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	469e      	mov	lr, r3
 800195e:	4b1f      	ldr	r3, [pc, #124]	; (80019dc <GSM_LocateMessage+0x90>)
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	f503 60fa 	add.w	r0, r3, #2000	; 0x7d0
 8001966:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <GSM_LocateMessage+0x94>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	461e      	mov	r6, r3
 800196c:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <GSM_LocateMessage+0x98>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <GSM_LocateMessage+0x9c>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <GSM_LocateMessage+0xa0>)
 800197a:	cb18      	ldmia	r3, {r3, r4}
 800197c:	4a1c      	ldr	r2, [pc, #112]	; (80019f0 <GSM_LocateMessage+0xa4>)
 800197e:	7812      	ldrb	r2, [r2, #0]
 8001980:	607a      	str	r2, [r7, #4]
 8001982:	4a1c      	ldr	r2, [pc, #112]	; (80019f4 <GSM_LocateMessage+0xa8>)
 8001984:	e9d2 1200 	ldrd	r1, r2, [r2]
 8001988:	4d1b      	ldr	r5, [pc, #108]	; (80019f8 <GSM_LocateMessage+0xac>)
 800198a:	782d      	ldrb	r5, [r5, #0]
 800198c:	950a      	str	r5, [sp, #40]	; 0x28
 800198e:	e9cd 1208 	strd	r1, r2, [sp, #32]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	9206      	str	r2, [sp, #24]
 8001996:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	9203      	str	r2, [sp, #12]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	9302      	str	r3, [sp, #8]
 80019a2:	9601      	str	r6, [sp, #4]
 80019a4:	9000      	str	r0, [sp, #0]
 80019a6:	4673      	mov	r3, lr
 80019a8:	4662      	mov	r2, ip
 80019aa:	4914      	ldr	r1, [pc, #80]	; (80019fc <GSM_LocateMessage+0xb0>)
 80019ac:	4814      	ldr	r0, [pc, #80]	; (8001a00 <GSM_LocateMessage+0xb4>)
 80019ae:	f004 f917 	bl	8005be0 <siprintf>
 80019b2:	4603      	mov	r3, r0
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <GSM_LocateMessage+0xb8>)
 80019b8:	801a      	strh	r2, [r3, #0]
					GPS_Latitude, GPS_LatitudeDirection, GPS_Longitude, GPS_LongitudeDirection);
	HAL_UART_Transmit_IT(GSM_huart, Message, size);
 80019ba:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <GSM_LocateMessage+0xbc>)
 80019bc:	6818      	ldr	r0, [r3, #0]
 80019be:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <GSM_LocateMessage+0xb8>)
 80019c0:	881b      	ldrh	r3, [r3, #0]
 80019c2:	461a      	mov	r2, r3
 80019c4:	490e      	ldr	r1, [pc, #56]	; (8001a00 <GSM_LocateMessage+0xb4>)
 80019c6:	f003 f897 	bl	8004af8 <HAL_UART_Transmit_IT>
}
 80019ca:	bf00      	nop
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000412 	.word	0x20000412
 80019d8:	20000400 	.word	0x20000400
 80019dc:	20000410 	.word	0x20000410
 80019e0:	20000424 	.word	0x20000424
 80019e4:	20000421 	.word	0x20000421
 80019e8:	2000022a 	.word	0x2000022a
 80019ec:	20000408 	.word	0x20000408
 80019f0:	200003f9 	.word	0x200003f9
 80019f4:	20000418 	.word	0x20000418
 80019f8:	2000022b 	.word	0x2000022b
 80019fc:	08008abc 	.word	0x08008abc
 8001a00:	20000344 	.word	0x20000344
 8001a04:	20000200 	.word	0x20000200
 8001a08:	200004ac 	.word	0x200004ac

08001a0c <GSM_Work>:

void GSM_Work(){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
	if(GSMBufferLines){
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <GSM_Work+0x18>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <GSM_Work+0x14>
		GSM_GetLineFromBuffer();
 8001a18:	f7ff fe14 	bl	8001644 <GSM_GetLineFromBuffer>
		GSM_ParseLine();
 8001a1c:	f7ff ff4e 	bl	80018bc <GSM_ParseLine>
	}
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000638 	.word	0x20000638

08001a28 <GSM_Init>:

void GSM_Init(UART_HandleTypeDef *huart2){
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
	GSM_huart=huart2;
 8001a30:	4a06      	ldr	r2, [pc, #24]	; (8001a4c <GSM_Init+0x24>)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(GSM_huart, (uint8_t*)&GSMReceivedChar, 1);
 8001a36:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <GSM_Init+0x24>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	4904      	ldr	r1, [pc, #16]	; (8001a50 <GSM_Init+0x28>)
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f003 f89e 	bl	8004b80 <HAL_UART_Receive_IT>
}
 8001a44:	bf00      	nop
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	200004ac 	.word	0x200004ac
 8001a50:	200004b1 	.word	0x200004b1

08001a54 <GSM_SendMessage>:

void GSM_SendMessage(char *text){
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	size=sprintf(Message, "%s\r\x1A",text);				//x1A means end of message for GSM module
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	490a      	ldr	r1, [pc, #40]	; (8001a88 <GSM_SendMessage+0x34>)
 8001a60:	480a      	ldr	r0, [pc, #40]	; (8001a8c <GSM_SendMessage+0x38>)
 8001a62:	f004 f8bd 	bl	8005be0 <siprintf>
 8001a66:	4603      	mov	r3, r0
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <GSM_SendMessage+0x3c>)
 8001a6c:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_IT(GSM_huart, Message, size);
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <GSM_SendMessage+0x40>)
 8001a70:	6818      	ldr	r0, [r3, #0]
 8001a72:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <GSM_SendMessage+0x3c>)
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	4904      	ldr	r1, [pc, #16]	; (8001a8c <GSM_SendMessage+0x38>)
 8001a7a:	f003 f83d 	bl	8004af8 <HAL_UART_Transmit_IT>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	08008af4 	.word	0x08008af4
 8001a8c:	20000344 	.word	0x20000344
 8001a90:	20000200 	.word	0x20000200
 8001a94:	200004ac 	.word	0x200004ac

08001a98 <LCD_Create>:
//LCD configuration
LCD_HandleTypeDef LCD_Create(
		LCD_PortType Port[], LCD_PinType Pin[],
		LCD_PortType RsPort, LCD_PinType RsPin,
		LCD_PortType EnPort, LCD_PinType EnPin)
{
 8001a98:	b5b0      	push	{r4, r5, r7, lr}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
 8001aa4:	603b      	str	r3, [r7, #0]
	LCD_HandleTypeDef LCD;


	LCD.EnPin = EnPin;
 8001aa6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001aaa:	84bb      	strh	r3, [r7, #36]	; 0x24
	LCD.EnPort = EnPort;
 8001aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aae:	623b      	str	r3, [r7, #32]

	LCD.RsPin = RsPin;
 8001ab0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001ab2:	83bb      	strh	r3, [r7, #28]
	LCD.RsPort = RsPort;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	61bb      	str	r3, [r7, #24]

	LCD.DataPin = Pin;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	617b      	str	r3, [r7, #20]
	LCD.DataPort = Port;
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	613b      	str	r3, [r7, #16]

	LCD_Init(&LCD);
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f000 f80e 	bl	8001ae6 <LCD_Init>

	return LCD;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	461d      	mov	r5, r3
 8001ace:	f107 0410 	add.w	r4, r7, #16
 8001ad2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ad4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ad6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ada:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	3728      	adds	r7, #40	; 0x28
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bdb0      	pop	{r4, r5, r7, pc}

08001ae6 <LCD_Init>:

void LCD_Init(LCD_HandleTypeDef * LCD){
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
	LCD_WriteCommand(LCD, 0x33);
 8001aee:	2133      	movs	r1, #51	; 0x33
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 f875 	bl	8001be0 <LCD_WriteCommand>
	LCD_WriteCommand(LCD, 0x32);
 8001af6:	2132      	movs	r1, #50	; 0x32
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f871 	bl	8001be0 <LCD_WriteCommand>
	LCD_WriteCommand(LCD, FUNCTION_SET | NUMBER_LINES);
 8001afe:	2128      	movs	r1, #40	; 0x28
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 f86d 	bl	8001be0 <LCD_WriteCommand>

	LCD_WriteCommand(LCD, CLEAR_DISPLAY);
 8001b06:	2101      	movs	r1, #1
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f869 	bl	8001be0 <LCD_WriteCommand>
	LCD_WriteCommand(LCD, DISPLAY_ON_OFF_CONTROL | DISPLAY_ON);
 8001b0e:	210c      	movs	r1, #12
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f865 	bl	8001be0 <LCD_WriteCommand>
	LCD_WriteCommand(LCD, ENTRY_MODE_SET | CURSOR_INC);
 8001b16:	2106      	movs	r1, #6
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 f861 	bl	8001be0 <LCD_WriteCommand>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <LCD_Int>:

void LCD_Int(LCD_HandleTypeDef * LCD, int Number){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
	char Buffer[11];
	sprintf(Buffer, "%02d", Number);
 8001b32:	f107 030c 	add.w	r3, r7, #12
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	4906      	ldr	r1, [pc, #24]	; (8001b54 <LCD_Int+0x2c>)
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f004 f850 	bl	8005be0 <siprintf>
	LCD_String(LCD, Buffer);
 8001b40:	f107 030c 	add.w	r3, r7, #12
 8001b44:	4619      	mov	r1, r3
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f806 	bl	8001b58 <LCD_String>
}
 8001b4c:	bf00      	nop
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	08008afc 	.word	0x08008afc

08001b58 <LCD_String>:

void LCD_String(LCD_HandleTypeDef * LCD, char * String){
 8001b58:	b590      	push	{r4, r7, lr}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(String); i++){
 8001b62:	2300      	movs	r3, #0
 8001b64:	73fb      	strb	r3, [r7, #15]
 8001b66:	e00a      	b.n	8001b7e <LCD_String+0x26>
		LCD_WriteData(LCD, String[i]);
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	4619      	mov	r1, r3
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f857 	bl	8001c26 <LCD_WriteData>
	for(uint8_t i = 0; i < strlen(String); i++){
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	73fb      	strb	r3, [r7, #15]
 8001b7e:	7bfc      	ldrb	r4, [r7, #15]
 8001b80:	6838      	ldr	r0, [r7, #0]
 8001b82:	f7fe faef 	bl	8000164 <strlen>
 8001b86:	4603      	mov	r3, r0
 8001b88:	429c      	cmp	r4, r3
 8001b8a:	d3ed      	bcc.n	8001b68 <LCD_String+0x10>
	}
}
 8001b8c:	bf00      	nop
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd90      	pop	{r4, r7, pc}

08001b94 <LCD_Cursor>:

void LCD_Cursor(LCD_HandleTypeDef * LCD, uint8_t Row, uint8_t Col){
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	70fb      	strb	r3, [r7, #3]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	70bb      	strb	r3, [r7, #2]
	LCD_WriteCommand(LCD, SET_DDRAM_ADDR + ROW_16[Row] + Col);
 8001ba4:	78fb      	ldrb	r3, [r7, #3]
 8001ba6:	4a07      	ldr	r2, [pc, #28]	; (8001bc4 <LCD_Cursor+0x30>)
 8001ba8:	5cd2      	ldrb	r2, [r2, r3]
 8001baa:	78bb      	ldrb	r3, [r7, #2]
 8001bac:	4413      	add	r3, r2
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	3b80      	subs	r3, #128	; 0x80
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f812 	bl	8001be0 <LCD_WriteCommand>
}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	08008c70 	.word	0x08008c70

08001bc8 <LCD_Clear>:

void LCD_Clear(LCD_HandleTypeDef * LCD){
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
	LCD_WriteCommand(LCD, CLEAR_DISPLAY);
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f804 	bl	8001be0 <LCD_WriteCommand>
}
 8001bd8:	bf00      	nop
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <LCD_WriteCommand>:

void LCD_WriteCommand(LCD_HandleTypeDef * LCD, uint8_t Command){
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	70fb      	strb	r3, [r7, #3]
		HAL_GPIO_WritePin(LCD->RsPort, LCD->RsPin, LCD_COMMAND_REG);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6898      	ldr	r0, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	899b      	ldrh	r3, [r3, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f001 fb1c 	bl	8003234 <HAL_GPIO_WritePin>
		LCD_Write(LCD, (Command >> 4), LCD_NIB);
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	091b      	lsrs	r3, r3, #4
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2204      	movs	r2, #4
 8001c04:	4619      	mov	r1, r3
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f830 	bl	8001c6c <LCD_Write>
		LCD_Write(LCD, Command & 0x0F, LCD_NIB);
 8001c0c:	78fb      	ldrb	r3, [r7, #3]
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2204      	movs	r2, #4
 8001c16:	4619      	mov	r1, r3
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 f827 	bl	8001c6c <LCD_Write>
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <LCD_WriteData>:

void LCD_WriteData(LCD_HandleTypeDef * LCD, uint8_t Data){
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	70fb      	strb	r3, [r7, #3]
		HAL_GPIO_WritePin(LCD->RsPort, LCD->RsPin, LCD_DATA_REG);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6898      	ldr	r0, [r3, #8]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	899b      	ldrh	r3, [r3, #12]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f001 faf9 	bl	8003234 <HAL_GPIO_WritePin>
		LCD_Write(LCD, Data >> 4, LCD_NIB);
 8001c42:	78fb      	ldrb	r3, [r7, #3]
 8001c44:	091b      	lsrs	r3, r3, #4
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2204      	movs	r2, #4
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f80d 	bl	8001c6c <LCD_Write>
		LCD_Write(LCD, Data & 0x0F, LCD_NIB);
 8001c52:	78fb      	ldrb	r3, [r7, #3]
 8001c54:	f003 030f 	and.w	r3, r3, #15
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f804 	bl	8001c6c <LCD_Write>
}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <LCD_Write>:

void LCD_Write(LCD_HandleTypeDef * LCD, uint8_t Data, uint8_t Length){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	70fb      	strb	r3, [r7, #3]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < Length; i++){
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	73fb      	strb	r3, [r7, #15]
 8001c80:	e019      	b.n	8001cb6 <LCD_Write+0x4a>
		HAL_GPIO_WritePin(LCD->DataPort[i], LCD->DataPin[i], (Data >> i) & 0x01);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4413      	add	r3, r2
 8001c98:	8819      	ldrh	r1, [r3, #0]
 8001c9a:	78fa      	ldrb	r2, [r7, #3]
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	fa42 f303 	asr.w	r3, r2, r3
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	461a      	mov	r2, r3
 8001cac:	f001 fac2 	bl	8003234 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < Length; i++){
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	73fb      	strb	r3, [r7, #15]
 8001cb6:	7bfa      	ldrb	r2, [r7, #15]
 8001cb8:	78bb      	ldrb	r3, [r7, #2]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d3e1      	bcc.n	8001c82 <LCD_Write+0x16>
	}

	HAL_GPIO_WritePin(LCD->EnPort, LCD->EnPin, 1);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6918      	ldr	r0, [r3, #16]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	8a9b      	ldrh	r3, [r3, #20]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f001 fab3 	bl	8003234 <HAL_GPIO_WritePin>
	DELAY(1);
 8001cce:	2001      	movs	r0, #1
 8001cd0:	f000 ffb0 	bl	8002c34 <HAL_Delay>
	HAL_GPIO_WritePin(LCD->EnPort, LCD->EnPin, 0);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6918      	ldr	r0, [r3, #16]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	8a9b      	ldrh	r3, [r3, #20]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	4619      	mov	r1, r3
 8001ce0:	f001 faa8 	bl	8003234 <HAL_GPIO_WritePin>
}
 8001ce4:	bf00      	nop
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	0000      	movs	r0, r0
	...

08001cf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cf0:	b5b0      	push	{r4, r5, r7, lr}
 8001cf2:	b098      	sub	sp, #96	; 0x60
 8001cf4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cf6:	f000 ff3b 	bl	8002b70 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint8_t timeToResponse=0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint8_t mode1Minutes=0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d06:	f000 fb7d 	bl	8002404 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  HAL_Delay(3000);							//wait for GSM module
 8001d0a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001d0e:	f000 ff91 	bl	8002c34 <HAL_Delay>
  MX_GPIO_Init();
 8001d12:	f000 fc73 	bl	80025fc <MX_GPIO_Init>
  MX_RTC_Init();
 8001d16:	f000 fbd3 	bl	80024c0 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8001d1a:	f000 fc45 	bl	80025a8 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  LCD_PortType Ports[] = {D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port};
 8001d1e:	4bc8      	ldr	r3, [pc, #800]	; (8002040 <main+0x350>)
 8001d20:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001d24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  LCD_PinType Pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
 8001d2a:	4ac6      	ldr	r2, [pc, #792]	; (8002044 <main+0x354>)
 8001d2c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d34:	e883 0003 	stmia.w	r3, {r0, r1}
  LCD_HandleTypeDef LCD;
  LCD = LCD_Create(Ports, Pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin);
 8001d38:	4638      	mov	r0, r7
 8001d3a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001d3e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001d42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d46:	9302      	str	r3, [sp, #8]
 8001d48:	4bbf      	ldr	r3, [pc, #764]	; (8002048 <main+0x358>)
 8001d4a:	9301      	str	r3, [sp, #4]
 8001d4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	4bbd      	ldr	r3, [pc, #756]	; (8002048 <main+0x358>)
 8001d54:	f7ff fea0 	bl	8001a98 <LCD_Create>
 8001d58:	f107 041c 	add.w	r4, r7, #28
 8001d5c:	463d      	mov	r5, r7
 8001d5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d62:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d66:	e884 0003 	stmia.w	r4, {r0, r1}

  LCD_Clear(&LCD);
 8001d6a:	f107 031c 	add.w	r3, r7, #28
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff ff2a 	bl	8001bc8 <LCD_Clear>

  GSM_Init(&huart2);
 8001d74:	48b5      	ldr	r0, [pc, #724]	; (800204c <main+0x35c>)
 8001d76:	f7ff fe57 	bl	8001a28 <GSM_Init>


  size=sprintf(message, "AT+CMGF=1\r");					//switch on text mode
 8001d7a:	4ab5      	ldr	r2, [pc, #724]	; (8002050 <main+0x360>)
 8001d7c:	4bb5      	ldr	r3, [pc, #724]	; (8002054 <main+0x364>)
 8001d7e:	cb03      	ldmia	r3!, {r0, r1}
 8001d80:	6010      	str	r0, [r2, #0]
 8001d82:	6051      	str	r1, [r2, #4]
 8001d84:	8819      	ldrh	r1, [r3, #0]
 8001d86:	789b      	ldrb	r3, [r3, #2]
 8001d88:	8111      	strh	r1, [r2, #8]
 8001d8a:	7293      	strb	r3, [r2, #10]
 8001d8c:	230a      	movs	r3, #10
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	4bb1      	ldr	r3, [pc, #708]	; (8002058 <main+0x368>)
 8001d92:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, message, size, 50);
 8001d94:	4bb0      	ldr	r3, [pc, #704]	; (8002058 <main+0x368>)
 8001d96:	881a      	ldrh	r2, [r3, #0]
 8001d98:	2332      	movs	r3, #50	; 0x32
 8001d9a:	49ad      	ldr	r1, [pc, #692]	; (8002050 <main+0x360>)
 8001d9c:	48ab      	ldr	r0, [pc, #684]	; (800204c <main+0x35c>)
 8001d9e:	f002 fe12 	bl	80049c6 <HAL_UART_Transmit>
  HAL_Delay(50);
 8001da2:	2032      	movs	r0, #50	; 0x32
 8001da4:	f000 ff46 	bl	8002c34 <HAL_Delay>
  size=sprintf(message, "AT+CMGD=1,4\r");				//delete all SMS
 8001da8:	4aa9      	ldr	r2, [pc, #676]	; (8002050 <main+0x360>)
 8001daa:	4bac      	ldr	r3, [pc, #688]	; (800205c <main+0x36c>)
 8001dac:	4614      	mov	r4, r2
 8001dae:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001db0:	6020      	str	r0, [r4, #0]
 8001db2:	6061      	str	r1, [r4, #4]
 8001db4:	60a2      	str	r2, [r4, #8]
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	7323      	strb	r3, [r4, #12]
 8001dba:	230c      	movs	r3, #12
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	4ba6      	ldr	r3, [pc, #664]	; (8002058 <main+0x368>)
 8001dc0:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, message, size, 50);
 8001dc2:	4ba5      	ldr	r3, [pc, #660]	; (8002058 <main+0x368>)
 8001dc4:	881a      	ldrh	r2, [r3, #0]
 8001dc6:	2332      	movs	r3, #50	; 0x32
 8001dc8:	49a1      	ldr	r1, [pc, #644]	; (8002050 <main+0x360>)
 8001dca:	48a0      	ldr	r0, [pc, #640]	; (800204c <main+0x35c>)
 8001dcc:	f002 fdfb 	bl	80049c6 <HAL_UART_Transmit>
  HAL_Delay(50);
 8001dd0:	2032      	movs	r0, #50	; 0x32
 8001dd2:	f000 ff2f 	bl	8002c34 <HAL_Delay>

  LCD_Clear(&LCD);
 8001dd6:	f107 031c 	add.w	r3, r7, #28
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff fef4 	bl	8001bc8 <LCD_Clear>
	  LCD_Cursor(&LCD,1,0);
	  LCD_String(&LCD, "  Brak  numeru  ");
  }
/*/

  LCD_Cursor(&LCD,0,0);
 8001de0:	f107 031c 	add.w	r3, r7, #28
 8001de4:	2200      	movs	r2, #0
 8001de6:	2100      	movs	r1, #0
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff fed3 	bl	8001b94 <LCD_Cursor>
  LCD_String(&LCD, "***loCARliser***");
 8001dee:	f107 031c 	add.w	r3, r7, #28
 8001df2:	499b      	ldr	r1, [pc, #620]	; (8002060 <main+0x370>)
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff feaf 	bl	8001b58 <LCD_String>
  LCD_Cursor(&LCD,1,0);
 8001dfa:	f107 031c 	add.w	r3, r7, #28
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2101      	movs	r1, #1
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fec6 	bl	8001b94 <LCD_Cursor>
  LCD_String(&LCD, "  Brak  numeru  ");
 8001e08:	f107 031c 	add.w	r3, r7, #28
 8001e0c:	4995      	ldr	r1, [pc, #596]	; (8002064 <main+0x374>)
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff fea2 	bl	8001b58 <LCD_String>
  HAL_Delay(20000);
 8001e14:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001e18:	f000 ff0c 	bl	8002c34 <HAL_Delay>
  MX_USART1_UART_Init();
 8001e1c:	f000 fb9a 	bl	8002554 <MX_USART1_UART_Init>
  GPS_Init(&huart1);
 8001e20:	4891      	ldr	r0, [pc, #580]	; (8002068 <main+0x378>)
 8001e22:	f7ff fb99 	bl	8001558 <GPS_Init>
  LCD_Clear(&LCD);
 8001e26:	f107 031c 	add.w	r3, r7, #28
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff fecc 	bl	8001bc8 <LCD_Clear>

  //**Sequence for welcome message**//
  GSM_Response=1;
 8001e30:	4b8e      	ldr	r3, [pc, #568]	; (800206c <main+0x37c>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	701a      	strb	r2, [r3, #0]
  GSM_SelectNumber();
 8001e36:	f7ff fd21 	bl	800187c <GSM_SelectNumber>
  utc=1;
 8001e3a:	4b8d      	ldr	r3, [pc, #564]	; (8002070 <main+0x380>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	701a      	strb	r2, [r3, #0]
  mode=10;
 8001e40:	4b8c      	ldr	r3, [pc, #560]	; (8002074 <main+0x384>)
 8001e42:	220a      	movs	r2, #10
 8001e44:	701a      	strb	r2, [r3, #0]
  interval=60;											//interval between messages in Mode 1
 8001e46:	4b8c      	ldr	r3, [pc, #560]	; (8002078 <main+0x388>)
 8001e48:	223c      	movs	r2, #60	; 0x3c
 8001e4a:	701a      	strb	r2, [r3, #0]
  timeSetFlag=0;
 8001e4c:	4b8b      	ldr	r3, [pc, #556]	; (800207c <main+0x38c>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	  HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BIN);
 8001e52:	2200      	movs	r2, #0
 8001e54:	498a      	ldr	r1, [pc, #552]	; (8002080 <main+0x390>)
 8001e56:	488b      	ldr	r0, [pc, #556]	; (8002084 <main+0x394>)
 8001e58:	f002 f8e4 	bl	8004024 <HAL_RTC_GetTime>
	  	  HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BIN);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	498a      	ldr	r1, [pc, #552]	; (8002088 <main+0x398>)
 8001e60:	4888      	ldr	r0, [pc, #544]	; (8002084 <main+0x394>)
 8001e62:	f002 fa6d 	bl	8004340 <HAL_RTC_GetDate>
	  	  GPS_Work();
 8001e66:	f7ff fb69 	bl	800153c <GPS_Work>
	  	  GSM_Work();
 8001e6a:	f7ff fdcf 	bl	8001a0c <GSM_Work>

	  	  if(cTime.Seconds != CompareSeconds){
 8001e6e:	4b84      	ldr	r3, [pc, #528]	; (8002080 <main+0x390>)
 8001e70:	789a      	ldrb	r2, [r3, #2]
 8001e72:	4b86      	ldr	r3, [pc, #536]	; (800208c <main+0x39c>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	f000 825f 	beq.w	800233a <main+0x64a>
	  		    //**LCD Display section**//
	  		    if(controlLCD<10){
 8001e7c:	4b84      	ldr	r3, [pc, #528]	; (8002090 <main+0x3a0>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b09      	cmp	r3, #9
 8001e82:	f200 8095 	bhi.w	8001fb0 <main+0x2c0>
	  		    	LCD_Cursor(&LCD, 0, 0);
 8001e86:	f107 031c 	add.w	r3, r7, #28
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff fe80 	bl	8001b94 <LCD_Cursor>
	  		    	LCD_Int(&LCD, (cTime.Hours));
 8001e94:	4b7a      	ldr	r3, [pc, #488]	; (8002080 <main+0x390>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	f107 031c 	add.w	r3, r7, #28
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff fe41 	bl	8001b28 <LCD_Int>
	  		    	LCD_Cursor(&LCD, 0, 2);
 8001ea6:	f107 031c 	add.w	r3, r7, #28
 8001eaa:	2202      	movs	r2, #2
 8001eac:	2100      	movs	r1, #0
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fe70 	bl	8001b94 <LCD_Cursor>
	  		    	LCD_String(&LCD, ":");
 8001eb4:	f107 031c 	add.w	r3, r7, #28
 8001eb8:	4976      	ldr	r1, [pc, #472]	; (8002094 <main+0x3a4>)
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fe4c 	bl	8001b58 <LCD_String>
	  		    	LCD_Cursor(&LCD, 0, 3);
 8001ec0:	f107 031c 	add.w	r3, r7, #28
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fe63 	bl	8001b94 <LCD_Cursor>
	  		    	LCD_Int(&LCD, cTime.Minutes);
 8001ece:	4b6c      	ldr	r3, [pc, #432]	; (8002080 <main+0x390>)
 8001ed0:	785b      	ldrb	r3, [r3, #1]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	f107 031c 	add.w	r3, r7, #28
 8001ed8:	4611      	mov	r1, r2
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff fe24 	bl	8001b28 <LCD_Int>
	  		    	LCD_Cursor(&LCD, 0, 5);
 8001ee0:	f107 031c 	add.w	r3, r7, #28
 8001ee4:	2205      	movs	r2, #5
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff fe53 	bl	8001b94 <LCD_Cursor>
	  		    	LCD_String(&LCD, ":");
 8001eee:	f107 031c 	add.w	r3, r7, #28
 8001ef2:	4968      	ldr	r1, [pc, #416]	; (8002094 <main+0x3a4>)
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fe2f 	bl	8001b58 <LCD_String>
	  		    	LCD_Cursor(&LCD, 0, 6);
 8001efa:	f107 031c 	add.w	r3, r7, #28
 8001efe:	2206      	movs	r2, #6
 8001f00:	2100      	movs	r1, #0
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fe46 	bl	8001b94 <LCD_Cursor>
	  		    	LCD_Int(&LCD, cTime.Seconds);
 8001f08:	4b5d      	ldr	r3, [pc, #372]	; (8002080 <main+0x390>)
 8001f0a:	789b      	ldrb	r3, [r3, #2]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	f107 031c 	add.w	r3, r7, #28
 8001f12:	4611      	mov	r1, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff fe07 	bl	8001b28 <LCD_Int>
	  		    	LCD_Cursor(&LCD, 1, 0);
 8001f1a:	f107 031c 	add.w	r3, r7, #28
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2101      	movs	r1, #1
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fe36 	bl	8001b94 <LCD_Cursor>
	  		    	LCD_Int(&LCD, cDate.Date);
 8001f28:	4b57      	ldr	r3, [pc, #348]	; (8002088 <main+0x398>)
 8001f2a:	789b      	ldrb	r3, [r3, #2]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	f107 031c 	add.w	r3, r7, #28
 8001f32:	4611      	mov	r1, r2
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fdf7 	bl	8001b28 <LCD_Int>
	  		    	LCD_Cursor(&LCD, 1, 2);
 8001f3a:	f107 031c 	add.w	r3, r7, #28
 8001f3e:	2202      	movs	r2, #2
 8001f40:	2101      	movs	r1, #1
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff fe26 	bl	8001b94 <LCD_Cursor>
	  		    	LCD_String(&LCD, ".");
 8001f48:	f107 031c 	add.w	r3, r7, #28
 8001f4c:	4952      	ldr	r1, [pc, #328]	; (8002098 <main+0x3a8>)
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff fe02 	bl	8001b58 <LCD_String>
	  		    	LCD_Cursor(&LCD, 1, 3);
 8001f54:	f107 031c 	add.w	r3, r7, #28
 8001f58:	2203      	movs	r2, #3
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff fe19 	bl	8001b94 <LCD_Cursor>
	  		    	LCD_Int(&LCD, cDate.Month);
 8001f62:	4b49      	ldr	r3, [pc, #292]	; (8002088 <main+0x398>)
 8001f64:	785b      	ldrb	r3, [r3, #1]
 8001f66:	461a      	mov	r2, r3
 8001f68:	f107 031c 	add.w	r3, r7, #28
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff fdda 	bl	8001b28 <LCD_Int>
	  		    	LCD_Cursor(&LCD, 1, 5);
 8001f74:	f107 031c 	add.w	r3, r7, #28
 8001f78:	2205      	movs	r2, #5
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff fe09 	bl	8001b94 <LCD_Cursor>
	  		    	LCD_String(&LCD, ".");
 8001f82:	f107 031c 	add.w	r3, r7, #28
 8001f86:	4944      	ldr	r1, [pc, #272]	; (8002098 <main+0x3a8>)
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fde5 	bl	8001b58 <LCD_String>
	  		    	LCD_Cursor(&LCD, 1, 6);
 8001f8e:	f107 031c 	add.w	r3, r7, #28
 8001f92:	2206      	movs	r2, #6
 8001f94:	2101      	movs	r1, #1
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff fdfc 	bl	8001b94 <LCD_Cursor>
	  		    	LCD_Int(&LCD, (cDate.Year+2000));
 8001f9c:	4b3a      	ldr	r3, [pc, #232]	; (8002088 <main+0x398>)
 8001f9e:	78db      	ldrb	r3, [r3, #3]
 8001fa0:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8001fa4:	f107 031c 	add.w	r3, r7, #28
 8001fa8:	4611      	mov	r1, r2
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fdbc 	bl	8001b28 <LCD_Int>
	  		    	}

	  		    if(controlLCD==10){
 8001fb0:	4b37      	ldr	r3, [pc, #220]	; (8002090 <main+0x3a0>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b0a      	cmp	r3, #10
 8001fb6:	d109      	bne.n	8001fcc <main+0x2dc>
	  		    	LCD_Clear(&LCD);
 8001fb8:	f107 031c 	add.w	r3, r7, #28
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff fe03 	bl	8001bc8 <LCD_Clear>
	  		    	GSM_Response=3;
 8001fc2:	4b2a      	ldr	r3, [pc, #168]	; (800206c <main+0x37c>)
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	701a      	strb	r2, [r3, #0]
	  		    			GSM_SelectNumber();
 8001fc8:	f7ff fc58 	bl	800187c <GSM_SelectNumber>
	  		    }

	  		    if(controlLCD>=10){
 8001fcc:	4b30      	ldr	r3, [pc, #192]	; (8002090 <main+0x3a0>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b09      	cmp	r3, #9
 8001fd2:	f240 808b 	bls.w	80020ec <main+0x3fc>
	  		    	if(GPS_Valid=='A'){
 8001fd6:	4b31      	ldr	r3, [pc, #196]	; (800209c <main+0x3ac>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b41      	cmp	r3, #65	; 0x41
 8001fdc:	d16c      	bne.n	80020b8 <main+0x3c8>
	  		    		LCD_Cursor(&LCD,0,0);
 8001fde:	f107 031c 	add.w	r3, r7, #28
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff fdd4 	bl	8001b94 <LCD_Cursor>
	  		    		sprintf(doubletoLCD, "%6f%c",GPS_Latitude, GPS_LatitudeDirection);
 8001fec:	4b2c      	ldr	r3, [pc, #176]	; (80020a0 <main+0x3b0>)
 8001fee:	cb18      	ldmia	r3, {r3, r4}
 8001ff0:	4a2c      	ldr	r2, [pc, #176]	; (80020a4 <main+0x3b4>)
 8001ff2:	7812      	ldrb	r2, [r2, #0]
 8001ff4:	9200      	str	r2, [sp, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	4623      	mov	r3, r4
 8001ffa:	492b      	ldr	r1, [pc, #172]	; (80020a8 <main+0x3b8>)
 8001ffc:	482b      	ldr	r0, [pc, #172]	; (80020ac <main+0x3bc>)
 8001ffe:	f003 fdef 	bl	8005be0 <siprintf>
	  		    		LCD_String(&LCD,doubletoLCD);
 8002002:	f107 031c 	add.w	r3, r7, #28
 8002006:	4929      	ldr	r1, [pc, #164]	; (80020ac <main+0x3bc>)
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff fda5 	bl	8001b58 <LCD_String>
	  		    		LCD_Cursor(&LCD,1,0);
 800200e:	f107 031c 	add.w	r3, r7, #28
 8002012:	2200      	movs	r2, #0
 8002014:	2101      	movs	r1, #1
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff fdbc 	bl	8001b94 <LCD_Cursor>
	  		    		sprintf(doubletoLCD, "%6f%c",GPS_Longitude,GPS_LongitudeDirection);
 800201c:	4b24      	ldr	r3, [pc, #144]	; (80020b0 <main+0x3c0>)
 800201e:	cb18      	ldmia	r3, {r3, r4}
 8002020:	4a24      	ldr	r2, [pc, #144]	; (80020b4 <main+0x3c4>)
 8002022:	7812      	ldrb	r2, [r2, #0]
 8002024:	9200      	str	r2, [sp, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	4623      	mov	r3, r4
 800202a:	491f      	ldr	r1, [pc, #124]	; (80020a8 <main+0x3b8>)
 800202c:	481f      	ldr	r0, [pc, #124]	; (80020ac <main+0x3bc>)
 800202e:	f003 fdd7 	bl	8005be0 <siprintf>
	  		    		LCD_String(&LCD,doubletoLCD);
 8002032:	f107 031c 	add.w	r3, r7, #28
 8002036:	491d      	ldr	r1, [pc, #116]	; (80020ac <main+0x3bc>)
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff fd8d 	bl	8001b58 <LCD_String>
 800203e:	e055      	b.n	80020ec <main+0x3fc>
 8002040:	08008c30 	.word	0x08008c30
 8002044:	08008c40 	.word	0x08008c40
 8002048:	40010c00 	.word	0x40010c00
 800204c:	20000758 	.word	0x20000758
 8002050:	20000640 	.word	0x20000640
 8002054:	08008b04 	.word	0x08008b04
 8002058:	20000200 	.word	0x20000200
 800205c:	08008b10 	.word	0x08008b10
 8002060:	08008b20 	.word	0x08008b20
 8002064:	08008b34 	.word	0x08008b34
 8002068:	200006f8 	.word	0x200006f8
 800206c:	20000235 	.word	0x20000235
 8002070:	20000228 	.word	0x20000228
 8002074:	200003fa 	.word	0x200003fa
 8002078:	20000420 	.word	0x20000420
 800207c:	200003f8 	.word	0x200003f8
 8002080:	2000063c 	.word	0x2000063c
 8002084:	20000738 	.word	0x20000738
 8002088:	200006f4 	.word	0x200006f4
 800208c:	20000202 	.word	0x20000202
 8002090:	20000422 	.word	0x20000422
 8002094:	08008b48 	.word	0x08008b48
 8002098:	08008b4c 	.word	0x08008b4c
 800209c:	20000413 	.word	0x20000413
 80020a0:	20000408 	.word	0x20000408
 80020a4:	200003f9 	.word	0x200003f9
 80020a8:	08008b50 	.word	0x08008b50
 80020ac:	2000074c 	.word	0x2000074c
 80020b0:	20000418 	.word	0x20000418
 80020b4:	2000022b 	.word	0x2000022b
	  		    	}else{
	  		    		LCD_Cursor(&LCD, 0,0);
 80020b8:	f107 031c 	add.w	r3, r7, #28
 80020bc:	2200      	movs	r2, #0
 80020be:	2100      	movs	r1, #0
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fd67 	bl	8001b94 <LCD_Cursor>
	  		    		LCD_String(&LCD,"Brak sygnalu GPS");
 80020c6:	f107 031c 	add.w	r3, r7, #28
 80020ca:	49b7      	ldr	r1, [pc, #732]	; (80023a8 <main+0x6b8>)
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fd43 	bl	8001b58 <LCD_String>
	  		    		LCD_Cursor(&LCD, 1,0);
 80020d2:	f107 031c 	add.w	r3, r7, #28
 80020d6:	2200      	movs	r2, #0
 80020d8:	2101      	movs	r1, #1
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fd5a 	bl	8001b94 <LCD_Cursor>
	  		    		LCD_String(&LCD,"****************");
 80020e0:	f107 031c 	add.w	r3, r7, #28
 80020e4:	49b1      	ldr	r1, [pc, #708]	; (80023ac <main+0x6bc>)
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fd36 	bl	8001b58 <LCD_String>
	  		    	}
	  		    }

	  		    if(controlLCD==20){
 80020ec:	4bb0      	ldr	r3, [pc, #704]	; (80023b0 <main+0x6c0>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b14      	cmp	r3, #20
 80020f2:	d107      	bne.n	8002104 <main+0x414>
	  		    	LCD_Clear(&LCD);
 80020f4:	f107 031c 	add.w	r3, r7, #28
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff fd65 	bl	8001bc8 <LCD_Clear>
	  		    	controlLCD=1;
 80020fe:	4bac      	ldr	r3, [pc, #688]	; (80023b0 <main+0x6c0>)
 8002100:	2201      	movs	r2, #1
 8002102:	701a      	strb	r2, [r3, #0]
	  		    }

	  		  //**Mode 1 section**//
	  		  if(mode==1){
 8002104:	4bab      	ldr	r3, [pc, #684]	; (80023b4 <main+0x6c4>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d11c      	bne.n	8002146 <main+0x456>
	  			 if(compareMinutes!=cTime.Minutes){
 800210c:	4baa      	ldr	r3, [pc, #680]	; (80023b8 <main+0x6c8>)
 800210e:	785a      	ldrb	r2, [r3, #1]
 8002110:	4baa      	ldr	r3, [pc, #680]	; (80023bc <main+0x6cc>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d008      	beq.n	800212a <main+0x43a>
	  				 mode1Minutes++;
 8002118:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800211c:	3301      	adds	r3, #1
 800211e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	  				 compareMinutes=cTime.Minutes;
 8002122:	4ba5      	ldr	r3, [pc, #660]	; (80023b8 <main+0x6c8>)
 8002124:	785a      	ldrb	r2, [r3, #1]
 8002126:	4ba5      	ldr	r3, [pc, #660]	; (80023bc <main+0x6cc>)
 8002128:	701a      	strb	r2, [r3, #0]
	  			 }
	  			if(mode1Minutes==interval){
 800212a:	4ba5      	ldr	r3, [pc, #660]	; (80023c0 <main+0x6d0>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8002132:	429a      	cmp	r2, r3
 8002134:	d107      	bne.n	8002146 <main+0x456>
	  				mode1Minutes=0;
 8002136:	2300      	movs	r3, #0
 8002138:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	  				GSM_SelectNumber();
 800213c:	f7ff fb9e 	bl	800187c <GSM_SelectNumber>
	  				GSM_Response=3;
 8002140:	4ba0      	ldr	r3, [pc, #640]	; (80023c4 <main+0x6d4>)
 8002142:	2203      	movs	r2, #3
 8002144:	701a      	strb	r2, [r3, #0]
	  			}
	  		  }

	  		  //**Mode 2 section**//
	  		  if((mode==2)&&(protect==1)){
 8002146:	4b9b      	ldr	r3, [pc, #620]	; (80023b4 <main+0x6c4>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b02      	cmp	r3, #2
 800214c:	d144      	bne.n	80021d8 <main+0x4e8>
 800214e:	4b9e      	ldr	r3, [pc, #632]	; (80023c8 <main+0x6d8>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d140      	bne.n	80021d8 <main+0x4e8>
	  			  if((abs(GPS_Latitude-compareLatitude)>0.001)||(abs(GPS_Longitude-compareLongitude)>0.001)){
 8002156:	4b9d      	ldr	r3, [pc, #628]	; (80023cc <main+0x6dc>)
 8002158:	e9d3 0100 	ldrd	r0, r1, [r3]
 800215c:	4b9c      	ldr	r3, [pc, #624]	; (80023d0 <main+0x6e0>)
 800215e:	cb18      	ldmia	r3, {r3, r4}
 8002160:	461a      	mov	r2, r3
 8002162:	4623      	mov	r3, r4
 8002164:	f7fe f80a 	bl	800017c <__aeabi_dsub>
 8002168:	4603      	mov	r3, r0
 800216a:	460c      	mov	r4, r1
 800216c:	4618      	mov	r0, r3
 800216e:	4621      	mov	r1, r4
 8002170:	f7fe fc6c 	bl	8000a4c <__aeabi_d2iz>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	bfb8      	it	lt
 800217a:	425b      	neglt	r3, r3
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe f94b 	bl	8000418 <__aeabi_i2d>
 8002182:	a387      	add	r3, pc, #540	; (adr r3, 80023a0 <main+0x6b0>)
 8002184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002188:	f7fe fc40 	bl	8000a0c <__aeabi_dcmpgt>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d11d      	bne.n	80021ce <main+0x4de>
 8002192:	4b90      	ldr	r3, [pc, #576]	; (80023d4 <main+0x6e4>)
 8002194:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002198:	4b8f      	ldr	r3, [pc, #572]	; (80023d8 <main+0x6e8>)
 800219a:	cb18      	ldmia	r3, {r3, r4}
 800219c:	461a      	mov	r2, r3
 800219e:	4623      	mov	r3, r4
 80021a0:	f7fd ffec 	bl	800017c <__aeabi_dsub>
 80021a4:	4603      	mov	r3, r0
 80021a6:	460c      	mov	r4, r1
 80021a8:	4618      	mov	r0, r3
 80021aa:	4621      	mov	r1, r4
 80021ac:	f7fe fc4e 	bl	8000a4c <__aeabi_d2iz>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	bfb8      	it	lt
 80021b6:	425b      	neglt	r3, r3
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe f92d 	bl	8000418 <__aeabi_i2d>
 80021be:	a378      	add	r3, pc, #480	; (adr r3, 80023a0 <main+0x6b0>)
 80021c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c4:	f7fe fc22 	bl	8000a0c <__aeabi_dcmpgt>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d004      	beq.n	80021d8 <main+0x4e8>
	  				  GSM_SelectNumber();
 80021ce:	f7ff fb55 	bl	800187c <GSM_SelectNumber>
	  				  GSM_Response=4;
 80021d2:	4b7c      	ldr	r3, [pc, #496]	; (80023c4 <main+0x6d4>)
 80021d4:	2204      	movs	r2, #4
 80021d6:	701a      	strb	r2, [r3, #0]
	  			  }
	  		  }

	  		 //**SMS sending section**//
	  		  switch(GSM_Response){
 80021d8:	4b7a      	ldr	r3, [pc, #488]	; (80023c4 <main+0x6d4>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	3b01      	subs	r3, #1
 80021de:	2b03      	cmp	r3, #3
 80021e0:	f200 80a1 	bhi.w	8002326 <main+0x636>
 80021e4:	a201      	add	r2, pc, #4	; (adr r2, 80021ec <main+0x4fc>)
 80021e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ea:	bf00      	nop
 80021ec:	080021fd 	.word	0x080021fd
 80021f0:	08002225 	.word	0x08002225
 80021f4:	080022bd 	.word	0x080022bd
 80021f8:	080022fd 	.word	0x080022fd
	  		  case 1:
	  		  		  timeToResponse++;
 80021fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002200:	3301      	adds	r3, #1
 8002202:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  		  		  if(timeToResponse==2){
 8002206:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800220a:	2b02      	cmp	r3, #2
 800220c:	f040 8084 	bne.w	8002318 <main+0x628>
	  		  			GSM_SendMessage("Witaj!\nWybierz tryb:\nMODE 0 - Tryb czuwania\nMODE 1 - Tryb podstawowy\nMODE 2- Tryb ochrony");
 8002210:	4872      	ldr	r0, [pc, #456]	; (80023dc <main+0x6ec>)
 8002212:	f7ff fc1f 	bl	8001a54 <GSM_SendMessage>
	  		  			GSM_Response=0;
 8002216:	4b6b      	ldr	r3, [pc, #428]	; (80023c4 <main+0x6d4>)
 8002218:	2200      	movs	r2, #0
 800221a:	701a      	strb	r2, [r3, #0]
	  		  			timeToResponse=0;
 800221c:	2300      	movs	r3, #0
 800221e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  		  		  }
	  		  		  break;
 8002222:	e079      	b.n	8002318 <main+0x628>

	  		  case 2:
	  		  		  timeToResponse++;
 8002224:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002228:	3301      	adds	r3, #1
 800222a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  		  		  if((timeToResponse==2)&&mode==0){
 800222e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002232:	2b02      	cmp	r3, #2
 8002234:	d10f      	bne.n	8002256 <main+0x566>
 8002236:	4b5f      	ldr	r3, [pc, #380]	; (80023b4 <main+0x6c4>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10b      	bne.n	8002256 <main+0x566>
	  		  			  GSM_SendMessage("Wybrano tryb czuwania");
 800223e:	4868      	ldr	r0, [pc, #416]	; (80023e0 <main+0x6f0>)
 8002240:	f7ff fc08 	bl	8001a54 <GSM_SendMessage>
	  		  			  protect=0;
 8002244:	4b60      	ldr	r3, [pc, #384]	; (80023c8 <main+0x6d8>)
 8002246:	2200      	movs	r2, #0
 8002248:	701a      	strb	r2, [r3, #0]
	  		  			  GSM_Response=0;
 800224a:	4b5e      	ldr	r3, [pc, #376]	; (80023c4 <main+0x6d4>)
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
	  		  			  timeToResponse=0;
 8002250:	2300      	movs	r3, #0
 8002252:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  		  		  }
	  		  		  if((timeToResponse==2)&&mode==1){
 8002256:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800225a:	2b02      	cmp	r3, #2
 800225c:	d10f      	bne.n	800227e <main+0x58e>
 800225e:	4b55      	ldr	r3, [pc, #340]	; (80023b4 <main+0x6c4>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d10b      	bne.n	800227e <main+0x58e>
	  		  			  GSM_SendMessage("Wybrano tryb podstawowy");
 8002266:	485f      	ldr	r0, [pc, #380]	; (80023e4 <main+0x6f4>)
 8002268:	f7ff fbf4 	bl	8001a54 <GSM_SendMessage>
	  		  			  protect=0;
 800226c:	4b56      	ldr	r3, [pc, #344]	; (80023c8 <main+0x6d8>)
 800226e:	2200      	movs	r2, #0
 8002270:	701a      	strb	r2, [r3, #0]
	  		  			  GSM_Response=0;
 8002272:	4b54      	ldr	r3, [pc, #336]	; (80023c4 <main+0x6d4>)
 8002274:	2200      	movs	r2, #0
 8002276:	701a      	strb	r2, [r3, #0]
	  		  			  timeToResponse=0;
 8002278:	2300      	movs	r3, #0
 800227a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  		  		  }
	  		  		  if((timeToResponse==2)&&mode==2){
 800227e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002282:	2b02      	cmp	r3, #2
 8002284:	d14a      	bne.n	800231c <main+0x62c>
 8002286:	4b4b      	ldr	r3, [pc, #300]	; (80023b4 <main+0x6c4>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d146      	bne.n	800231c <main+0x62c>
	  		  			  GSM_SendMessage("Wybrano tryb ochrony");
 800228e:	4856      	ldr	r0, [pc, #344]	; (80023e8 <main+0x6f8>)
 8002290:	f7ff fbe0 	bl	8001a54 <GSM_SendMessage>
	  		  			  protect=1;
 8002294:	4b4c      	ldr	r3, [pc, #304]	; (80023c8 <main+0x6d8>)
 8002296:	2201      	movs	r2, #1
 8002298:	701a      	strb	r2, [r3, #0]
	  		  			  GSM_Response=0;
 800229a:	4b4a      	ldr	r3, [pc, #296]	; (80023c4 <main+0x6d4>)
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
	  		  			  timeToResponse=0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  		  			  compareLatitude=GPS_Latitude;
 80022a6:	4b49      	ldr	r3, [pc, #292]	; (80023cc <main+0x6dc>)
 80022a8:	cb18      	ldmia	r3, {r3, r4}
 80022aa:	4a49      	ldr	r2, [pc, #292]	; (80023d0 <main+0x6e0>)
 80022ac:	e9c2 3400 	strd	r3, r4, [r2]
	  		  			  compareLongitude=GPS_Longitude;
 80022b0:	4b48      	ldr	r3, [pc, #288]	; (80023d4 <main+0x6e4>)
 80022b2:	cb18      	ldmia	r3, {r3, r4}
 80022b4:	4a48      	ldr	r2, [pc, #288]	; (80023d8 <main+0x6e8>)
 80022b6:	e9c2 3400 	strd	r3, r4, [r2]
	  		  		  }
	  		  		  break;
 80022ba:	e02f      	b.n	800231c <main+0x62c>

	  		  case 3:
	  		  		  timeToResponse++;
 80022bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80022c0:	3301      	adds	r3, #1
 80022c2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  		  		  if(timeToResponse==2){
 80022c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d128      	bne.n	8002320 <main+0x630>
	  		  			  if(GPS_Valid=='A'){
 80022ce:	4b47      	ldr	r3, [pc, #284]	; (80023ec <main+0x6fc>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b41      	cmp	r3, #65	; 0x41
 80022d4:	d108      	bne.n	80022e8 <main+0x5f8>
	  		  				GSM_LocateMessage();
 80022d6:	f7ff fb39 	bl	800194c <GSM_LocateMessage>
	  		  				GSM_Response=0;
 80022da:	4b3a      	ldr	r3, [pc, #232]	; (80023c4 <main+0x6d4>)
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]
	  		  				timeToResponse=0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  		  				GSM_SendMessage("Brak sygnalu GPS");
	  		  				GSM_Response=0;
	  		  				timeToResponse=0;
	  		  			  }
	  		  		  }
	  			  	  break;
 80022e6:	e01b      	b.n	8002320 <main+0x630>
	  		  				GSM_SendMessage("Brak sygnalu GPS");
 80022e8:	482f      	ldr	r0, [pc, #188]	; (80023a8 <main+0x6b8>)
 80022ea:	f7ff fbb3 	bl	8001a54 <GSM_SendMessage>
	  		  				GSM_Response=0;
 80022ee:	4b35      	ldr	r3, [pc, #212]	; (80023c4 <main+0x6d4>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	701a      	strb	r2, [r3, #0]
	  		  				timeToResponse=0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  			  	  break;
 80022fa:	e011      	b.n	8002320 <main+0x630>

	  		  case 4:
	  			  	  if(timeToResponse==2){
 80022fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002300:	2b02      	cmp	r3, #2
 8002302:	d10f      	bne.n	8002324 <main+0x634>
	  			  		  GSM_SendMessage("KRADZIEZ!");
 8002304:	483a      	ldr	r0, [pc, #232]	; (80023f0 <main+0x700>)
 8002306:	f7ff fba5 	bl	8001a54 <GSM_SendMessage>
	  			  		  GSM_Response=0;
 800230a:	4b2e      	ldr	r3, [pc, #184]	; (80023c4 <main+0x6d4>)
 800230c:	2200      	movs	r2, #0
 800230e:	701a      	strb	r2, [r3, #0]
	  			  		  timeToResponse=0;
 8002310:	2300      	movs	r3, #0
 8002312:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  			  	  }
	  			  	  break;
 8002316:	e005      	b.n	8002324 <main+0x634>
	  		  		  break;
 8002318:	bf00      	nop
 800231a:	e004      	b.n	8002326 <main+0x636>
	  		  		  break;
 800231c:	bf00      	nop
 800231e:	e002      	b.n	8002326 <main+0x636>
	  			  	  break;
 8002320:	bf00      	nop
 8002322:	e000      	b.n	8002326 <main+0x636>
	  			  	  break;
 8002324:	bf00      	nop
	  		  }

	  		 controlLCD++;
 8002326:	4b22      	ldr	r3, [pc, #136]	; (80023b0 <main+0x6c0>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	3301      	adds	r3, #1
 800232c:	b2da      	uxtb	r2, r3
 800232e:	4b20      	ldr	r3, [pc, #128]	; (80023b0 <main+0x6c0>)
 8002330:	701a      	strb	r2, [r3, #0]
	  		CompareSeconds=cTime.Seconds;
 8002332:	4b21      	ldr	r3, [pc, #132]	; (80023b8 <main+0x6c8>)
 8002334:	789a      	ldrb	r2, [r3, #2]
 8002336:	4b2f      	ldr	r3, [pc, #188]	; (80023f4 <main+0x704>)
 8002338:	701a      	strb	r2, [r3, #0]
	  	  }

	  	  //**Time synchronization**//
	  	  if((cTime.Hours==1)&&(cTime.Minutes==0)&&(cTime.Seconds==0)){
 800233a:	4b1f      	ldr	r3, [pc, #124]	; (80023b8 <main+0x6c8>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d10a      	bne.n	8002358 <main+0x668>
 8002342:	4b1d      	ldr	r3, [pc, #116]	; (80023b8 <main+0x6c8>)
 8002344:	785b      	ldrb	r3, [r3, #1]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d106      	bne.n	8002358 <main+0x668>
 800234a:	4b1b      	ldr	r3, [pc, #108]	; (80023b8 <main+0x6c8>)
 800234c:	789b      	ldrb	r3, [r3, #2]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d102      	bne.n	8002358 <main+0x668>
	  		  timeSetFlag=0;
 8002352:	4b29      	ldr	r3, [pc, #164]	; (80023f8 <main+0x708>)
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]
	  	  }

	  	  //**Setting time with UTC correction**//
	  	  if(GPS_Valid=='A'&&timeSetFlag==0){
 8002358:	4b24      	ldr	r3, [pc, #144]	; (80023ec <main+0x6fc>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b41      	cmp	r3, #65	; 0x41
 800235e:	f47f ad78 	bne.w	8001e52 <main+0x162>
 8002362:	4b25      	ldr	r3, [pc, #148]	; (80023f8 <main+0x708>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	f47f ad73 	bne.w	8001e52 <main+0x162>
	  		  if(GPS_Hour>23){
 800236c:	4b23      	ldr	r3, [pc, #140]	; (80023fc <main+0x70c>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b17      	cmp	r3, #23
 8002372:	d90b      	bls.n	800238c <main+0x69c>
	  			  GPS_Hour=GPS_Hour-24;
 8002374:	4b21      	ldr	r3, [pc, #132]	; (80023fc <main+0x70c>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	3b18      	subs	r3, #24
 800237a:	b2da      	uxtb	r2, r3
 800237c:	4b1f      	ldr	r3, [pc, #124]	; (80023fc <main+0x70c>)
 800237e:	701a      	strb	r2, [r3, #0]
	  			  GPS_Day++;
 8002380:	4b1f      	ldr	r3, [pc, #124]	; (8002400 <main+0x710>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	b2da      	uxtb	r2, r3
 8002388:	4b1d      	ldr	r3, [pc, #116]	; (8002400 <main+0x710>)
 800238a:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  set_time();
 800238c:	f000 f9dc 	bl	8002748 <set_time>
	  		  set_date();
 8002390:	f000 f9fe 	bl	8002790 <set_date>
	  		  timeSetFlag=1;
 8002394:	4b18      	ldr	r3, [pc, #96]	; (80023f8 <main+0x708>)
 8002396:	2201      	movs	r2, #1
 8002398:	701a      	strb	r2, [r3, #0]
	  	  HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BIN);
 800239a:	e55a      	b.n	8001e52 <main+0x162>
 800239c:	f3af 8000 	nop.w
 80023a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80023a4:	3f50624d 	.word	0x3f50624d
 80023a8:	08008b58 	.word	0x08008b58
 80023ac:	08008b6c 	.word	0x08008b6c
 80023b0:	20000422 	.word	0x20000422
 80023b4:	200003fa 	.word	0x200003fa
 80023b8:	2000063c 	.word	0x2000063c
 80023bc:	20000414 	.word	0x20000414
 80023c0:	20000420 	.word	0x20000420
 80023c4:	20000235 	.word	0x20000235
 80023c8:	20000203 	.word	0x20000203
 80023cc:	20000408 	.word	0x20000408
 80023d0:	20000208 	.word	0x20000208
 80023d4:	20000418 	.word	0x20000418
 80023d8:	20000210 	.word	0x20000210
 80023dc:	08008b80 	.word	0x08008b80
 80023e0:	08008bdc 	.word	0x08008bdc
 80023e4:	08008bf4 	.word	0x08008bf4
 80023e8:	08008c0c 	.word	0x08008c0c
 80023ec:	20000413 	.word	0x20000413
 80023f0:	08008c24 	.word	0x08008c24
 80023f4:	20000202 	.word	0x20000202
 80023f8:	200003f8 	.word	0x200003f8
 80023fc:	20000424 	.word	0x20000424
 8002400:	20000412 	.word	0x20000412

08002404 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b094      	sub	sp, #80	; 0x50
 8002408:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800240a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800240e:	2228      	movs	r2, #40	; 0x28
 8002410:	2100      	movs	r1, #0
 8002412:	4618      	mov	r0, r3
 8002414:	f002 ff8c 	bl	8005330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002418:	f107 0314 	add.w	r3, r7, #20
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	609a      	str	r2, [r3, #8]
 8002424:	60da      	str	r2, [r3, #12]
 8002426:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002428:	1d3b      	adds	r3, r7, #4
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	605a      	str	r2, [r3, #4]
 8002430:	609a      	str	r2, [r3, #8]
 8002432:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002434:	2305      	movs	r3, #5
 8002436:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800243c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800243e:	2300      	movs	r3, #0
 8002440:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002442:	2301      	movs	r3, #1
 8002444:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002446:	2301      	movs	r3, #1
 8002448:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800244a:	2302      	movs	r3, #2
 800244c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800244e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002452:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002454:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002458:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800245a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800245e:	4618      	mov	r0, r3
 8002460:	f000 ff24 	bl	80032ac <HAL_RCC_OscConfig>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800246a:	f000 f9b5 	bl	80027d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800246e:	230f      	movs	r3, #15
 8002470:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002472:	2302      	movs	r3, #2
 8002474:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002476:	2300      	movs	r3, #0
 8002478:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800247a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800247e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002480:	2300      	movs	r3, #0
 8002482:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002484:	f107 0314 	add.w	r3, r7, #20
 8002488:	2102      	movs	r1, #2
 800248a:	4618      	mov	r0, r3
 800248c:	f001 f98e 	bl	80037ac <HAL_RCC_ClockConfig>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002496:	f000 f99f 	bl	80027d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800249a:	2301      	movs	r3, #1
 800249c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800249e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024a2:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024a4:	1d3b      	adds	r3, r7, #4
 80024a6:	4618      	mov	r0, r3
 80024a8:	f001 fb1c 	bl	8003ae4 <HAL_RCCEx_PeriphCLKConfig>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80024b2:	f000 f991 	bl	80027d8 <Error_Handler>
  }
}
 80024b6:	bf00      	nop
 80024b8:	3750      	adds	r7, #80	; 0x50
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
	...

080024c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80024c6:	1d3b      	adds	r3, r7, #4
 80024c8:	2100      	movs	r1, #0
 80024ca:	460a      	mov	r2, r1
 80024cc:	801a      	strh	r2, [r3, #0]
 80024ce:	460a      	mov	r2, r1
 80024d0:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80024d2:	2300      	movs	r3, #0
 80024d4:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80024d6:	4b1d      	ldr	r3, [pc, #116]	; (800254c <MX_RTC_Init+0x8c>)
 80024d8:	4a1d      	ldr	r2, [pc, #116]	; (8002550 <MX_RTC_Init+0x90>)
 80024da:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80024dc:	4b1b      	ldr	r3, [pc, #108]	; (800254c <MX_RTC_Init+0x8c>)
 80024de:	f04f 32ff 	mov.w	r2, #4294967295
 80024e2:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80024e4:	4b19      	ldr	r3, [pc, #100]	; (800254c <MX_RTC_Init+0x8c>)
 80024e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024ea:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80024ec:	4817      	ldr	r0, [pc, #92]	; (800254c <MX_RTC_Init+0x8c>)
 80024ee:	f001 fc6b 	bl	8003dc8 <HAL_RTC_Init>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80024f8:	f000 f96e 	bl	80027d8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80024fc:	2300      	movs	r3, #0
 80024fe:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 1;
 8002504:	2301      	movs	r3, #1
 8002506:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002508:	1d3b      	adds	r3, r7, #4
 800250a:	2200      	movs	r2, #0
 800250c:	4619      	mov	r1, r3
 800250e:	480f      	ldr	r0, [pc, #60]	; (800254c <MX_RTC_Init+0x8c>)
 8002510:	f001 fcf0 	bl	8003ef4 <HAL_RTC_SetTime>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 800251a:	f000 f95d 	bl	80027d8 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800251e:	2301      	movs	r3, #1
 8002520:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002522:	2301      	movs	r3, #1
 8002524:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 1;
 8002526:	2301      	movs	r3, #1
 8002528:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 800252e:	463b      	mov	r3, r7
 8002530:	2200      	movs	r2, #0
 8002532:	4619      	mov	r1, r3
 8002534:	4805      	ldr	r0, [pc, #20]	; (800254c <MX_RTC_Init+0x8c>)
 8002536:	f001 fe4d 	bl	80041d4 <HAL_RTC_SetDate>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8002540:	f000 f94a 	bl	80027d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002544:	bf00      	nop
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20000738 	.word	0x20000738
 8002550:	40002800 	.word	0x40002800

08002554 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002558:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <MX_USART1_UART_Init+0x4c>)
 800255a:	4a12      	ldr	r2, [pc, #72]	; (80025a4 <MX_USART1_UART_Init+0x50>)
 800255c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800255e:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <MX_USART1_UART_Init+0x4c>)
 8002560:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002564:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002566:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <MX_USART1_UART_Init+0x4c>)
 8002568:	2200      	movs	r2, #0
 800256a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800256c:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <MX_USART1_UART_Init+0x4c>)
 800256e:	2200      	movs	r2, #0
 8002570:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002572:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <MX_USART1_UART_Init+0x4c>)
 8002574:	2200      	movs	r2, #0
 8002576:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002578:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <MX_USART1_UART_Init+0x4c>)
 800257a:	220c      	movs	r2, #12
 800257c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800257e:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <MX_USART1_UART_Init+0x4c>)
 8002580:	2200      	movs	r2, #0
 8002582:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002584:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <MX_USART1_UART_Init+0x4c>)
 8002586:	2200      	movs	r2, #0
 8002588:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800258a:	4805      	ldr	r0, [pc, #20]	; (80025a0 <MX_USART1_UART_Init+0x4c>)
 800258c:	f002 f9ce 	bl	800492c <HAL_UART_Init>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002596:	f000 f91f 	bl	80027d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	200006f8 	.word	0x200006f8
 80025a4:	40013800 	.word	0x40013800

080025a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <MX_USART2_UART_Init+0x4c>)
 80025ae:	4a12      	ldr	r2, [pc, #72]	; (80025f8 <MX_USART2_UART_Init+0x50>)
 80025b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <MX_USART2_UART_Init+0x4c>)
 80025b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80025b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025ba:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <MX_USART2_UART_Init+0x4c>)
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025c0:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <MX_USART2_UART_Init+0x4c>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025c6:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <MX_USART2_UART_Init+0x4c>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025cc:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <MX_USART2_UART_Init+0x4c>)
 80025ce:	220c      	movs	r2, #12
 80025d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025d2:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <MX_USART2_UART_Init+0x4c>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025d8:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <MX_USART2_UART_Init+0x4c>)
 80025da:	2200      	movs	r2, #0
 80025dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025de:	4805      	ldr	r0, [pc, #20]	; (80025f4 <MX_USART2_UART_Init+0x4c>)
 80025e0:	f002 f9a4 	bl	800492c <HAL_UART_Init>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80025ea:	f000 f8f5 	bl	80027d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000758 	.word	0x20000758
 80025f8:	40004400 	.word	0x40004400

080025fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002602:	f107 0310 	add.w	r3, r7, #16
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	605a      	str	r2, [r3, #4]
 800260c:	609a      	str	r2, [r3, #8]
 800260e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002610:	4b39      	ldr	r3, [pc, #228]	; (80026f8 <MX_GPIO_Init+0xfc>)
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	4a38      	ldr	r2, [pc, #224]	; (80026f8 <MX_GPIO_Init+0xfc>)
 8002616:	f043 0310 	orr.w	r3, r3, #16
 800261a:	6193      	str	r3, [r2, #24]
 800261c:	4b36      	ldr	r3, [pc, #216]	; (80026f8 <MX_GPIO_Init+0xfc>)
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	f003 0310 	and.w	r3, r3, #16
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002628:	4b33      	ldr	r3, [pc, #204]	; (80026f8 <MX_GPIO_Init+0xfc>)
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	4a32      	ldr	r2, [pc, #200]	; (80026f8 <MX_GPIO_Init+0xfc>)
 800262e:	f043 0320 	orr.w	r3, r3, #32
 8002632:	6193      	str	r3, [r2, #24]
 8002634:	4b30      	ldr	r3, [pc, #192]	; (80026f8 <MX_GPIO_Init+0xfc>)
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	f003 0320 	and.w	r3, r3, #32
 800263c:	60bb      	str	r3, [r7, #8]
 800263e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002640:	4b2d      	ldr	r3, [pc, #180]	; (80026f8 <MX_GPIO_Init+0xfc>)
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	4a2c      	ldr	r2, [pc, #176]	; (80026f8 <MX_GPIO_Init+0xfc>)
 8002646:	f043 0304 	orr.w	r3, r3, #4
 800264a:	6193      	str	r3, [r2, #24]
 800264c:	4b2a      	ldr	r3, [pc, #168]	; (80026f8 <MX_GPIO_Init+0xfc>)
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	607b      	str	r3, [r7, #4]
 8002656:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002658:	4b27      	ldr	r3, [pc, #156]	; (80026f8 <MX_GPIO_Init+0xfc>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	4a26      	ldr	r2, [pc, #152]	; (80026f8 <MX_GPIO_Init+0xfc>)
 800265e:	f043 0308 	orr.w	r3, r3, #8
 8002662:	6193      	str	r3, [r2, #24]
 8002664:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <MX_GPIO_Init+0xfc>)
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	f003 0308 	and.w	r3, r3, #8
 800266c:	603b      	str	r3, [r7, #0]
 800266e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002670:	2200      	movs	r2, #0
 8002672:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002676:	4821      	ldr	r0, [pc, #132]	; (80026fc <MX_GPIO_Init+0x100>)
 8002678:	f000 fddc 	bl	8003234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|D6_Pin|D5_Pin|D4_Pin
 800267c:	2200      	movs	r2, #0
 800267e:	f240 3139 	movw	r1, #825	; 0x339
 8002682:	481f      	ldr	r0, [pc, #124]	; (8002700 <MX_GPIO_Init+0x104>)
 8002684:	f000 fdd6 	bl	8003234 <HAL_GPIO_WritePin>
                          |RS_Pin|EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 8002688:	2200      	movs	r2, #0
 800268a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800268e:	481d      	ldr	r0, [pc, #116]	; (8002704 <MX_GPIO_Init+0x108>)
 8002690:	f000 fdd0 	bl	8003234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002694:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002698:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800269a:	2301      	movs	r3, #1
 800269c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a2:	2302      	movs	r3, #2
 80026a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a6:	f107 0310 	add.w	r3, r7, #16
 80026aa:	4619      	mov	r1, r3
 80026ac:	4813      	ldr	r0, [pc, #76]	; (80026fc <MX_GPIO_Init+0x100>)
 80026ae:	f000 fc67 	bl	8002f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 D6_Pin D5_Pin D4_Pin
                           RS_Pin EN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|D6_Pin|D5_Pin|D4_Pin
 80026b2:	f240 3339 	movw	r3, #825	; 0x339
 80026b6:	613b      	str	r3, [r7, #16]
                          |RS_Pin|EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026b8:	2301      	movs	r3, #1
 80026ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c0:	2302      	movs	r3, #2
 80026c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c4:	f107 0310 	add.w	r3, r7, #16
 80026c8:	4619      	mov	r1, r3
 80026ca:	480d      	ldr	r0, [pc, #52]	; (8002700 <MX_GPIO_Init+0x104>)
 80026cc:	f000 fc58 	bl	8002f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : D7_Pin */
  GPIO_InitStruct.Pin = D7_Pin;
 80026d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026d6:	2301      	movs	r3, #1
 80026d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026de:	2302      	movs	r3, #2
 80026e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D7_GPIO_Port, &GPIO_InitStruct);
 80026e2:	f107 0310 	add.w	r3, r7, #16
 80026e6:	4619      	mov	r1, r3
 80026e8:	4806      	ldr	r0, [pc, #24]	; (8002704 <MX_GPIO_Init+0x108>)
 80026ea:	f000 fc49 	bl	8002f80 <HAL_GPIO_Init>

}
 80026ee:	bf00      	nop
 80026f0:	3720      	adds	r7, #32
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40011000 	.word	0x40011000
 8002700:	40010c00 	.word	0x40010c00
 8002704:	40010800 	.word	0x40010800

08002708 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1){
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
	if(huart1->Instance == USART1){
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a09      	ldr	r2, [pc, #36]	; (800273c <HAL_UART_RxCpltCallback+0x34>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d101      	bne.n	800271e <HAL_UART_RxCpltCallback+0x16>
		GPS_UartReceiveChar();
 800271a:	f7fe fd13 	bl	8001144 <GPS_UartReceiveChar>
	}

	if(huart1->Instance == USART2){
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a07      	ldr	r2, [pc, #28]	; (8002740 <HAL_UART_RxCpltCallback+0x38>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d104      	bne.n	8002732 <HAL_UART_RxCpltCallback+0x2a>
		GSM_UartReceiveChar();
 8002728:	f7fe ffba 	bl	80016a0 <GSM_UartReceiveChar>
		test=1;
 800272c:	4b05      	ldr	r3, [pc, #20]	; (8002744 <HAL_UART_RxCpltCallback+0x3c>)
 800272e:	2201      	movs	r2, #1
 8002730:	701a      	strb	r2, [r3, #0]
	}
}
 8002732:	bf00      	nop
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40013800 	.word	0x40013800
 8002740:	40004400 	.word	0x40004400
 8002744:	20000218 	.word	0x20000218

08002748 <set_time>:

void set_time(){
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
	  RTC_TimeTypeDef sTime;
	  sTime.Hours = GPS_Hour;
 800274e:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <set_time+0x38>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	713b      	strb	r3, [r7, #4]
	  sTime.Minutes = GPS_Minute;
 8002754:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <set_time+0x3c>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	717b      	strb	r3, [r7, #5]
	  sTime.Seconds = GPS_Second;
 800275a:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <set_time+0x40>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	71bb      	strb	r3, [r7, #6]

	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002760:	1d3b      	adds	r3, r7, #4
 8002762:	2200      	movs	r2, #0
 8002764:	4619      	mov	r1, r3
 8002766:	4809      	ldr	r0, [pc, #36]	; (800278c <set_time+0x44>)
 8002768:	f001 fbc4 	bl	8003ef4 <HAL_RTC_SetTime>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <set_time+0x2e>
	  {
	    Error_Handler();
 8002772:	f000 f831 	bl	80027d8 <Error_Handler>
	  }
}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20000424 	.word	0x20000424
 8002784:	20000421 	.word	0x20000421
 8002788:	2000022a 	.word	0x2000022a
 800278c:	20000738 	.word	0x20000738

08002790 <set_date>:

void set_date(){
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
	  RTC_DateTypeDef DateToUpdate;
	  DateToUpdate.Month = GPS_Month;
 8002796:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <set_date+0x38>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	717b      	strb	r3, [r7, #5]
	  DateToUpdate.Date = GPS_Day;
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <set_date+0x3c>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	71bb      	strb	r3, [r7, #6]
	  DateToUpdate.Year = GPS_Year;
 80027a2:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <set_date+0x40>)
 80027a4:	881b      	ldrh	r3, [r3, #0]
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	71fb      	strb	r3, [r7, #7]

	  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 80027aa:	1d3b      	adds	r3, r7, #4
 80027ac:	2200      	movs	r2, #0
 80027ae:	4619      	mov	r1, r3
 80027b0:	4808      	ldr	r0, [pc, #32]	; (80027d4 <set_date+0x44>)
 80027b2:	f001 fd0f 	bl	80041d4 <HAL_RTC_SetDate>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <set_date+0x30>
	  {
	    Error_Handler();
 80027bc:	f000 f80c 	bl	80027d8 <Error_Handler>
	  }
}
 80027c0:	bf00      	nop
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20000400 	.word	0x20000400
 80027cc:	20000412 	.word	0x20000412
 80027d0:	20000410 	.word	0x20000410
 80027d4:	20000738 	.word	0x20000738

080027d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr

080027e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80027ea:	4b19      	ldr	r3, [pc, #100]	; (8002850 <HAL_MspInit+0x6c>)
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	4a18      	ldr	r2, [pc, #96]	; (8002850 <HAL_MspInit+0x6c>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	6193      	str	r3, [r2, #24]
 80027f6:	4b16      	ldr	r3, [pc, #88]	; (8002850 <HAL_MspInit+0x6c>)
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002802:	4b13      	ldr	r3, [pc, #76]	; (8002850 <HAL_MspInit+0x6c>)
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	4a12      	ldr	r2, [pc, #72]	; (8002850 <HAL_MspInit+0x6c>)
 8002808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800280c:	61d3      	str	r3, [r2, #28]
 800280e:	4b10      	ldr	r3, [pc, #64]	; (8002850 <HAL_MspInit+0x6c>)
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002816:	607b      	str	r3, [r7, #4]
 8002818:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 800281a:	2200      	movs	r2, #0
 800281c:	2100      	movs	r1, #0
 800281e:	2001      	movs	r0, #1
 8002820:	f000 fb01 	bl	8002e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8002824:	2001      	movs	r0, #1
 8002826:	f000 fb1a 	bl	8002e5e <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800282a:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <HAL_MspInit+0x70>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	4a04      	ldr	r2, [pc, #16]	; (8002854 <HAL_MspInit+0x70>)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002846:	bf00      	nop
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40021000 	.word	0x40021000
 8002854:	40010000 	.word	0x40010000

08002858 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a0b      	ldr	r2, [pc, #44]	; (8002894 <HAL_RTC_MspInit+0x3c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d110      	bne.n	800288c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800286a:	f000 fcfb 	bl	8003264 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800286e:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <HAL_RTC_MspInit+0x40>)
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	4a09      	ldr	r2, [pc, #36]	; (8002898 <HAL_RTC_MspInit+0x40>)
 8002874:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002878:	61d3      	str	r3, [r2, #28]
 800287a:	4b07      	ldr	r3, [pc, #28]	; (8002898 <HAL_RTC_MspInit+0x40>)
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002886:	4b05      	ldr	r3, [pc, #20]	; (800289c <HAL_RTC_MspInit+0x44>)
 8002888:	2201      	movs	r2, #1
 800288a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800288c:	bf00      	nop
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40002800 	.word	0x40002800
 8002898:	40021000 	.word	0x40021000
 800289c:	4242043c 	.word	0x4242043c

080028a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08a      	sub	sp, #40	; 0x28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a8:	f107 0318 	add.w	r3, r7, #24
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a3f      	ldr	r2, [pc, #252]	; (80029b8 <HAL_UART_MspInit+0x118>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d13a      	bne.n	8002936 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028c0:	4b3e      	ldr	r3, [pc, #248]	; (80029bc <HAL_UART_MspInit+0x11c>)
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	4a3d      	ldr	r2, [pc, #244]	; (80029bc <HAL_UART_MspInit+0x11c>)
 80028c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028ca:	6193      	str	r3, [r2, #24]
 80028cc:	4b3b      	ldr	r3, [pc, #236]	; (80029bc <HAL_UART_MspInit+0x11c>)
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d8:	4b38      	ldr	r3, [pc, #224]	; (80029bc <HAL_UART_MspInit+0x11c>)
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	4a37      	ldr	r2, [pc, #220]	; (80029bc <HAL_UART_MspInit+0x11c>)
 80028de:	f043 0304 	orr.w	r3, r3, #4
 80028e2:	6193      	str	r3, [r2, #24]
 80028e4:	4b35      	ldr	r3, [pc, #212]	; (80029bc <HAL_UART_MspInit+0x11c>)
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f6:	2302      	movs	r3, #2
 80028f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028fa:	2303      	movs	r3, #3
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028fe:	f107 0318 	add.w	r3, r7, #24
 8002902:	4619      	mov	r1, r3
 8002904:	482e      	ldr	r0, [pc, #184]	; (80029c0 <HAL_UART_MspInit+0x120>)
 8002906:	f000 fb3b 	bl	8002f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800290a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800290e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002910:	2300      	movs	r3, #0
 8002912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002914:	2300      	movs	r3, #0
 8002916:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002918:	f107 0318 	add.w	r3, r7, #24
 800291c:	4619      	mov	r1, r3
 800291e:	4828      	ldr	r0, [pc, #160]	; (80029c0 <HAL_UART_MspInit+0x120>)
 8002920:	f000 fb2e 	bl	8002f80 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002924:	2200      	movs	r2, #0
 8002926:	2100      	movs	r1, #0
 8002928:	2025      	movs	r0, #37	; 0x25
 800292a:	f000 fa7c 	bl	8002e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800292e:	2025      	movs	r0, #37	; 0x25
 8002930:	f000 fa95 	bl	8002e5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002934:	e03c      	b.n	80029b0 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a22      	ldr	r2, [pc, #136]	; (80029c4 <HAL_UART_MspInit+0x124>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d137      	bne.n	80029b0 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002940:	4b1e      	ldr	r3, [pc, #120]	; (80029bc <HAL_UART_MspInit+0x11c>)
 8002942:	69db      	ldr	r3, [r3, #28]
 8002944:	4a1d      	ldr	r2, [pc, #116]	; (80029bc <HAL_UART_MspInit+0x11c>)
 8002946:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800294a:	61d3      	str	r3, [r2, #28]
 800294c:	4b1b      	ldr	r3, [pc, #108]	; (80029bc <HAL_UART_MspInit+0x11c>)
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002958:	4b18      	ldr	r3, [pc, #96]	; (80029bc <HAL_UART_MspInit+0x11c>)
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	4a17      	ldr	r2, [pc, #92]	; (80029bc <HAL_UART_MspInit+0x11c>)
 800295e:	f043 0304 	orr.w	r3, r3, #4
 8002962:	6193      	str	r3, [r2, #24]
 8002964:	4b15      	ldr	r3, [pc, #84]	; (80029bc <HAL_UART_MspInit+0x11c>)
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002970:	2304      	movs	r3, #4
 8002972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002974:	2302      	movs	r3, #2
 8002976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002978:	2303      	movs	r3, #3
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800297c:	f107 0318 	add.w	r3, r7, #24
 8002980:	4619      	mov	r1, r3
 8002982:	480f      	ldr	r0, [pc, #60]	; (80029c0 <HAL_UART_MspInit+0x120>)
 8002984:	f000 fafc 	bl	8002f80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002988:	2308      	movs	r3, #8
 800298a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800298c:	2300      	movs	r3, #0
 800298e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002994:	f107 0318 	add.w	r3, r7, #24
 8002998:	4619      	mov	r1, r3
 800299a:	4809      	ldr	r0, [pc, #36]	; (80029c0 <HAL_UART_MspInit+0x120>)
 800299c:	f000 faf0 	bl	8002f80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80029a0:	2200      	movs	r2, #0
 80029a2:	2100      	movs	r1, #0
 80029a4:	2026      	movs	r0, #38	; 0x26
 80029a6:	f000 fa3e 	bl	8002e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029aa:	2026      	movs	r0, #38	; 0x26
 80029ac:	f000 fa57 	bl	8002e5e <HAL_NVIC_EnableIRQ>
}
 80029b0:	bf00      	nop
 80029b2:	3728      	adds	r7, #40	; 0x28
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40013800 	.word	0x40013800
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40010800 	.word	0x40010800
 80029c4:	40004400 	.word	0x40004400

080029c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80029cc:	bf00      	nop
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr

080029d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029d8:	e7fe      	b.n	80029d8 <HardFault_Handler+0x4>

080029da <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029da:	b480      	push	{r7}
 80029dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029de:	e7fe      	b.n	80029de <MemManage_Handler+0x4>

080029e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029e4:	e7fe      	b.n	80029e4 <BusFault_Handler+0x4>

080029e6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029e6:	b480      	push	{r7}
 80029e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029ea:	e7fe      	b.n	80029ea <UsageFault_Handler+0x4>

080029ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029f0:	bf00      	nop
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr

08002a04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a08:	bf00      	nop
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr

08002a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a14:	f000 f8f2 	bl	8002bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a18:	bf00      	nop
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8002a20:	f000 fc2c 	bl	800327c <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8002a24:	bf00      	nop
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a2c:	4802      	ldr	r0, [pc, #8]	; (8002a38 <USART1_IRQHandler+0x10>)
 8002a2e:	f002 f8fb 	bl	8004c28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a32:	bf00      	nop
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	200006f8 	.word	0x200006f8

08002a3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a40:	4802      	ldr	r0, [pc, #8]	; (8002a4c <USART2_IRQHandler+0x10>)
 8002a42:	f002 f8f1 	bl	8004c28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20000758 	.word	0x20000758

08002a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a58:	4a14      	ldr	r2, [pc, #80]	; (8002aac <_sbrk+0x5c>)
 8002a5a:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <_sbrk+0x60>)
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a64:	4b13      	ldr	r3, [pc, #76]	; (8002ab4 <_sbrk+0x64>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d102      	bne.n	8002a72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a6c:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <_sbrk+0x64>)
 8002a6e:	4a12      	ldr	r2, [pc, #72]	; (8002ab8 <_sbrk+0x68>)
 8002a70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a72:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <_sbrk+0x64>)
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4413      	add	r3, r2
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d207      	bcs.n	8002a90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a80:	f002 fc2c 	bl	80052dc <__errno>
 8002a84:	4602      	mov	r2, r0
 8002a86:	230c      	movs	r3, #12
 8002a88:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8e:	e009      	b.n	8002aa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a90:	4b08      	ldr	r3, [pc, #32]	; (8002ab4 <_sbrk+0x64>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a96:	4b07      	ldr	r3, [pc, #28]	; (8002ab4 <_sbrk+0x64>)
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	4a05      	ldr	r2, [pc, #20]	; (8002ab4 <_sbrk+0x64>)
 8002aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	20005000 	.word	0x20005000
 8002ab0:	00000400 	.word	0x00000400
 8002ab4:	2000021c 	.word	0x2000021c
 8002ab8:	200007a0 	.word	0x200007a0

08002abc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002ac0:	4b15      	ldr	r3, [pc, #84]	; (8002b18 <SystemInit+0x5c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a14      	ldr	r2, [pc, #80]	; (8002b18 <SystemInit+0x5c>)
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002acc:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <SystemInit+0x5c>)
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	4911      	ldr	r1, [pc, #68]	; (8002b18 <SystemInit+0x5c>)
 8002ad2:	4b12      	ldr	r3, [pc, #72]	; (8002b1c <SystemInit+0x60>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002ad8:	4b0f      	ldr	r3, [pc, #60]	; (8002b18 <SystemInit+0x5c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a0e      	ldr	r2, [pc, #56]	; (8002b18 <SystemInit+0x5c>)
 8002ade:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ae6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <SystemInit+0x5c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a0a      	ldr	r2, [pc, #40]	; (8002b18 <SystemInit+0x5c>)
 8002aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002af2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002af4:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <SystemInit+0x5c>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	4a07      	ldr	r2, [pc, #28]	; (8002b18 <SystemInit+0x5c>)
 8002afa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002afe:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002b00:	4b05      	ldr	r3, [pc, #20]	; (8002b18 <SystemInit+0x5c>)
 8002b02:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002b06:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002b08:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <SystemInit+0x64>)
 8002b0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b0e:	609a      	str	r2, [r3, #8]
#endif 
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	f8ff0000 	.word	0xf8ff0000
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002b24:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002b26:	e003      	b.n	8002b30 <LoopCopyDataInit>

08002b28 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002b28:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002b2a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002b2c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002b2e:	3104      	adds	r1, #4

08002b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002b30:	480a      	ldr	r0, [pc, #40]	; (8002b5c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002b32:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002b34:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002b36:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002b38:	d3f6      	bcc.n	8002b28 <CopyDataInit>
  ldr r2, =_sbss
 8002b3a:	4a0a      	ldr	r2, [pc, #40]	; (8002b64 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002b3c:	e002      	b.n	8002b44 <LoopFillZerobss>

08002b3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002b3e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002b40:	f842 3b04 	str.w	r3, [r2], #4

08002b44 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002b44:	4b08      	ldr	r3, [pc, #32]	; (8002b68 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002b46:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002b48:	d3f9      	bcc.n	8002b3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b4a:	f7ff ffb7 	bl	8002abc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b4e:	f002 fbcb 	bl	80052e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b52:	f7ff f8cd 	bl	8001cf0 <main>
  bx lr
 8002b56:	4770      	bx	lr
  ldr r3, =_sidata
 8002b58:	08008f40 	.word	0x08008f40
  ldr r0, =_sdata
 8002b5c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002b60:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8002b64:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8002b68:	200007a0 	.word	0x200007a0

08002b6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b6c:	e7fe      	b.n	8002b6c <ADC1_2_IRQHandler>
	...

08002b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b74:	4b08      	ldr	r3, [pc, #32]	; (8002b98 <HAL_Init+0x28>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a07      	ldr	r2, [pc, #28]	; (8002b98 <HAL_Init+0x28>)
 8002b7a:	f043 0310 	orr.w	r3, r3, #16
 8002b7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b80:	2003      	movs	r0, #3
 8002b82:	f000 f945 	bl	8002e10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b86:	2000      	movs	r0, #0
 8002b88:	f000 f808 	bl	8002b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b8c:	f7ff fe2a 	bl	80027e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40022000 	.word	0x40022000

08002b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ba4:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <HAL_InitTick+0x54>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	4b12      	ldr	r3, [pc, #72]	; (8002bf4 <HAL_InitTick+0x58>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	4619      	mov	r1, r3
 8002bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 f95d 	bl	8002e7a <HAL_SYSTICK_Config>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e00e      	b.n	8002be8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b0f      	cmp	r3, #15
 8002bce:	d80a      	bhi.n	8002be6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd8:	f000 f925 	bl	8002e26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bdc:	4a06      	ldr	r2, [pc, #24]	; (8002bf8 <HAL_InitTick+0x5c>)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
 8002be4:	e000      	b.n	8002be8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20000000 	.word	0x20000000
 8002bf4:	20000008 	.word	0x20000008
 8002bf8:	20000004 	.word	0x20000004

08002bfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <HAL_IncTick+0x1c>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	461a      	mov	r2, r3
 8002c06:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <HAL_IncTick+0x20>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	4a03      	ldr	r2, [pc, #12]	; (8002c1c <HAL_IncTick+0x20>)
 8002c0e:	6013      	str	r3, [r2, #0]
}
 8002c10:	bf00      	nop
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr
 8002c18:	20000008 	.word	0x20000008
 8002c1c:	20000798 	.word	0x20000798

08002c20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return uwTick;
 8002c24:	4b02      	ldr	r3, [pc, #8]	; (8002c30 <HAL_GetTick+0x10>)
 8002c26:	681b      	ldr	r3, [r3, #0]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr
 8002c30:	20000798 	.word	0x20000798

08002c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c3c:	f7ff fff0 	bl	8002c20 <HAL_GetTick>
 8002c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4c:	d005      	beq.n	8002c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c4e:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <HAL_Delay+0x40>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	461a      	mov	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4413      	add	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c5a:	bf00      	nop
 8002c5c:	f7ff ffe0 	bl	8002c20 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d8f7      	bhi.n	8002c5c <HAL_Delay+0x28>
  {
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	20000008 	.word	0x20000008

08002c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c88:	4b0c      	ldr	r3, [pc, #48]	; (8002cbc <__NVIC_SetPriorityGrouping+0x44>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c94:	4013      	ands	r3, r2
 8002c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ca0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002caa:	4a04      	ldr	r2, [pc, #16]	; (8002cbc <__NVIC_SetPriorityGrouping+0x44>)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	60d3      	str	r3, [r2, #12]
}
 8002cb0:	bf00      	nop
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	e000ed00 	.word	0xe000ed00

08002cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cc4:	4b04      	ldr	r3, [pc, #16]	; (8002cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	0a1b      	lsrs	r3, r3, #8
 8002cca:	f003 0307 	and.w	r3, r3, #7
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	db0b      	blt.n	8002d06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	f003 021f 	and.w	r2, r3, #31
 8002cf4:	4906      	ldr	r1, [pc, #24]	; (8002d10 <__NVIC_EnableIRQ+0x34>)
 8002cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8002d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr
 8002d10:	e000e100 	.word	0xe000e100

08002d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	6039      	str	r1, [r7, #0]
 8002d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	db0a      	blt.n	8002d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	490c      	ldr	r1, [pc, #48]	; (8002d60 <__NVIC_SetPriority+0x4c>)
 8002d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d32:	0112      	lsls	r2, r2, #4
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	440b      	add	r3, r1
 8002d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d3c:	e00a      	b.n	8002d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	4908      	ldr	r1, [pc, #32]	; (8002d64 <__NVIC_SetPriority+0x50>)
 8002d44:	79fb      	ldrb	r3, [r7, #7]
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	3b04      	subs	r3, #4
 8002d4c:	0112      	lsls	r2, r2, #4
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	440b      	add	r3, r1
 8002d52:	761a      	strb	r2, [r3, #24]
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	e000e100 	.word	0xe000e100
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b089      	sub	sp, #36	; 0x24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	f1c3 0307 	rsb	r3, r3, #7
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	bf28      	it	cs
 8002d86:	2304      	movcs	r3, #4
 8002d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	2b06      	cmp	r3, #6
 8002d90:	d902      	bls.n	8002d98 <NVIC_EncodePriority+0x30>
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	3b03      	subs	r3, #3
 8002d96:	e000      	b.n	8002d9a <NVIC_EncodePriority+0x32>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	43da      	mvns	r2, r3
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	401a      	ands	r2, r3
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002db0:	f04f 31ff 	mov.w	r1, #4294967295
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dba:	43d9      	mvns	r1, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc0:	4313      	orrs	r3, r2
         );
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3724      	adds	r7, #36	; 0x24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr

08002dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ddc:	d301      	bcc.n	8002de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dde:	2301      	movs	r3, #1
 8002de0:	e00f      	b.n	8002e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002de2:	4a0a      	ldr	r2, [pc, #40]	; (8002e0c <SysTick_Config+0x40>)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dea:	210f      	movs	r1, #15
 8002dec:	f04f 30ff 	mov.w	r0, #4294967295
 8002df0:	f7ff ff90 	bl	8002d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002df4:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <SysTick_Config+0x40>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dfa:	4b04      	ldr	r3, [pc, #16]	; (8002e0c <SysTick_Config+0x40>)
 8002dfc:	2207      	movs	r2, #7
 8002dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	e000e010 	.word	0xe000e010

08002e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7ff ff2d 	bl	8002c78 <__NVIC_SetPriorityGrouping>
}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b086      	sub	sp, #24
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	60b9      	str	r1, [r7, #8]
 8002e30:	607a      	str	r2, [r7, #4]
 8002e32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e38:	f7ff ff42 	bl	8002cc0 <__NVIC_GetPriorityGrouping>
 8002e3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	68b9      	ldr	r1, [r7, #8]
 8002e42:	6978      	ldr	r0, [r7, #20]
 8002e44:	f7ff ff90 	bl	8002d68 <NVIC_EncodePriority>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e4e:	4611      	mov	r1, r2
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff ff5f 	bl	8002d14 <__NVIC_SetPriority>
}
 8002e56:	bf00      	nop
 8002e58:	3718      	adds	r7, #24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b082      	sub	sp, #8
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	4603      	mov	r3, r0
 8002e66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff ff35 	bl	8002cdc <__NVIC_EnableIRQ>
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b082      	sub	sp, #8
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7ff ffa2 	bl	8002dcc <SysTick_Config>
 8002e88:	4603      	mov	r3, r0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d005      	beq.n	8002eb6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2204      	movs	r2, #4
 8002eae:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	73fb      	strb	r3, [r7, #15]
 8002eb4:	e051      	b.n	8002f5a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 020e 	bic.w	r2, r2, #14
 8002ec4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0201 	bic.w	r2, r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a22      	ldr	r2, [pc, #136]	; (8002f64 <HAL_DMA_Abort_IT+0xd0>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d029      	beq.n	8002f34 <HAL_DMA_Abort_IT+0xa0>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a20      	ldr	r2, [pc, #128]	; (8002f68 <HAL_DMA_Abort_IT+0xd4>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d022      	beq.n	8002f30 <HAL_DMA_Abort_IT+0x9c>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a1f      	ldr	r2, [pc, #124]	; (8002f6c <HAL_DMA_Abort_IT+0xd8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d01a      	beq.n	8002f2a <HAL_DMA_Abort_IT+0x96>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a1d      	ldr	r2, [pc, #116]	; (8002f70 <HAL_DMA_Abort_IT+0xdc>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d012      	beq.n	8002f24 <HAL_DMA_Abort_IT+0x90>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a1c      	ldr	r2, [pc, #112]	; (8002f74 <HAL_DMA_Abort_IT+0xe0>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d00a      	beq.n	8002f1e <HAL_DMA_Abort_IT+0x8a>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a1a      	ldr	r2, [pc, #104]	; (8002f78 <HAL_DMA_Abort_IT+0xe4>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d102      	bne.n	8002f18 <HAL_DMA_Abort_IT+0x84>
 8002f12:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f16:	e00e      	b.n	8002f36 <HAL_DMA_Abort_IT+0xa2>
 8002f18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f1c:	e00b      	b.n	8002f36 <HAL_DMA_Abort_IT+0xa2>
 8002f1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f22:	e008      	b.n	8002f36 <HAL_DMA_Abort_IT+0xa2>
 8002f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f28:	e005      	b.n	8002f36 <HAL_DMA_Abort_IT+0xa2>
 8002f2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f2e:	e002      	b.n	8002f36 <HAL_DMA_Abort_IT+0xa2>
 8002f30:	2310      	movs	r3, #16
 8002f32:	e000      	b.n	8002f36 <HAL_DMA_Abort_IT+0xa2>
 8002f34:	2301      	movs	r3, #1
 8002f36:	4a11      	ldr	r2, [pc, #68]	; (8002f7c <HAL_DMA_Abort_IT+0xe8>)
 8002f38:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	4798      	blx	r3
    } 
  }
  return status;
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40020008 	.word	0x40020008
 8002f68:	4002001c 	.word	0x4002001c
 8002f6c:	40020030 	.word	0x40020030
 8002f70:	40020044 	.word	0x40020044
 8002f74:	40020058 	.word	0x40020058
 8002f78:	4002006c 	.word	0x4002006c
 8002f7c:	40020000 	.word	0x40020000

08002f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b08b      	sub	sp, #44	; 0x2c
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f92:	e127      	b.n	80031e4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f94:	2201      	movs	r2, #1
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	69fa      	ldr	r2, [r7, #28]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	f040 8116 	bne.w	80031de <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b12      	cmp	r3, #18
 8002fb8:	d034      	beq.n	8003024 <HAL_GPIO_Init+0xa4>
 8002fba:	2b12      	cmp	r3, #18
 8002fbc:	d80d      	bhi.n	8002fda <HAL_GPIO_Init+0x5a>
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d02b      	beq.n	800301a <HAL_GPIO_Init+0x9a>
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d804      	bhi.n	8002fd0 <HAL_GPIO_Init+0x50>
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d031      	beq.n	800302e <HAL_GPIO_Init+0xae>
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d01c      	beq.n	8003008 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002fce:	e048      	b.n	8003062 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	d043      	beq.n	800305c <HAL_GPIO_Init+0xdc>
 8002fd4:	2b11      	cmp	r3, #17
 8002fd6:	d01b      	beq.n	8003010 <HAL_GPIO_Init+0x90>
          break;
 8002fd8:	e043      	b.n	8003062 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002fda:	4a89      	ldr	r2, [pc, #548]	; (8003200 <HAL_GPIO_Init+0x280>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d026      	beq.n	800302e <HAL_GPIO_Init+0xae>
 8002fe0:	4a87      	ldr	r2, [pc, #540]	; (8003200 <HAL_GPIO_Init+0x280>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d806      	bhi.n	8002ff4 <HAL_GPIO_Init+0x74>
 8002fe6:	4a87      	ldr	r2, [pc, #540]	; (8003204 <HAL_GPIO_Init+0x284>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d020      	beq.n	800302e <HAL_GPIO_Init+0xae>
 8002fec:	4a86      	ldr	r2, [pc, #536]	; (8003208 <HAL_GPIO_Init+0x288>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d01d      	beq.n	800302e <HAL_GPIO_Init+0xae>
          break;
 8002ff2:	e036      	b.n	8003062 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002ff4:	4a85      	ldr	r2, [pc, #532]	; (800320c <HAL_GPIO_Init+0x28c>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d019      	beq.n	800302e <HAL_GPIO_Init+0xae>
 8002ffa:	4a85      	ldr	r2, [pc, #532]	; (8003210 <HAL_GPIO_Init+0x290>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d016      	beq.n	800302e <HAL_GPIO_Init+0xae>
 8003000:	4a84      	ldr	r2, [pc, #528]	; (8003214 <HAL_GPIO_Init+0x294>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d013      	beq.n	800302e <HAL_GPIO_Init+0xae>
          break;
 8003006:	e02c      	b.n	8003062 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	623b      	str	r3, [r7, #32]
          break;
 800300e:	e028      	b.n	8003062 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	3304      	adds	r3, #4
 8003016:	623b      	str	r3, [r7, #32]
          break;
 8003018:	e023      	b.n	8003062 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	3308      	adds	r3, #8
 8003020:	623b      	str	r3, [r7, #32]
          break;
 8003022:	e01e      	b.n	8003062 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	330c      	adds	r3, #12
 800302a:	623b      	str	r3, [r7, #32]
          break;
 800302c:	e019      	b.n	8003062 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d102      	bne.n	800303c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003036:	2304      	movs	r3, #4
 8003038:	623b      	str	r3, [r7, #32]
          break;
 800303a:	e012      	b.n	8003062 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d105      	bne.n	8003050 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003044:	2308      	movs	r3, #8
 8003046:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69fa      	ldr	r2, [r7, #28]
 800304c:	611a      	str	r2, [r3, #16]
          break;
 800304e:	e008      	b.n	8003062 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003050:	2308      	movs	r3, #8
 8003052:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69fa      	ldr	r2, [r7, #28]
 8003058:	615a      	str	r2, [r3, #20]
          break;
 800305a:	e002      	b.n	8003062 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800305c:	2300      	movs	r3, #0
 800305e:	623b      	str	r3, [r7, #32]
          break;
 8003060:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	2bff      	cmp	r3, #255	; 0xff
 8003066:	d801      	bhi.n	800306c <HAL_GPIO_Init+0xec>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	e001      	b.n	8003070 <HAL_GPIO_Init+0xf0>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3304      	adds	r3, #4
 8003070:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	2bff      	cmp	r3, #255	; 0xff
 8003076:	d802      	bhi.n	800307e <HAL_GPIO_Init+0xfe>
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	e002      	b.n	8003084 <HAL_GPIO_Init+0x104>
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	3b08      	subs	r3, #8
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	210f      	movs	r1, #15
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	fa01 f303 	lsl.w	r3, r1, r3
 8003092:	43db      	mvns	r3, r3
 8003094:	401a      	ands	r2, r3
 8003096:	6a39      	ldr	r1, [r7, #32]
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	fa01 f303 	lsl.w	r3, r1, r3
 800309e:	431a      	orrs	r2, r3
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 8096 	beq.w	80031de <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030b2:	4b59      	ldr	r3, [pc, #356]	; (8003218 <HAL_GPIO_Init+0x298>)
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	4a58      	ldr	r2, [pc, #352]	; (8003218 <HAL_GPIO_Init+0x298>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6193      	str	r3, [r2, #24]
 80030be:	4b56      	ldr	r3, [pc, #344]	; (8003218 <HAL_GPIO_Init+0x298>)
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	60bb      	str	r3, [r7, #8]
 80030c8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030ca:	4a54      	ldr	r2, [pc, #336]	; (800321c <HAL_GPIO_Init+0x29c>)
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	089b      	lsrs	r3, r3, #2
 80030d0:	3302      	adds	r3, #2
 80030d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	220f      	movs	r2, #15
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	43db      	mvns	r3, r3
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	4013      	ands	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a4b      	ldr	r2, [pc, #300]	; (8003220 <HAL_GPIO_Init+0x2a0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d013      	beq.n	800311e <HAL_GPIO_Init+0x19e>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a4a      	ldr	r2, [pc, #296]	; (8003224 <HAL_GPIO_Init+0x2a4>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d00d      	beq.n	800311a <HAL_GPIO_Init+0x19a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a49      	ldr	r2, [pc, #292]	; (8003228 <HAL_GPIO_Init+0x2a8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d007      	beq.n	8003116 <HAL_GPIO_Init+0x196>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a48      	ldr	r2, [pc, #288]	; (800322c <HAL_GPIO_Init+0x2ac>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d101      	bne.n	8003112 <HAL_GPIO_Init+0x192>
 800310e:	2303      	movs	r3, #3
 8003110:	e006      	b.n	8003120 <HAL_GPIO_Init+0x1a0>
 8003112:	2304      	movs	r3, #4
 8003114:	e004      	b.n	8003120 <HAL_GPIO_Init+0x1a0>
 8003116:	2302      	movs	r3, #2
 8003118:	e002      	b.n	8003120 <HAL_GPIO_Init+0x1a0>
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <HAL_GPIO_Init+0x1a0>
 800311e:	2300      	movs	r3, #0
 8003120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003122:	f002 0203 	and.w	r2, r2, #3
 8003126:	0092      	lsls	r2, r2, #2
 8003128:	4093      	lsls	r3, r2
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4313      	orrs	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003130:	493a      	ldr	r1, [pc, #232]	; (800321c <HAL_GPIO_Init+0x29c>)
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	089b      	lsrs	r3, r3, #2
 8003136:	3302      	adds	r3, #2
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d006      	beq.n	8003158 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800314a:	4b39      	ldr	r3, [pc, #228]	; (8003230 <HAL_GPIO_Init+0x2b0>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	4938      	ldr	r1, [pc, #224]	; (8003230 <HAL_GPIO_Init+0x2b0>)
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	4313      	orrs	r3, r2
 8003154:	600b      	str	r3, [r1, #0]
 8003156:	e006      	b.n	8003166 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003158:	4b35      	ldr	r3, [pc, #212]	; (8003230 <HAL_GPIO_Init+0x2b0>)
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	43db      	mvns	r3, r3
 8003160:	4933      	ldr	r1, [pc, #204]	; (8003230 <HAL_GPIO_Init+0x2b0>)
 8003162:	4013      	ands	r3, r2
 8003164:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d006      	beq.n	8003180 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003172:	4b2f      	ldr	r3, [pc, #188]	; (8003230 <HAL_GPIO_Init+0x2b0>)
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	492e      	ldr	r1, [pc, #184]	; (8003230 <HAL_GPIO_Init+0x2b0>)
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	4313      	orrs	r3, r2
 800317c:	604b      	str	r3, [r1, #4]
 800317e:	e006      	b.n	800318e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003180:	4b2b      	ldr	r3, [pc, #172]	; (8003230 <HAL_GPIO_Init+0x2b0>)
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	43db      	mvns	r3, r3
 8003188:	4929      	ldr	r1, [pc, #164]	; (8003230 <HAL_GPIO_Init+0x2b0>)
 800318a:	4013      	ands	r3, r2
 800318c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d006      	beq.n	80031a8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800319a:	4b25      	ldr	r3, [pc, #148]	; (8003230 <HAL_GPIO_Init+0x2b0>)
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	4924      	ldr	r1, [pc, #144]	; (8003230 <HAL_GPIO_Init+0x2b0>)
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	608b      	str	r3, [r1, #8]
 80031a6:	e006      	b.n	80031b6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031a8:	4b21      	ldr	r3, [pc, #132]	; (8003230 <HAL_GPIO_Init+0x2b0>)
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	43db      	mvns	r3, r3
 80031b0:	491f      	ldr	r1, [pc, #124]	; (8003230 <HAL_GPIO_Init+0x2b0>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d006      	beq.n	80031d0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031c2:	4b1b      	ldr	r3, [pc, #108]	; (8003230 <HAL_GPIO_Init+0x2b0>)
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	491a      	ldr	r1, [pc, #104]	; (8003230 <HAL_GPIO_Init+0x2b0>)
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	60cb      	str	r3, [r1, #12]
 80031ce:	e006      	b.n	80031de <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031d0:	4b17      	ldr	r3, [pc, #92]	; (8003230 <HAL_GPIO_Init+0x2b0>)
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	43db      	mvns	r3, r3
 80031d8:	4915      	ldr	r1, [pc, #84]	; (8003230 <HAL_GPIO_Init+0x2b0>)
 80031da:	4013      	ands	r3, r2
 80031dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	3301      	adds	r3, #1
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	fa22 f303 	lsr.w	r3, r2, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f47f aed0 	bne.w	8002f94 <HAL_GPIO_Init+0x14>
  }
}
 80031f4:	bf00      	nop
 80031f6:	372c      	adds	r7, #44	; 0x2c
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	10210000 	.word	0x10210000
 8003204:	10110000 	.word	0x10110000
 8003208:	10120000 	.word	0x10120000
 800320c:	10310000 	.word	0x10310000
 8003210:	10320000 	.word	0x10320000
 8003214:	10220000 	.word	0x10220000
 8003218:	40021000 	.word	0x40021000
 800321c:	40010000 	.word	0x40010000
 8003220:	40010800 	.word	0x40010800
 8003224:	40010c00 	.word	0x40010c00
 8003228:	40011000 	.word	0x40011000
 800322c:	40011400 	.word	0x40011400
 8003230:	40010400 	.word	0x40010400

08003234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	807b      	strh	r3, [r7, #2]
 8003240:	4613      	mov	r3, r2
 8003242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003244:	787b      	ldrb	r3, [r7, #1]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800324a:	887a      	ldrh	r2, [r7, #2]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003250:	e003      	b.n	800325a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003252:	887b      	ldrh	r3, [r7, #2]
 8003254:	041a      	lsls	r2, r3, #16
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	611a      	str	r2, [r3, #16]
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	bc80      	pop	{r7}
 8003262:	4770      	bx	lr

08003264 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003268:	4b03      	ldr	r3, [pc, #12]	; (8003278 <HAL_PWR_EnableBkUpAccess+0x14>)
 800326a:	2201      	movs	r2, #1
 800326c:	601a      	str	r2, [r3, #0]
}
 800326e:	bf00      	nop
 8003270:	46bd      	mov	sp, r7
 8003272:	bc80      	pop	{r7}
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	420e0020 	.word	0x420e0020

0800327c <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8003280:	4b06      	ldr	r3, [pc, #24]	; (800329c <HAL_PWR_PVD_IRQHandler+0x20>)
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d005      	beq.n	8003298 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800328c:	f000 f808 	bl	80032a0 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8003290:	4b02      	ldr	r3, [pc, #8]	; (800329c <HAL_PWR_PVD_IRQHandler+0x20>)
 8003292:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003296:	615a      	str	r2, [r3, #20]
  }
}
 8003298:	bf00      	nop
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40010400 	.word	0x40010400

080032a0 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80032a4:	bf00      	nop
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr

080032ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e26c      	b.n	8003798 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 8087 	beq.w	80033da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032cc:	4b92      	ldr	r3, [pc, #584]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 030c 	and.w	r3, r3, #12
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	d00c      	beq.n	80032f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032d8:	4b8f      	ldr	r3, [pc, #572]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 030c 	and.w	r3, r3, #12
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d112      	bne.n	800330a <HAL_RCC_OscConfig+0x5e>
 80032e4:	4b8c      	ldr	r3, [pc, #560]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f0:	d10b      	bne.n	800330a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f2:	4b89      	ldr	r3, [pc, #548]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d06c      	beq.n	80033d8 <HAL_RCC_OscConfig+0x12c>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d168      	bne.n	80033d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e246      	b.n	8003798 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003312:	d106      	bne.n	8003322 <HAL_RCC_OscConfig+0x76>
 8003314:	4b80      	ldr	r3, [pc, #512]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a7f      	ldr	r2, [pc, #508]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 800331a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800331e:	6013      	str	r3, [r2, #0]
 8003320:	e02e      	b.n	8003380 <HAL_RCC_OscConfig+0xd4>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10c      	bne.n	8003344 <HAL_RCC_OscConfig+0x98>
 800332a:	4b7b      	ldr	r3, [pc, #492]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a7a      	ldr	r2, [pc, #488]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 8003330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	4b78      	ldr	r3, [pc, #480]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a77      	ldr	r2, [pc, #476]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 800333c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	e01d      	b.n	8003380 <HAL_RCC_OscConfig+0xd4>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800334c:	d10c      	bne.n	8003368 <HAL_RCC_OscConfig+0xbc>
 800334e:	4b72      	ldr	r3, [pc, #456]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a71      	ldr	r2, [pc, #452]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 8003354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	4b6f      	ldr	r3, [pc, #444]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a6e      	ldr	r2, [pc, #440]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 8003360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	e00b      	b.n	8003380 <HAL_RCC_OscConfig+0xd4>
 8003368:	4b6b      	ldr	r3, [pc, #428]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a6a      	ldr	r2, [pc, #424]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 800336e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003372:	6013      	str	r3, [r2, #0]
 8003374:	4b68      	ldr	r3, [pc, #416]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a67      	ldr	r2, [pc, #412]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 800337a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800337e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d013      	beq.n	80033b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003388:	f7ff fc4a 	bl	8002c20 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003390:	f7ff fc46 	bl	8002c20 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b64      	cmp	r3, #100	; 0x64
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e1fa      	b.n	8003798 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a2:	4b5d      	ldr	r3, [pc, #372]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f0      	beq.n	8003390 <HAL_RCC_OscConfig+0xe4>
 80033ae:	e014      	b.n	80033da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b0:	f7ff fc36 	bl	8002c20 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b8:	f7ff fc32 	bl	8002c20 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b64      	cmp	r3, #100	; 0x64
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e1e6      	b.n	8003798 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ca:	4b53      	ldr	r3, [pc, #332]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f0      	bne.n	80033b8 <HAL_RCC_OscConfig+0x10c>
 80033d6:	e000      	b.n	80033da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d063      	beq.n	80034ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033e6:	4b4c      	ldr	r3, [pc, #304]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f003 030c 	and.w	r3, r3, #12
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00b      	beq.n	800340a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033f2:	4b49      	ldr	r3, [pc, #292]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f003 030c 	and.w	r3, r3, #12
 80033fa:	2b08      	cmp	r3, #8
 80033fc:	d11c      	bne.n	8003438 <HAL_RCC_OscConfig+0x18c>
 80033fe:	4b46      	ldr	r3, [pc, #280]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d116      	bne.n	8003438 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800340a:	4b43      	ldr	r3, [pc, #268]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d005      	beq.n	8003422 <HAL_RCC_OscConfig+0x176>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d001      	beq.n	8003422 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e1ba      	b.n	8003798 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003422:	4b3d      	ldr	r3, [pc, #244]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	4939      	ldr	r1, [pc, #228]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 8003432:	4313      	orrs	r3, r2
 8003434:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003436:	e03a      	b.n	80034ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d020      	beq.n	8003482 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003440:	4b36      	ldr	r3, [pc, #216]	; (800351c <HAL_RCC_OscConfig+0x270>)
 8003442:	2201      	movs	r2, #1
 8003444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003446:	f7ff fbeb 	bl	8002c20 <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800344c:	e008      	b.n	8003460 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800344e:	f7ff fbe7 	bl	8002c20 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e19b      	b.n	8003798 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003460:	4b2d      	ldr	r3, [pc, #180]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0f0      	beq.n	800344e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800346c:	4b2a      	ldr	r3, [pc, #168]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	4927      	ldr	r1, [pc, #156]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 800347c:	4313      	orrs	r3, r2
 800347e:	600b      	str	r3, [r1, #0]
 8003480:	e015      	b.n	80034ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003482:	4b26      	ldr	r3, [pc, #152]	; (800351c <HAL_RCC_OscConfig+0x270>)
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003488:	f7ff fbca 	bl	8002c20 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003490:	f7ff fbc6 	bl	8002c20 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e17a      	b.n	8003798 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034a2:	4b1d      	ldr	r3, [pc, #116]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d03a      	beq.n	8003530 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d019      	beq.n	80034f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034c2:	4b17      	ldr	r3, [pc, #92]	; (8003520 <HAL_RCC_OscConfig+0x274>)
 80034c4:	2201      	movs	r2, #1
 80034c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c8:	f7ff fbaa 	bl	8002c20 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034d0:	f7ff fba6 	bl	8002c20 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e15a      	b.n	8003798 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034e2:	4b0d      	ldr	r3, [pc, #52]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0f0      	beq.n	80034d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034ee:	2001      	movs	r0, #1
 80034f0:	f000 fada 	bl	8003aa8 <RCC_Delay>
 80034f4:	e01c      	b.n	8003530 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034f6:	4b0a      	ldr	r3, [pc, #40]	; (8003520 <HAL_RCC_OscConfig+0x274>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034fc:	f7ff fb90 	bl	8002c20 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003502:	e00f      	b.n	8003524 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003504:	f7ff fb8c 	bl	8002c20 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d908      	bls.n	8003524 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e140      	b.n	8003798 <HAL_RCC_OscConfig+0x4ec>
 8003516:	bf00      	nop
 8003518:	40021000 	.word	0x40021000
 800351c:	42420000 	.word	0x42420000
 8003520:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003524:	4b9e      	ldr	r3, [pc, #632]	; (80037a0 <HAL_RCC_OscConfig+0x4f4>)
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1e9      	bne.n	8003504 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 80a6 	beq.w	800368a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800353e:	2300      	movs	r3, #0
 8003540:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003542:	4b97      	ldr	r3, [pc, #604]	; (80037a0 <HAL_RCC_OscConfig+0x4f4>)
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10d      	bne.n	800356a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800354e:	4b94      	ldr	r3, [pc, #592]	; (80037a0 <HAL_RCC_OscConfig+0x4f4>)
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	4a93      	ldr	r2, [pc, #588]	; (80037a0 <HAL_RCC_OscConfig+0x4f4>)
 8003554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003558:	61d3      	str	r3, [r2, #28]
 800355a:	4b91      	ldr	r3, [pc, #580]	; (80037a0 <HAL_RCC_OscConfig+0x4f4>)
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003562:	60bb      	str	r3, [r7, #8]
 8003564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003566:	2301      	movs	r3, #1
 8003568:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356a:	4b8e      	ldr	r3, [pc, #568]	; (80037a4 <HAL_RCC_OscConfig+0x4f8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003572:	2b00      	cmp	r3, #0
 8003574:	d118      	bne.n	80035a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003576:	4b8b      	ldr	r3, [pc, #556]	; (80037a4 <HAL_RCC_OscConfig+0x4f8>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a8a      	ldr	r2, [pc, #552]	; (80037a4 <HAL_RCC_OscConfig+0x4f8>)
 800357c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003582:	f7ff fb4d 	bl	8002c20 <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003588:	e008      	b.n	800359c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800358a:	f7ff fb49 	bl	8002c20 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b64      	cmp	r3, #100	; 0x64
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e0fd      	b.n	8003798 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359c:	4b81      	ldr	r3, [pc, #516]	; (80037a4 <HAL_RCC_OscConfig+0x4f8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0f0      	beq.n	800358a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d106      	bne.n	80035be <HAL_RCC_OscConfig+0x312>
 80035b0:	4b7b      	ldr	r3, [pc, #492]	; (80037a0 <HAL_RCC_OscConfig+0x4f4>)
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	4a7a      	ldr	r2, [pc, #488]	; (80037a0 <HAL_RCC_OscConfig+0x4f4>)
 80035b6:	f043 0301 	orr.w	r3, r3, #1
 80035ba:	6213      	str	r3, [r2, #32]
 80035bc:	e02d      	b.n	800361a <HAL_RCC_OscConfig+0x36e>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10c      	bne.n	80035e0 <HAL_RCC_OscConfig+0x334>
 80035c6:	4b76      	ldr	r3, [pc, #472]	; (80037a0 <HAL_RCC_OscConfig+0x4f4>)
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	4a75      	ldr	r2, [pc, #468]	; (80037a0 <HAL_RCC_OscConfig+0x4f4>)
 80035cc:	f023 0301 	bic.w	r3, r3, #1
 80035d0:	6213      	str	r3, [r2, #32]
 80035d2:	4b73      	ldr	r3, [pc, #460]	; (80037a0 <HAL_RCC_OscConfig+0x4f4>)
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	4a72      	ldr	r2, [pc, #456]	; (80037a0 <HAL_RCC_OscConfig+0x4f4>)
 80035d8:	f023 0304 	bic.w	r3, r3, #4
 80035dc:	6213      	str	r3, [r2, #32]
 80035de:	e01c      	b.n	800361a <HAL_RCC_OscConfig+0x36e>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	2b05      	cmp	r3, #5
 80035e6:	d10c      	bne.n	8003602 <HAL_RCC_OscConfig+0x356>
 80035e8:	4b6d      	ldr	r3, [pc, #436]	; (80037a0 <HAL_RCC_OscConfig+0x4f4>)
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	4a6c      	ldr	r2, [pc, #432]	; (80037a0 <HAL_RCC_OscConfig+0x4f4>)
 80035ee:	f043 0304 	orr.w	r3, r3, #4
 80035f2:	6213      	str	r3, [r2, #32]
 80035f4:	4b6a      	ldr	r3, [pc, #424]	; (80037a0 <HAL_RCC_OscConfig+0x4f4>)
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	4a69      	ldr	r2, [pc, #420]	; (80037a0 <HAL_RCC_OscConfig+0x4f4>)
 80035fa:	f043 0301 	orr.w	r3, r3, #1
 80035fe:	6213      	str	r3, [r2, #32]
 8003600:	e00b      	b.n	800361a <HAL_RCC_OscConfig+0x36e>
 8003602:	4b67      	ldr	r3, [pc, #412]	; (80037a0 <HAL_RCC_OscConfig+0x4f4>)
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	4a66      	ldr	r2, [pc, #408]	; (80037a0 <HAL_RCC_OscConfig+0x4f4>)
 8003608:	f023 0301 	bic.w	r3, r3, #1
 800360c:	6213      	str	r3, [r2, #32]
 800360e:	4b64      	ldr	r3, [pc, #400]	; (80037a0 <HAL_RCC_OscConfig+0x4f4>)
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	4a63      	ldr	r2, [pc, #396]	; (80037a0 <HAL_RCC_OscConfig+0x4f4>)
 8003614:	f023 0304 	bic.w	r3, r3, #4
 8003618:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d015      	beq.n	800364e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003622:	f7ff fafd 	bl	8002c20 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003628:	e00a      	b.n	8003640 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800362a:	f7ff faf9 	bl	8002c20 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	f241 3288 	movw	r2, #5000	; 0x1388
 8003638:	4293      	cmp	r3, r2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e0ab      	b.n	8003798 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003640:	4b57      	ldr	r3, [pc, #348]	; (80037a0 <HAL_RCC_OscConfig+0x4f4>)
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0ee      	beq.n	800362a <HAL_RCC_OscConfig+0x37e>
 800364c:	e014      	b.n	8003678 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800364e:	f7ff fae7 	bl	8002c20 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003654:	e00a      	b.n	800366c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003656:	f7ff fae3 	bl	8002c20 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	f241 3288 	movw	r2, #5000	; 0x1388
 8003664:	4293      	cmp	r3, r2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e095      	b.n	8003798 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800366c:	4b4c      	ldr	r3, [pc, #304]	; (80037a0 <HAL_RCC_OscConfig+0x4f4>)
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1ee      	bne.n	8003656 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003678:	7dfb      	ldrb	r3, [r7, #23]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d105      	bne.n	800368a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800367e:	4b48      	ldr	r3, [pc, #288]	; (80037a0 <HAL_RCC_OscConfig+0x4f4>)
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	4a47      	ldr	r2, [pc, #284]	; (80037a0 <HAL_RCC_OscConfig+0x4f4>)
 8003684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003688:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 8081 	beq.w	8003796 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003694:	4b42      	ldr	r3, [pc, #264]	; (80037a0 <HAL_RCC_OscConfig+0x4f4>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f003 030c 	and.w	r3, r3, #12
 800369c:	2b08      	cmp	r3, #8
 800369e:	d061      	beq.n	8003764 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d146      	bne.n	8003736 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a8:	4b3f      	ldr	r3, [pc, #252]	; (80037a8 <HAL_RCC_OscConfig+0x4fc>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ae:	f7ff fab7 	bl	8002c20 <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b6:	f7ff fab3 	bl	8002c20 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e067      	b.n	8003798 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036c8:	4b35      	ldr	r3, [pc, #212]	; (80037a0 <HAL_RCC_OscConfig+0x4f4>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1f0      	bne.n	80036b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036dc:	d108      	bne.n	80036f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036de:	4b30      	ldr	r3, [pc, #192]	; (80037a0 <HAL_RCC_OscConfig+0x4f4>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	492d      	ldr	r1, [pc, #180]	; (80037a0 <HAL_RCC_OscConfig+0x4f4>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036f0:	4b2b      	ldr	r3, [pc, #172]	; (80037a0 <HAL_RCC_OscConfig+0x4f4>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a19      	ldr	r1, [r3, #32]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	430b      	orrs	r3, r1
 8003702:	4927      	ldr	r1, [pc, #156]	; (80037a0 <HAL_RCC_OscConfig+0x4f4>)
 8003704:	4313      	orrs	r3, r2
 8003706:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003708:	4b27      	ldr	r3, [pc, #156]	; (80037a8 <HAL_RCC_OscConfig+0x4fc>)
 800370a:	2201      	movs	r2, #1
 800370c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370e:	f7ff fa87 	bl	8002c20 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003716:	f7ff fa83 	bl	8002c20 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e037      	b.n	8003798 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003728:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <HAL_RCC_OscConfig+0x4f4>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0f0      	beq.n	8003716 <HAL_RCC_OscConfig+0x46a>
 8003734:	e02f      	b.n	8003796 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003736:	4b1c      	ldr	r3, [pc, #112]	; (80037a8 <HAL_RCC_OscConfig+0x4fc>)
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373c:	f7ff fa70 	bl	8002c20 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003744:	f7ff fa6c 	bl	8002c20 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e020      	b.n	8003798 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003756:	4b12      	ldr	r3, [pc, #72]	; (80037a0 <HAL_RCC_OscConfig+0x4f4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f0      	bne.n	8003744 <HAL_RCC_OscConfig+0x498>
 8003762:	e018      	b.n	8003796 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	69db      	ldr	r3, [r3, #28]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e013      	b.n	8003798 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003770:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <HAL_RCC_OscConfig+0x4f4>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	429a      	cmp	r2, r3
 8003782:	d106      	bne.n	8003792 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800378e:	429a      	cmp	r2, r3
 8003790:	d001      	beq.n	8003796 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e000      	b.n	8003798 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40021000 	.word	0x40021000
 80037a4:	40007000 	.word	0x40007000
 80037a8:	42420060 	.word	0x42420060

080037ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0d0      	b.n	8003962 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037c0:	4b6a      	ldr	r3, [pc, #424]	; (800396c <HAL_RCC_ClockConfig+0x1c0>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d910      	bls.n	80037f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ce:	4b67      	ldr	r3, [pc, #412]	; (800396c <HAL_RCC_ClockConfig+0x1c0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f023 0207 	bic.w	r2, r3, #7
 80037d6:	4965      	ldr	r1, [pc, #404]	; (800396c <HAL_RCC_ClockConfig+0x1c0>)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	4313      	orrs	r3, r2
 80037dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037de:	4b63      	ldr	r3, [pc, #396]	; (800396c <HAL_RCC_ClockConfig+0x1c0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d001      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e0b8      	b.n	8003962 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d020      	beq.n	800383e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003808:	4b59      	ldr	r3, [pc, #356]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	4a58      	ldr	r2, [pc, #352]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 800380e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003812:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0308 	and.w	r3, r3, #8
 800381c:	2b00      	cmp	r3, #0
 800381e:	d005      	beq.n	800382c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003820:	4b53      	ldr	r3, [pc, #332]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	4a52      	ldr	r2, [pc, #328]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 8003826:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800382a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800382c:	4b50      	ldr	r3, [pc, #320]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	494d      	ldr	r1, [pc, #308]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 800383a:	4313      	orrs	r3, r2
 800383c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d040      	beq.n	80038cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d107      	bne.n	8003862 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003852:	4b47      	ldr	r3, [pc, #284]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d115      	bne.n	800388a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e07f      	b.n	8003962 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b02      	cmp	r3, #2
 8003868:	d107      	bne.n	800387a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800386a:	4b41      	ldr	r3, [pc, #260]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d109      	bne.n	800388a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e073      	b.n	8003962 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800387a:	4b3d      	ldr	r3, [pc, #244]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e06b      	b.n	8003962 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800388a:	4b39      	ldr	r3, [pc, #228]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f023 0203 	bic.w	r2, r3, #3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	4936      	ldr	r1, [pc, #216]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 8003898:	4313      	orrs	r3, r2
 800389a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800389c:	f7ff f9c0 	bl	8002c20 <HAL_GetTick>
 80038a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a2:	e00a      	b.n	80038ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a4:	f7ff f9bc 	bl	8002c20 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e053      	b.n	8003962 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ba:	4b2d      	ldr	r3, [pc, #180]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f003 020c 	and.w	r2, r3, #12
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d1eb      	bne.n	80038a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038cc:	4b27      	ldr	r3, [pc, #156]	; (800396c <HAL_RCC_ClockConfig+0x1c0>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d210      	bcs.n	80038fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038da:	4b24      	ldr	r3, [pc, #144]	; (800396c <HAL_RCC_ClockConfig+0x1c0>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f023 0207 	bic.w	r2, r3, #7
 80038e2:	4922      	ldr	r1, [pc, #136]	; (800396c <HAL_RCC_ClockConfig+0x1c0>)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ea:	4b20      	ldr	r3, [pc, #128]	; (800396c <HAL_RCC_ClockConfig+0x1c0>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d001      	beq.n	80038fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e032      	b.n	8003962 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	d008      	beq.n	800391a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003908:	4b19      	ldr	r3, [pc, #100]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	4916      	ldr	r1, [pc, #88]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 8003916:	4313      	orrs	r3, r2
 8003918:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0308 	and.w	r3, r3, #8
 8003922:	2b00      	cmp	r3, #0
 8003924:	d009      	beq.n	800393a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003926:	4b12      	ldr	r3, [pc, #72]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	490e      	ldr	r1, [pc, #56]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 8003936:	4313      	orrs	r3, r2
 8003938:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800393a:	f000 f821 	bl	8003980 <HAL_RCC_GetSysClockFreq>
 800393e:	4601      	mov	r1, r0
 8003940:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	091b      	lsrs	r3, r3, #4
 8003946:	f003 030f 	and.w	r3, r3, #15
 800394a:	4a0a      	ldr	r2, [pc, #40]	; (8003974 <HAL_RCC_ClockConfig+0x1c8>)
 800394c:	5cd3      	ldrb	r3, [r2, r3]
 800394e:	fa21 f303 	lsr.w	r3, r1, r3
 8003952:	4a09      	ldr	r2, [pc, #36]	; (8003978 <HAL_RCC_ClockConfig+0x1cc>)
 8003954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003956:	4b09      	ldr	r3, [pc, #36]	; (800397c <HAL_RCC_ClockConfig+0x1d0>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff f91e 	bl	8002b9c <HAL_InitTick>

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40022000 	.word	0x40022000
 8003970:	40021000 	.word	0x40021000
 8003974:	08008c74 	.word	0x08008c74
 8003978:	20000000 	.word	0x20000000
 800397c:	20000004 	.word	0x20000004

08003980 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003980:	b490      	push	{r4, r7}
 8003982:	b08a      	sub	sp, #40	; 0x28
 8003984:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003986:	4b2a      	ldr	r3, [pc, #168]	; (8003a30 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003988:	1d3c      	adds	r4, r7, #4
 800398a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800398c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003990:	4b28      	ldr	r3, [pc, #160]	; (8003a34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	61fb      	str	r3, [r7, #28]
 800399a:	2300      	movs	r3, #0
 800399c:	61bb      	str	r3, [r7, #24]
 800399e:	2300      	movs	r3, #0
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24
 80039a2:	2300      	movs	r3, #0
 80039a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039aa:	4b23      	ldr	r3, [pc, #140]	; (8003a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f003 030c 	and.w	r3, r3, #12
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d002      	beq.n	80039c0 <HAL_RCC_GetSysClockFreq+0x40>
 80039ba:	2b08      	cmp	r3, #8
 80039bc:	d003      	beq.n	80039c6 <HAL_RCC_GetSysClockFreq+0x46>
 80039be:	e02d      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039c0:	4b1e      	ldr	r3, [pc, #120]	; (8003a3c <HAL_RCC_GetSysClockFreq+0xbc>)
 80039c2:	623b      	str	r3, [r7, #32]
      break;
 80039c4:	e02d      	b.n	8003a22 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	0c9b      	lsrs	r3, r3, #18
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80039d2:	4413      	add	r3, r2
 80039d4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80039d8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d013      	beq.n	8003a0c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039e4:	4b14      	ldr	r3, [pc, #80]	; (8003a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	0c5b      	lsrs	r3, r3, #17
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80039f2:	4413      	add	r3, r2
 80039f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80039f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	4a0f      	ldr	r2, [pc, #60]	; (8003a3c <HAL_RCC_GetSysClockFreq+0xbc>)
 80039fe:	fb02 f203 	mul.w	r2, r2, r3
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a08:	627b      	str	r3, [r7, #36]	; 0x24
 8003a0a:	e004      	b.n	8003a16 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	4a0c      	ldr	r2, [pc, #48]	; (8003a40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a10:	fb02 f303 	mul.w	r3, r2, r3
 8003a14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	623b      	str	r3, [r7, #32]
      break;
 8003a1a:	e002      	b.n	8003a22 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a1c:	4b07      	ldr	r3, [pc, #28]	; (8003a3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a1e:	623b      	str	r3, [r7, #32]
      break;
 8003a20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a22:	6a3b      	ldr	r3, [r7, #32]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3728      	adds	r7, #40	; 0x28
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bc90      	pop	{r4, r7}
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	08008c48 	.word	0x08008c48
 8003a34:	08008c58 	.word	0x08008c58
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	007a1200 	.word	0x007a1200
 8003a40:	003d0900 	.word	0x003d0900

08003a44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a48:	4b02      	ldr	r3, [pc, #8]	; (8003a54 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bc80      	pop	{r7}
 8003a52:	4770      	bx	lr
 8003a54:	20000000 	.word	0x20000000

08003a58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a5c:	f7ff fff2 	bl	8003a44 <HAL_RCC_GetHCLKFreq>
 8003a60:	4601      	mov	r1, r0
 8003a62:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	0a1b      	lsrs	r3, r3, #8
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	4a03      	ldr	r2, [pc, #12]	; (8003a7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a6e:	5cd3      	ldrb	r3, [r2, r3]
 8003a70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	08008c84 	.word	0x08008c84

08003a80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a84:	f7ff ffde 	bl	8003a44 <HAL_RCC_GetHCLKFreq>
 8003a88:	4601      	mov	r1, r0
 8003a8a:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	0adb      	lsrs	r3, r3, #11
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	4a03      	ldr	r2, [pc, #12]	; (8003aa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a96:	5cd3      	ldrb	r3, [r2, r3]
 8003a98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	08008c84 	.word	0x08008c84

08003aa8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ab0:	4b0a      	ldr	r3, [pc, #40]	; (8003adc <RCC_Delay+0x34>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a0a      	ldr	r2, [pc, #40]	; (8003ae0 <RCC_Delay+0x38>)
 8003ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aba:	0a5b      	lsrs	r3, r3, #9
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	fb02 f303 	mul.w	r3, r2, r3
 8003ac2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ac4:	bf00      	nop
  }
  while (Delay --);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	1e5a      	subs	r2, r3, #1
 8003aca:	60fa      	str	r2, [r7, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1f9      	bne.n	8003ac4 <RCC_Delay+0x1c>
}
 8003ad0:	bf00      	nop
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bc80      	pop	{r7}
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	20000000 	.word	0x20000000
 8003ae0:	10624dd3 	.word	0x10624dd3

08003ae4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	613b      	str	r3, [r7, #16]
 8003af0:	2300      	movs	r3, #0
 8003af2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d07d      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003b00:	2300      	movs	r3, #0
 8003b02:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b04:	4b4f      	ldr	r3, [pc, #316]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10d      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b10:	4b4c      	ldr	r3, [pc, #304]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	4a4b      	ldr	r2, [pc, #300]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b1a:	61d3      	str	r3, [r2, #28]
 8003b1c:	4b49      	ldr	r3, [pc, #292]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b24:	60bb      	str	r3, [r7, #8]
 8003b26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b2c:	4b46      	ldr	r3, [pc, #280]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d118      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b38:	4b43      	ldr	r3, [pc, #268]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a42      	ldr	r2, [pc, #264]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b44:	f7ff f86c 	bl	8002c20 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4a:	e008      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b4c:	f7ff f868 	bl	8002c20 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b64      	cmp	r3, #100	; 0x64
 8003b58:	d901      	bls.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e06d      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5e:	4b3a      	ldr	r3, [pc, #232]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0f0      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b6a:	4b36      	ldr	r3, [pc, #216]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b72:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d02e      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d027      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b88:	4b2e      	ldr	r3, [pc, #184]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b90:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b92:	4b2e      	ldr	r3, [pc, #184]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b94:	2201      	movs	r2, #1
 8003b96:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b98:	4b2c      	ldr	r3, [pc, #176]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b9e:	4a29      	ldr	r2, [pc, #164]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d014      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bae:	f7ff f837 	bl	8002c20 <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb4:	e00a      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb6:	f7ff f833 	bl	8002c20 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e036      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bcc:	4b1d      	ldr	r3, [pc, #116]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0ee      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bd8:	4b1a      	ldr	r3, [pc, #104]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	4917      	ldr	r1, [pc, #92]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bea:	7dfb      	ldrb	r3, [r7, #23]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d105      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bf0:	4b14      	ldr	r3, [pc, #80]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	4a13      	ldr	r2, [pc, #76]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d008      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c08:	4b0e      	ldr	r3, [pc, #56]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	490b      	ldr	r1, [pc, #44]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0310 	and.w	r3, r3, #16
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d008      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c26:	4b07      	ldr	r3, [pc, #28]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	4904      	ldr	r1, [pc, #16]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40021000 	.word	0x40021000
 8003c48:	40007000 	.word	0x40007000
 8003c4c:	42420440 	.word	0x42420440

08003c50 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c50:	b590      	push	{r4, r7, lr}
 8003c52:	b08d      	sub	sp, #52	; 0x34
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c58:	4b55      	ldr	r3, [pc, #340]	; (8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003c5a:	f107 040c 	add.w	r4, r7, #12
 8003c5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c64:	4b53      	ldr	r3, [pc, #332]	; (8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6e:	2300      	movs	r3, #0
 8003c70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c72:	2300      	movs	r3, #0
 8003c74:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	61fb      	str	r3, [r7, #28]
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d07f      	beq.n	8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003c84:	2b10      	cmp	r3, #16
 8003c86:	d002      	beq.n	8003c8e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d048      	beq.n	8003d1e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003c8c:	e08b      	b.n	8003da6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8003c8e:	4b4a      	ldr	r3, [pc, #296]	; (8003db8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003c94:	4b48      	ldr	r3, [pc, #288]	; (8003db8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d07f      	beq.n	8003da0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	0c9b      	lsrs	r3, r3, #18
 8003ca4:	f003 030f 	and.w	r3, r3, #15
 8003ca8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003cac:	4413      	add	r3, r2
 8003cae:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003cb2:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d018      	beq.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cbe:	4b3e      	ldr	r3, [pc, #248]	; (8003db8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	0c5b      	lsrs	r3, r3, #17
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003ccc:	4413      	add	r3, r2
 8003cce:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00d      	beq.n	8003cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003cde:	4a37      	ldr	r2, [pc, #220]	; (8003dbc <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	fb02 f303 	mul.w	r3, r2, r3
 8003cec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cee:	e004      	b.n	8003cfa <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	4a33      	ldr	r2, [pc, #204]	; (8003dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003cf4:	fb02 f303 	mul.w	r3, r2, r3
 8003cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003cfa:	4b2f      	ldr	r3, [pc, #188]	; (8003db8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d06:	d102      	bne.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d0c:	e048      	b.n	8003da0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8003d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	4a2c      	ldr	r2, [pc, #176]	; (8003dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003d14:	fba2 2303 	umull	r2, r3, r2, r3
 8003d18:	085b      	lsrs	r3, r3, #1
 8003d1a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d1c:	e040      	b.n	8003da0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8003d1e:	4b26      	ldr	r3, [pc, #152]	; (8003db8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d2e:	d108      	bne.n	8003d42 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8003d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d40:	e01f      	b.n	8003d82 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d4c:	d109      	bne.n	8003d62 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8003d4e:	4b1a      	ldr	r3, [pc, #104]	; (8003db8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8003d5a:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d60:	e00f      	b.n	8003d82 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d6c:	d11a      	bne.n	8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003d6e:	4b12      	ldr	r3, [pc, #72]	; (8003db8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d014      	beq.n	8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8003d7a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003d7e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d80:	e010      	b.n	8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003d82:	e00f      	b.n	8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003d84:	f7ff fe7c 	bl	8003a80 <HAL_RCC_GetPCLK2Freq>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	0b9b      	lsrs	r3, r3, #14
 8003d90:	f003 0303 	and.w	r3, r3, #3
 8003d94:	3301      	adds	r3, #1
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d9e:	e002      	b.n	8003da6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003da0:	bf00      	nop
 8003da2:	e000      	b.n	8003da6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003da4:	bf00      	nop
    }
  }
  return (frequency);
 8003da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3734      	adds	r7, #52	; 0x34
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd90      	pop	{r4, r7, pc}
 8003db0:	08008c5c 	.word	0x08008c5c
 8003db4:	08008c6c 	.word	0x08008c6c
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	007a1200 	.word	0x007a1200
 8003dc0:	003d0900 	.word	0x003d0900
 8003dc4:	aaaaaaab 	.word	0xaaaaaaab

08003dc8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e084      	b.n	8003ee8 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	7c5b      	ldrb	r3, [r3, #17]
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d105      	bne.n	8003df4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7fe fd32 	bl	8002858 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2202      	movs	r2, #2
 8003df8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 faf4 	bl	80043e8 <HAL_RTC_WaitForSynchro>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d004      	beq.n	8003e10 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2204      	movs	r2, #4
 8003e0a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e06b      	b.n	8003ee8 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 fbad 	bl	8004570 <RTC_EnterInitMode>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d004      	beq.n	8003e26 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2204      	movs	r2, #4
 8003e20:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e060      	b.n	8003ee8 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0207 	bic.w	r2, r2, #7
 8003e34:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d005      	beq.n	8003e4a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003e3e:	4b2c      	ldr	r3, [pc, #176]	; (8003ef0 <HAL_RTC_Init+0x128>)
 8003e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e42:	4a2b      	ldr	r2, [pc, #172]	; (8003ef0 <HAL_RTC_Init+0x128>)
 8003e44:	f023 0301 	bic.w	r3, r3, #1
 8003e48:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003e4a:	4b29      	ldr	r3, [pc, #164]	; (8003ef0 <HAL_RTC_Init+0x128>)
 8003e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	4926      	ldr	r1, [pc, #152]	; (8003ef0 <HAL_RTC_Init+0x128>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e64:	d003      	beq.n	8003e6e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	e00e      	b.n	8003e8c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003e6e:	2001      	movs	r0, #1
 8003e70:	f7ff feee 	bl	8003c50 <HAL_RCCEx_GetPeriphCLKFreq>
 8003e74:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d104      	bne.n	8003e86 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2204      	movs	r2, #4
 8003e80:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e030      	b.n	8003ee8 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f023 010f 	bic.w	r1, r3, #15
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	0c1a      	lsrs	r2, r3, #16
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	0c1b      	lsrs	r3, r3, #16
 8003eaa:	041b      	lsls	r3, r3, #16
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	b291      	uxth	r1, r2
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6812      	ldr	r2, [r2, #0]
 8003eb4:	430b      	orrs	r3, r1
 8003eb6:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 fb81 	bl	80045c0 <RTC_ExitInitMode>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d004      	beq.n	8003ece <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2204      	movs	r2, #4
 8003ec8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e00c      	b.n	8003ee8 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
  }
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40006c00 	.word	0x40006c00

08003ef4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003ef4:	b590      	push	{r4, r7, lr}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	2300      	movs	r3, #0
 8003f06:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <HAL_RTC_SetTime+0x20>
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e080      	b.n	800401a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	7c1b      	ldrb	r3, [r3, #16]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d101      	bne.n	8003f24 <HAL_RTC_SetTime+0x30>
 8003f20:	2302      	movs	r3, #2
 8003f22:	e07a      	b.n	800401a <HAL_RTC_SetTime+0x126>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2201      	movs	r2, #1
 8003f28:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2202      	movs	r2, #2
 8003f2e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d113      	bne.n	8003f5e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003f40:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	785b      	ldrb	r3, [r3, #1]
 8003f48:	4619      	mov	r1, r3
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	011b      	lsls	r3, r3, #4
 8003f4e:	1a5b      	subs	r3, r3, r1
 8003f50:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003f52:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003f58:	4413      	add	r3, r2
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	e01e      	b.n	8003f9c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 fb71 	bl	800464a <RTC_Bcd2ToByte>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003f70:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	785b      	ldrb	r3, [r3, #1]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 fb66 	bl	800464a <RTC_Bcd2ToByte>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	461a      	mov	r2, r3
 8003f82:	4613      	mov	r3, r2
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	1a9b      	subs	r3, r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003f8a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	789b      	ldrb	r3, [r3, #2]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 fb5a 	bl	800464a <RTC_Bcd2ToByte>
 8003f96:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003f98:	4423      	add	r3, r4
 8003f9a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003f9c:	6979      	ldr	r1, [r7, #20]
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 fa7f 	bl	80044a2 <RTC_WriteTimeCounter>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d007      	beq.n	8003fba <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2204      	movs	r2, #4
 8003fae:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e02f      	b.n	800401a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0205 	bic.w	r2, r2, #5
 8003fc8:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 fa90 	bl	80044f0 <RTC_ReadAlarmCounter>
 8003fd0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd8:	d018      	beq.n	800400c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d214      	bcs.n	800400c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003fe8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003fec:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003fee:	6939      	ldr	r1, [r7, #16]
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 fa96 	bl	8004522 <RTC_WriteAlarmCounter>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d007      	beq.n	800400c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2204      	movs	r2, #4
 8004000:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e006      	b.n	800401a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2201      	movs	r2, #1
 8004010:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004018:	2300      	movs	r3, #0
  }
}
 800401a:	4618      	mov	r0, r3
 800401c:	371c      	adds	r7, #28
 800401e:	46bd      	mov	sp, r7
 8004020:	bd90      	pop	{r4, r7, pc}
	...

08004024 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	61bb      	str	r3, [r7, #24]
 8004034:	2300      	movs	r3, #0
 8004036:	61fb      	str	r3, [r7, #28]
 8004038:	2300      	movs	r3, #0
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	2300      	movs	r3, #0
 800403e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <HAL_RTC_GetTime+0x28>
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e0b5      	b.n	80041bc <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f003 0304 	and.w	r3, r3, #4
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e0ac      	b.n	80041bc <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 f9ed 	bl	8004442 <RTC_ReadTimeCounter>
 8004068:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	4a55      	ldr	r2, [pc, #340]	; (80041c4 <HAL_RTC_GetTime+0x1a0>)
 800406e:	fba2 2303 	umull	r2, r3, r2, r3
 8004072:	0adb      	lsrs	r3, r3, #11
 8004074:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	4b52      	ldr	r3, [pc, #328]	; (80041c4 <HAL_RTC_GetTime+0x1a0>)
 800407a:	fba3 1302 	umull	r1, r3, r3, r2
 800407e:	0adb      	lsrs	r3, r3, #11
 8004080:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004084:	fb01 f303 	mul.w	r3, r1, r3
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	4a4f      	ldr	r2, [pc, #316]	; (80041c8 <HAL_RTC_GetTime+0x1a4>)
 800408c:	fba2 2303 	umull	r2, r3, r2, r3
 8004090:	095b      	lsrs	r3, r3, #5
 8004092:	b2da      	uxtb	r2, r3
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	4a4a      	ldr	r2, [pc, #296]	; (80041c4 <HAL_RTC_GetTime+0x1a0>)
 800409c:	fba2 1203 	umull	r1, r2, r2, r3
 80040a0:	0ad2      	lsrs	r2, r2, #11
 80040a2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80040a6:	fb01 f202 	mul.w	r2, r1, r2
 80040aa:	1a9a      	subs	r2, r3, r2
 80040ac:	4b46      	ldr	r3, [pc, #280]	; (80041c8 <HAL_RTC_GetTime+0x1a4>)
 80040ae:	fba3 1302 	umull	r1, r3, r3, r2
 80040b2:	0959      	lsrs	r1, r3, #5
 80040b4:	460b      	mov	r3, r1
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	1a5b      	subs	r3, r3, r1
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	1ad1      	subs	r1, r2, r3
 80040be:	b2ca      	uxtb	r2, r1
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	2b17      	cmp	r3, #23
 80040c8:	d955      	bls.n	8004176 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	4a3f      	ldr	r2, [pc, #252]	; (80041cc <HAL_RTC_GetTime+0x1a8>)
 80040ce:	fba2 2303 	umull	r2, r3, r2, r3
 80040d2:	091b      	lsrs	r3, r3, #4
 80040d4:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80040d6:	6939      	ldr	r1, [r7, #16]
 80040d8:	4b3c      	ldr	r3, [pc, #240]	; (80041cc <HAL_RTC_GetTime+0x1a8>)
 80040da:	fba3 2301 	umull	r2, r3, r3, r1
 80040de:	091a      	lsrs	r2, r3, #4
 80040e0:	4613      	mov	r3, r2
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	4413      	add	r3, r2
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	1aca      	subs	r2, r1, r3
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 f9fd 	bl	80044f0 <RTC_ReadAlarmCounter>
 80040f6:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fe:	d008      	beq.n	8004112 <HAL_RTC_GetTime+0xee>
 8004100:	69fa      	ldr	r2, [r7, #28]
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	429a      	cmp	r2, r3
 8004106:	d904      	bls.n	8004112 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8004108:	69fa      	ldr	r2, [r7, #28]
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	61fb      	str	r3, [r7, #28]
 8004110:	e002      	b.n	8004118 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8004112:	f04f 33ff 	mov.w	r3, #4294967295
 8004116:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	4a2d      	ldr	r2, [pc, #180]	; (80041d0 <HAL_RTC_GetTime+0x1ac>)
 800411c:	fb02 f303 	mul.w	r3, r2, r3
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004126:	69b9      	ldr	r1, [r7, #24]
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f000 f9ba 	bl	80044a2 <RTC_WriteTimeCounter>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e041      	b.n	80041bc <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413e:	d00c      	beq.n	800415a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8004140:	69fa      	ldr	r2, [r7, #28]
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	4413      	add	r3, r2
 8004146:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004148:	69f9      	ldr	r1, [r7, #28]
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 f9e9 	bl	8004522 <RTC_WriteAlarmCounter>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e030      	b.n	80041bc <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800415a:	69f9      	ldr	r1, [r7, #28]
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 f9e0 	bl	8004522 <RTC_WriteAlarmCounter>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e027      	b.n	80041bc <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 800416c:	6979      	ldr	r1, [r7, #20]
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 fa88 	bl	8004684 <RTC_DateUpdate>
 8004174:	e003      	b.n	800417e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	b2da      	uxtb	r2, r3
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d01a      	beq.n	80041ba <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	4618      	mov	r0, r3
 800418a:	f000 fa41 	bl	8004610 <RTC_ByteToBcd2>
 800418e:	4603      	mov	r3, r0
 8004190:	461a      	mov	r2, r3
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	785b      	ldrb	r3, [r3, #1]
 800419a:	4618      	mov	r0, r3
 800419c:	f000 fa38 	bl	8004610 <RTC_ByteToBcd2>
 80041a0:	4603      	mov	r3, r0
 80041a2:	461a      	mov	r2, r3
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	789b      	ldrb	r3, [r3, #2]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 fa2f 	bl	8004610 <RTC_ByteToBcd2>
 80041b2:	4603      	mov	r3, r0
 80041b4:	461a      	mov	r2, r3
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3720      	adds	r7, #32
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	91a2b3c5 	.word	0x91a2b3c5
 80041c8:	88888889 	.word	0x88888889
 80041cc:	aaaaaaab 	.word	0xaaaaaaab
 80041d0:	00015180 	.word	0x00015180

080041d4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b088      	sub	sp, #32
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	61fb      	str	r3, [r7, #28]
 80041e4:	2300      	movs	r3, #0
 80041e6:	61bb      	str	r3, [r7, #24]
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d002      	beq.n	80041f8 <HAL_RTC_SetDate+0x24>
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e097      	b.n	800432c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	7c1b      	ldrb	r3, [r3, #16]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <HAL_RTC_SetDate+0x34>
 8004204:	2302      	movs	r3, #2
 8004206:	e091      	b.n	800432c <HAL_RTC_SetDate+0x158>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2201      	movs	r2, #1
 800420c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2202      	movs	r2, #2
 8004212:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10c      	bne.n	8004234 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	78da      	ldrb	r2, [r3, #3]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	785a      	ldrb	r2, [r3, #1]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	789a      	ldrb	r2, [r3, #2]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	739a      	strb	r2, [r3, #14]
 8004232:	e01a      	b.n	800426a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	78db      	ldrb	r3, [r3, #3]
 8004238:	4618      	mov	r0, r3
 800423a:	f000 fa06 	bl	800464a <RTC_Bcd2ToByte>
 800423e:	4603      	mov	r3, r0
 8004240:	461a      	mov	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	785b      	ldrb	r3, [r3, #1]
 800424a:	4618      	mov	r0, r3
 800424c:	f000 f9fd 	bl	800464a <RTC_Bcd2ToByte>
 8004250:	4603      	mov	r3, r0
 8004252:	461a      	mov	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	789b      	ldrb	r3, [r3, #2]
 800425c:	4618      	mov	r0, r3
 800425e:	f000 f9f4 	bl	800464a <RTC_Bcd2ToByte>
 8004262:	4603      	mov	r3, r0
 8004264:	461a      	mov	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	7bdb      	ldrb	r3, [r3, #15]
 800426e:	4618      	mov	r0, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	7b59      	ldrb	r1, [r3, #13]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	7b9b      	ldrb	r3, [r3, #14]
 8004278:	461a      	mov	r2, r3
 800427a:	f000 fadf 	bl	800483c <RTC_WeekDayNum>
 800427e:	4603      	mov	r3, r0
 8004280:	461a      	mov	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	7b1a      	ldrb	r2, [r3, #12]
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 f8d7 	bl	8004442 <RTC_ReadTimeCounter>
 8004294:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	4a26      	ldr	r2, [pc, #152]	; (8004334 <HAL_RTC_SetDate+0x160>)
 800429a:	fba2 2303 	umull	r2, r3, r2, r3
 800429e:	0adb      	lsrs	r3, r3, #11
 80042a0:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2b18      	cmp	r3, #24
 80042a6:	d93a      	bls.n	800431e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	4a23      	ldr	r2, [pc, #140]	; (8004338 <HAL_RTC_SetDate+0x164>)
 80042ac:	fba2 2303 	umull	r2, r3, r2, r3
 80042b0:	091b      	lsrs	r3, r3, #4
 80042b2:	4a22      	ldr	r2, [pc, #136]	; (800433c <HAL_RTC_SetDate+0x168>)
 80042b4:	fb02 f303 	mul.w	r3, r2, r3
 80042b8:	69fa      	ldr	r2, [r7, #28]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80042be:	69f9      	ldr	r1, [r7, #28]
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 f8ee 	bl	80044a2 <RTC_WriteTimeCounter>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d007      	beq.n	80042dc <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2204      	movs	r2, #4
 80042d0:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e027      	b.n	800432c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f000 f907 	bl	80044f0 <RTC_ReadAlarmCounter>
 80042e2:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ea:	d018      	beq.n	800431e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d214      	bcs.n	800431e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80042fa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80042fe:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004300:	69b9      	ldr	r1, [r7, #24]
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 f90d 	bl	8004522 <RTC_WriteAlarmCounter>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d007      	beq.n	800431e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2204      	movs	r2, #4
 8004312:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e006      	b.n	800432c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2201      	movs	r2, #1
 8004322:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3720      	adds	r7, #32
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	91a2b3c5 	.word	0x91a2b3c5
 8004338:	aaaaaaab 	.word	0xaaaaaaab
 800433c:	00015180 	.word	0x00015180

08004340 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 800434c:	f107 0314 	add.w	r3, r7, #20
 8004350:	2100      	movs	r1, #0
 8004352:	460a      	mov	r2, r1
 8004354:	801a      	strh	r2, [r3, #0]
 8004356:	460a      	mov	r2, r1
 8004358:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <HAL_RTC_GetDate+0x26>
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e03a      	b.n	80043e0 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800436a:	f107 0314 	add.w	r3, r7, #20
 800436e:	2200      	movs	r2, #0
 8004370:	4619      	mov	r1, r3
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f7ff fe56 	bl	8004024 <HAL_RTC_GetTime>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e02e      	b.n	80043e0 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	7b1a      	ldrb	r2, [r3, #12]
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	7bda      	ldrb	r2, [r3, #15]
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	7b5a      	ldrb	r2, [r3, #13]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	7b9a      	ldrb	r2, [r3, #14]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d01a      	beq.n	80043de <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	78db      	ldrb	r3, [r3, #3]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 f92f 	bl	8004610 <RTC_ByteToBcd2>
 80043b2:	4603      	mov	r3, r0
 80043b4:	461a      	mov	r2, r3
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	785b      	ldrb	r3, [r3, #1]
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 f926 	bl	8004610 <RTC_ByteToBcd2>
 80043c4:	4603      	mov	r3, r0
 80043c6:	461a      	mov	r2, r3
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	789b      	ldrb	r3, [r3, #2]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 f91d 	bl	8004610 <RTC_ByteToBcd2>
 80043d6:	4603      	mov	r3, r0
 80043d8:	461a      	mov	r2, r3
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e01d      	b.n	800443a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0208 	bic.w	r2, r2, #8
 800440c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800440e:	f7fe fc07 	bl	8002c20 <HAL_GetTick>
 8004412:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004414:	e009      	b.n	800442a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004416:	f7fe fc03 	bl	8002c20 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004424:	d901      	bls.n	800442a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e007      	b.n	800443a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f003 0308 	and.w	r3, r3, #8
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0ee      	beq.n	8004416 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004442:	b480      	push	{r7}
 8004444:	b087      	sub	sp, #28
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800444a:	2300      	movs	r3, #0
 800444c:	827b      	strh	r3, [r7, #18]
 800444e:	2300      	movs	r3, #0
 8004450:	823b      	strh	r3, [r7, #16]
 8004452:	2300      	movs	r3, #0
 8004454:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004472:	8a7a      	ldrh	r2, [r7, #18]
 8004474:	8a3b      	ldrh	r3, [r7, #16]
 8004476:	429a      	cmp	r2, r3
 8004478:	d008      	beq.n	800448c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800447a:	8a3b      	ldrh	r3, [r7, #16]
 800447c:	041a      	lsls	r2, r3, #16
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	69db      	ldr	r3, [r3, #28]
 8004484:	b29b      	uxth	r3, r3
 8004486:	4313      	orrs	r3, r2
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	e004      	b.n	8004496 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800448c:	8a7b      	ldrh	r3, [r7, #18]
 800448e:	041a      	lsls	r2, r3, #16
 8004490:	89fb      	ldrh	r3, [r7, #14]
 8004492:	4313      	orrs	r3, r2
 8004494:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004496:	697b      	ldr	r3, [r7, #20]
}
 8004498:	4618      	mov	r0, r3
 800449a:	371c      	adds	r7, #28
 800449c:	46bd      	mov	sp, r7
 800449e:	bc80      	pop	{r7}
 80044a0:	4770      	bx	lr

080044a2 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b084      	sub	sp, #16
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
 80044aa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044ac:	2300      	movs	r3, #0
 80044ae:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 f85d 	bl	8004570 <RTC_EnterInitMode>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d002      	beq.n	80044c2 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	73fb      	strb	r3, [r7, #15]
 80044c0:	e011      	b.n	80044e6 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	0c12      	lsrs	r2, r2, #16
 80044ca:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	b292      	uxth	r2, r2
 80044d4:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f872 	bl	80045c0 <RTC_ExitInitMode>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	81fb      	strh	r3, [r7, #14]
 80044fc:	2300      	movs	r3, #0
 80044fe:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004510:	89fb      	ldrh	r3, [r7, #14]
 8004512:	041a      	lsls	r2, r3, #16
 8004514:	89bb      	ldrh	r3, [r7, #12]
 8004516:	4313      	orrs	r3, r2
}
 8004518:	4618      	mov	r0, r3
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	bc80      	pop	{r7}
 8004520:	4770      	bx	lr

08004522 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
 800452a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800452c:	2300      	movs	r3, #0
 800452e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f81d 	bl	8004570 <RTC_EnterInitMode>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d002      	beq.n	8004542 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	73fb      	strb	r3, [r7, #15]
 8004540:	e011      	b.n	8004566 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	0c12      	lsrs	r2, r2, #16
 800454a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	b292      	uxth	r2, r2
 8004554:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f832 	bl	80045c0 <RTC_ExitInitMode>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004566:	7bfb      	ldrb	r3, [r7, #15]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004578:	2300      	movs	r3, #0
 800457a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800457c:	f7fe fb50 	bl	8002c20 <HAL_GetTick>
 8004580:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004582:	e009      	b.n	8004598 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004584:	f7fe fb4c 	bl	8002c20 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004592:	d901      	bls.n	8004598 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e00f      	b.n	80045b8 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f003 0320 	and.w	r3, r3, #32
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0ee      	beq.n	8004584 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f042 0210 	orr.w	r2, r2, #16
 80045b4:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045c8:	2300      	movs	r3, #0
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0210 	bic.w	r2, r2, #16
 80045da:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80045dc:	f7fe fb20 	bl	8002c20 <HAL_GetTick>
 80045e0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80045e2:	e009      	b.n	80045f8 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80045e4:	f7fe fb1c 	bl	8002c20 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045f2:	d901      	bls.n	80045f8 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e007      	b.n	8004608 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0ee      	beq.n	80045e4 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	4603      	mov	r3, r0
 8004618:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800461e:	e005      	b.n	800462c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	3301      	adds	r3, #1
 8004624:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004626:	79fb      	ldrb	r3, [r7, #7]
 8004628:	3b0a      	subs	r3, #10
 800462a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800462c:	79fb      	ldrb	r3, [r7, #7]
 800462e:	2b09      	cmp	r3, #9
 8004630:	d8f6      	bhi.n	8004620 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	b2db      	uxtb	r3, r3
 8004636:	011b      	lsls	r3, r3, #4
 8004638:	b2da      	uxtb	r2, r3
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	4313      	orrs	r3, r2
 800463e:	b2db      	uxtb	r3, r3
}
 8004640:	4618      	mov	r0, r3
 8004642:	3714      	adds	r7, #20
 8004644:	46bd      	mov	sp, r7
 8004646:	bc80      	pop	{r7}
 8004648:	4770      	bx	lr

0800464a <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800464a:	b480      	push	{r7}
 800464c:	b085      	sub	sp, #20
 800464e:	af00      	add	r7, sp, #0
 8004650:	4603      	mov	r3, r0
 8004652:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004658:	79fb      	ldrb	r3, [r7, #7]
 800465a:	091b      	lsrs	r3, r3, #4
 800465c:	b2db      	uxtb	r3, r3
 800465e:	461a      	mov	r2, r3
 8004660:	4613      	mov	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800466a:	79fb      	ldrb	r3, [r7, #7]
 800466c:	f003 030f 	and.w	r3, r3, #15
 8004670:	b2da      	uxtb	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	b2db      	uxtb	r3, r3
 8004676:	4413      	add	r3, r2
 8004678:	b2db      	uxtb	r3, r3
}
 800467a:	4618      	mov	r0, r3
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	bc80      	pop	{r7}
 8004682:	4770      	bx	lr

08004684 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800468e:	2300      	movs	r3, #0
 8004690:	617b      	str	r3, [r7, #20]
 8004692:	2300      	movs	r3, #0
 8004694:	613b      	str	r3, [r7, #16]
 8004696:	2300      	movs	r3, #0
 8004698:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800469a:	2300      	movs	r3, #0
 800469c:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	7bdb      	ldrb	r3, [r3, #15]
 80046a2:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	7b5b      	ldrb	r3, [r3, #13]
 80046a8:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	7b9b      	ldrb	r3, [r3, #14]
 80046ae:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80046b0:	2300      	movs	r3, #0
 80046b2:	60bb      	str	r3, [r7, #8]
 80046b4:	e06f      	b.n	8004796 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d011      	beq.n	80046e0 <RTC_DateUpdate+0x5c>
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	2b03      	cmp	r3, #3
 80046c0:	d00e      	beq.n	80046e0 <RTC_DateUpdate+0x5c>
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	2b05      	cmp	r3, #5
 80046c6:	d00b      	beq.n	80046e0 <RTC_DateUpdate+0x5c>
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	2b07      	cmp	r3, #7
 80046cc:	d008      	beq.n	80046e0 <RTC_DateUpdate+0x5c>
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	d005      	beq.n	80046e0 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	2b0a      	cmp	r3, #10
 80046d8:	d002      	beq.n	80046e0 <RTC_DateUpdate+0x5c>
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	2b0c      	cmp	r3, #12
 80046de:	d117      	bne.n	8004710 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2b1e      	cmp	r3, #30
 80046e4:	d803      	bhi.n	80046ee <RTC_DateUpdate+0x6a>
      {
        day++;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	3301      	adds	r3, #1
 80046ea:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80046ec:	e050      	b.n	8004790 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	2b0c      	cmp	r3, #12
 80046f2:	d005      	beq.n	8004700 <RTC_DateUpdate+0x7c>
        {
          month++;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	3301      	adds	r3, #1
 80046f8:	613b      	str	r3, [r7, #16]
          day = 1U;
 80046fa:	2301      	movs	r3, #1
 80046fc:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80046fe:	e047      	b.n	8004790 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8004700:	2301      	movs	r3, #1
 8004702:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004704:	2301      	movs	r3, #1
 8004706:	60fb      	str	r3, [r7, #12]
          year++;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	3301      	adds	r3, #1
 800470c:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800470e:	e03f      	b.n	8004790 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	2b04      	cmp	r3, #4
 8004714:	d008      	beq.n	8004728 <RTC_DateUpdate+0xa4>
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	2b06      	cmp	r3, #6
 800471a:	d005      	beq.n	8004728 <RTC_DateUpdate+0xa4>
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	2b09      	cmp	r3, #9
 8004720:	d002      	beq.n	8004728 <RTC_DateUpdate+0xa4>
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	2b0b      	cmp	r3, #11
 8004726:	d10c      	bne.n	8004742 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2b1d      	cmp	r3, #29
 800472c:	d803      	bhi.n	8004736 <RTC_DateUpdate+0xb2>
      {
        day++;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	3301      	adds	r3, #1
 8004732:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004734:	e02c      	b.n	8004790 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	3301      	adds	r3, #1
 800473a:	613b      	str	r3, [r7, #16]
        day = 1U;
 800473c:	2301      	movs	r3, #1
 800473e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004740:	e026      	b.n	8004790 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	2b02      	cmp	r3, #2
 8004746:	d123      	bne.n	8004790 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2b1b      	cmp	r3, #27
 800474c:	d803      	bhi.n	8004756 <RTC_DateUpdate+0xd2>
      {
        day++;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	3301      	adds	r3, #1
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	e01c      	b.n	8004790 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2b1c      	cmp	r3, #28
 800475a:	d111      	bne.n	8004780 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	b29b      	uxth	r3, r3
 8004760:	4618      	mov	r0, r3
 8004762:	f000 f839 	bl	80047d8 <RTC_IsLeapYear>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <RTC_DateUpdate+0xf0>
        {
          day++;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	3301      	adds	r3, #1
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	e00d      	b.n	8004790 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	3301      	adds	r3, #1
 8004778:	613b      	str	r3, [r7, #16]
          day = 1U;
 800477a:	2301      	movs	r3, #1
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	e007      	b.n	8004790 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2b1d      	cmp	r3, #29
 8004784:	d104      	bne.n	8004790 <RTC_DateUpdate+0x10c>
      {
        month++;
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	3301      	adds	r3, #1
 800478a:	613b      	str	r3, [r7, #16]
        day = 1U;
 800478c:	2301      	movs	r3, #1
 800478e:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	3301      	adds	r3, #1
 8004794:	60bb      	str	r3, [r7, #8]
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	429a      	cmp	r2, r3
 800479c:	d38b      	bcc.n	80046b6 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	b2d2      	uxtb	r2, r2
 80047be:	4619      	mov	r1, r3
 80047c0:	6978      	ldr	r0, [r7, #20]
 80047c2:	f000 f83b 	bl	800483c <RTC_WeekDayNum>
 80047c6:	4603      	mov	r3, r0
 80047c8:	461a      	mov	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	731a      	strb	r2, [r3, #12]
}
 80047ce:	bf00      	nop
 80047d0:	3718      	adds	r7, #24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
	...

080047d8 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	4603      	mov	r3, r0
 80047e0:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80047e2:	88fb      	ldrh	r3, [r7, #6]
 80047e4:	f003 0303 	and.w	r3, r3, #3
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	e01d      	b.n	800482e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80047f2:	88fb      	ldrh	r3, [r7, #6]
 80047f4:	4a10      	ldr	r2, [pc, #64]	; (8004838 <RTC_IsLeapYear+0x60>)
 80047f6:	fba2 1203 	umull	r1, r2, r2, r3
 80047fa:	0952      	lsrs	r2, r2, #5
 80047fc:	2164      	movs	r1, #100	; 0x64
 80047fe:	fb01 f202 	mul.w	r2, r1, r2
 8004802:	1a9b      	subs	r3, r3, r2
 8004804:	b29b      	uxth	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800480a:	2301      	movs	r3, #1
 800480c:	e00f      	b.n	800482e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800480e:	88fb      	ldrh	r3, [r7, #6]
 8004810:	4a09      	ldr	r2, [pc, #36]	; (8004838 <RTC_IsLeapYear+0x60>)
 8004812:	fba2 1203 	umull	r1, r2, r2, r3
 8004816:	09d2      	lsrs	r2, r2, #7
 8004818:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800481c:	fb01 f202 	mul.w	r2, r1, r2
 8004820:	1a9b      	subs	r3, r3, r2
 8004822:	b29b      	uxth	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8004828:	2301      	movs	r3, #1
 800482a:	e000      	b.n	800482e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 800482c:	2300      	movs	r3, #0
  }
}
 800482e:	4618      	mov	r0, r3
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr
 8004838:	51eb851f 	.word	0x51eb851f

0800483c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	460b      	mov	r3, r1
 8004846:	70fb      	strb	r3, [r7, #3]
 8004848:	4613      	mov	r3, r2
 800484a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	60bb      	str	r3, [r7, #8]
 8004850:	2300      	movs	r3, #0
 8004852:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800485a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800485c:	78fb      	ldrb	r3, [r7, #3]
 800485e:	2b02      	cmp	r3, #2
 8004860:	d82d      	bhi.n	80048be <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004862:	78fa      	ldrb	r2, [r7, #3]
 8004864:	4613      	mov	r3, r2
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	4413      	add	r3, r2
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	1a9b      	subs	r3, r3, r2
 800486e:	4a2c      	ldr	r2, [pc, #176]	; (8004920 <RTC_WeekDayNum+0xe4>)
 8004870:	fba2 2303 	umull	r2, r3, r2, r3
 8004874:	085a      	lsrs	r2, r3, #1
 8004876:	78bb      	ldrb	r3, [r7, #2]
 8004878:	441a      	add	r2, r3
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	441a      	add	r2, r3
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	3b01      	subs	r3, #1
 8004882:	089b      	lsrs	r3, r3, #2
 8004884:	441a      	add	r2, r3
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	3b01      	subs	r3, #1
 800488a:	4926      	ldr	r1, [pc, #152]	; (8004924 <RTC_WeekDayNum+0xe8>)
 800488c:	fba1 1303 	umull	r1, r3, r1, r3
 8004890:	095b      	lsrs	r3, r3, #5
 8004892:	1ad2      	subs	r2, r2, r3
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	3b01      	subs	r3, #1
 8004898:	4922      	ldr	r1, [pc, #136]	; (8004924 <RTC_WeekDayNum+0xe8>)
 800489a:	fba1 1303 	umull	r1, r3, r1, r3
 800489e:	09db      	lsrs	r3, r3, #7
 80048a0:	4413      	add	r3, r2
 80048a2:	1d1a      	adds	r2, r3, #4
 80048a4:	4b20      	ldr	r3, [pc, #128]	; (8004928 <RTC_WeekDayNum+0xec>)
 80048a6:	fba3 1302 	umull	r1, r3, r3, r2
 80048aa:	1ad1      	subs	r1, r2, r3
 80048ac:	0849      	lsrs	r1, r1, #1
 80048ae:	440b      	add	r3, r1
 80048b0:	0899      	lsrs	r1, r3, #2
 80048b2:	460b      	mov	r3, r1
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	1a5b      	subs	r3, r3, r1
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	e029      	b.n	8004912 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80048be:	78fa      	ldrb	r2, [r7, #3]
 80048c0:	4613      	mov	r3, r2
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	4413      	add	r3, r2
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	1a9b      	subs	r3, r3, r2
 80048ca:	4a15      	ldr	r2, [pc, #84]	; (8004920 <RTC_WeekDayNum+0xe4>)
 80048cc:	fba2 2303 	umull	r2, r3, r2, r3
 80048d0:	085a      	lsrs	r2, r3, #1
 80048d2:	78bb      	ldrb	r3, [r7, #2]
 80048d4:	441a      	add	r2, r3
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	441a      	add	r2, r3
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	089b      	lsrs	r3, r3, #2
 80048de:	441a      	add	r2, r3
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	4910      	ldr	r1, [pc, #64]	; (8004924 <RTC_WeekDayNum+0xe8>)
 80048e4:	fba1 1303 	umull	r1, r3, r1, r3
 80048e8:	095b      	lsrs	r3, r3, #5
 80048ea:	1ad2      	subs	r2, r2, r3
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	490d      	ldr	r1, [pc, #52]	; (8004924 <RTC_WeekDayNum+0xe8>)
 80048f0:	fba1 1303 	umull	r1, r3, r1, r3
 80048f4:	09db      	lsrs	r3, r3, #7
 80048f6:	4413      	add	r3, r2
 80048f8:	1c9a      	adds	r2, r3, #2
 80048fa:	4b0b      	ldr	r3, [pc, #44]	; (8004928 <RTC_WeekDayNum+0xec>)
 80048fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004900:	1ad1      	subs	r1, r2, r3
 8004902:	0849      	lsrs	r1, r1, #1
 8004904:	440b      	add	r3, r1
 8004906:	0899      	lsrs	r1, r3, #2
 8004908:	460b      	mov	r3, r1
 800490a:	00db      	lsls	r3, r3, #3
 800490c:	1a5b      	subs	r3, r3, r1
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	b2db      	uxtb	r3, r3
}
 8004916:	4618      	mov	r0, r3
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	bc80      	pop	{r7}
 800491e:	4770      	bx	lr
 8004920:	38e38e39 	.word	0x38e38e39
 8004924:	51eb851f 	.word	0x51eb851f
 8004928:	24924925 	.word	0x24924925

0800492c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e03f      	b.n	80049be <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d106      	bne.n	8004958 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7fd ffa4 	bl	80028a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2224      	movs	r2, #36	; 0x24
 800495c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800496e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fbd1 	bl	8005118 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	691a      	ldr	r2, [r3, #16]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004984:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	695a      	ldr	r2, [r3, #20]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004994:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68da      	ldr	r2, [r3, #12]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2220      	movs	r2, #32
 80049b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b088      	sub	sp, #32
 80049ca:	af02      	add	r7, sp, #8
 80049cc:	60f8      	str	r0, [r7, #12]
 80049ce:	60b9      	str	r1, [r7, #8]
 80049d0:	603b      	str	r3, [r7, #0]
 80049d2:	4613      	mov	r3, r2
 80049d4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b20      	cmp	r3, #32
 80049e4:	f040 8083 	bne.w	8004aee <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d002      	beq.n	80049f4 <HAL_UART_Transmit+0x2e>
 80049ee:	88fb      	ldrh	r3, [r7, #6]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e07b      	b.n	8004af0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d101      	bne.n	8004a06 <HAL_UART_Transmit+0x40>
 8004a02:	2302      	movs	r3, #2
 8004a04:	e074      	b.n	8004af0 <HAL_UART_Transmit+0x12a>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2221      	movs	r2, #33	; 0x21
 8004a18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004a1c:	f7fe f900 	bl	8002c20 <HAL_GetTick>
 8004a20:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	88fa      	ldrh	r2, [r7, #6]
 8004a26:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	88fa      	ldrh	r2, [r7, #6]
 8004a2c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a2e:	e042      	b.n	8004ab6 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	3b01      	subs	r3, #1
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a46:	d122      	bne.n	8004a8e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	2180      	movs	r1, #128	; 0x80
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f000 f9f6 	bl	8004e44 <UART_WaitOnFlagUntilTimeout>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e046      	b.n	8004af0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a74:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d103      	bne.n	8004a86 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	3302      	adds	r3, #2
 8004a82:	60bb      	str	r3, [r7, #8]
 8004a84:	e017      	b.n	8004ab6 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	60bb      	str	r3, [r7, #8]
 8004a8c:	e013      	b.n	8004ab6 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	2200      	movs	r2, #0
 8004a96:	2180      	movs	r1, #128	; 0x80
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 f9d3 	bl	8004e44 <UART_WaitOnFlagUntilTimeout>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e023      	b.n	8004af0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	1c5a      	adds	r2, r3, #1
 8004aac:	60ba      	str	r2, [r7, #8]
 8004aae:	781a      	ldrb	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1b7      	bne.n	8004a30 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	2140      	movs	r1, #64	; 0x40
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 f9ba 	bl	8004e44 <UART_WaitOnFlagUntilTimeout>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e00a      	b.n	8004af0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2220      	movs	r2, #32
 8004ade:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004aea:	2300      	movs	r3, #0
 8004aec:	e000      	b.n	8004af0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004aee:	2302      	movs	r3, #2
  }
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3718      	adds	r7, #24
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	4613      	mov	r3, r2
 8004b04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b20      	cmp	r3, #32
 8004b10:	d130      	bne.n	8004b74 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d002      	beq.n	8004b1e <HAL_UART_Transmit_IT+0x26>
 8004b18:	88fb      	ldrh	r3, [r7, #6]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e029      	b.n	8004b76 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d101      	bne.n	8004b30 <HAL_UART_Transmit_IT+0x38>
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	e022      	b.n	8004b76 <HAL_UART_Transmit_IT+0x7e>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	88fa      	ldrh	r2, [r7, #6]
 8004b42:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	88fa      	ldrh	r2, [r7, #6]
 8004b48:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2221      	movs	r2, #33	; 0x21
 8004b54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68da      	ldr	r2, [r3, #12]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b6e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004b70:	2300      	movs	r3, #0
 8004b72:	e000      	b.n	8004b76 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004b74:	2302      	movs	r3, #2
  }
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bc80      	pop	{r7}
 8004b7e:	4770      	bx	lr

08004b80 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b20      	cmp	r3, #32
 8004b98:	d140      	bne.n	8004c1c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d002      	beq.n	8004ba6 <HAL_UART_Receive_IT+0x26>
 8004ba0:	88fb      	ldrh	r3, [r7, #6]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e039      	b.n	8004c1e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d101      	bne.n	8004bb8 <HAL_UART_Receive_IT+0x38>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	e032      	b.n	8004c1e <HAL_UART_Receive_IT+0x9e>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	88fa      	ldrh	r2, [r7, #6]
 8004bca:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	88fa      	ldrh	r2, [r7, #6]
 8004bd0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2222      	movs	r2, #34	; 0x22
 8004bdc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bf6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	695a      	ldr	r2, [r3, #20]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0201 	orr.w	r2, r2, #1
 8004c06:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0220 	orr.w	r2, r2, #32
 8004c16:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	e000      	b.n	8004c1e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004c1c:	2302      	movs	r3, #2
  }
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bc80      	pop	{r7}
 8004c26:	4770      	bx	lr

08004c28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b088      	sub	sp, #32
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10d      	bne.n	8004c7a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	f003 0320 	and.w	r3, r3, #32
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d008      	beq.n	8004c7a <HAL_UART_IRQHandler+0x52>
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	f003 0320 	and.w	r3, r3, #32
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f9ce 	bl	8005014 <UART_Receive_IT>
      return;
 8004c78:	e0cc      	b.n	8004e14 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 80ab 	beq.w	8004dd8 <HAL_UART_IRQHandler+0x1b0>
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d105      	bne.n	8004c98 <HAL_UART_IRQHandler+0x70>
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 80a0 	beq.w	8004dd8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <HAL_UART_IRQHandler+0x90>
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d005      	beq.n	8004cb8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb0:	f043 0201 	orr.w	r2, r3, #1
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	f003 0304 	and.w	r3, r3, #4
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00a      	beq.n	8004cd8 <HAL_UART_IRQHandler+0xb0>
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d005      	beq.n	8004cd8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd0:	f043 0202 	orr.w	r2, r3, #2
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <HAL_UART_IRQHandler+0xd0>
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d005      	beq.n	8004cf8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf0:	f043 0204 	orr.w	r2, r3, #4
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	f003 0308 	and.w	r3, r3, #8
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00a      	beq.n	8004d18 <HAL_UART_IRQHandler+0xf0>
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d005      	beq.n	8004d18 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d10:	f043 0208 	orr.w	r2, r3, #8
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d078      	beq.n	8004e12 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	f003 0320 	and.w	r3, r3, #32
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d007      	beq.n	8004d3a <HAL_UART_IRQHandler+0x112>
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	f003 0320 	and.w	r3, r3, #32
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f96d 	bl	8005014 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	bf14      	ite	ne
 8004d48:	2301      	movne	r3, #1
 8004d4a:	2300      	moveq	r3, #0
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d54:	f003 0308 	and.w	r3, r3, #8
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d102      	bne.n	8004d62 <HAL_UART_IRQHandler+0x13a>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d031      	beq.n	8004dc6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f8b8 	bl	8004ed8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d023      	beq.n	8004dbe <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	695a      	ldr	r2, [r3, #20]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d84:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d013      	beq.n	8004db6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d92:	4a22      	ldr	r2, [pc, #136]	; (8004e1c <HAL_UART_IRQHandler+0x1f4>)
 8004d94:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fe f87a 	bl	8002e94 <HAL_DMA_Abort_IT>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d016      	beq.n	8004dd4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004db0:	4610      	mov	r0, r2
 8004db2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db4:	e00e      	b.n	8004dd4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f83b 	bl	8004e32 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dbc:	e00a      	b.n	8004dd4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f837 	bl	8004e32 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dc4:	e006      	b.n	8004dd4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f833 	bl	8004e32 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004dd2:	e01e      	b.n	8004e12 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dd4:	bf00      	nop
    return;
 8004dd6:	e01c      	b.n	8004e12 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d008      	beq.n	8004df4 <HAL_UART_IRQHandler+0x1cc>
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f8a4 	bl	8004f3a <UART_Transmit_IT>
    return;
 8004df2:	e00f      	b.n	8004e14 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00a      	beq.n	8004e14 <HAL_UART_IRQHandler+0x1ec>
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d005      	beq.n	8004e14 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f8eb 	bl	8004fe4 <UART_EndTransmit_IT>
    return;
 8004e0e:	bf00      	nop
 8004e10:	e000      	b.n	8004e14 <HAL_UART_IRQHandler+0x1ec>
    return;
 8004e12:	bf00      	nop
  }
}
 8004e14:	3720      	adds	r7, #32
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	08004f13 	.word	0x08004f13

08004e20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bc80      	pop	{r7}
 8004e30:	4770      	bx	lr

08004e32 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e3a:	bf00      	nop
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bc80      	pop	{r7}
 8004e42:	4770      	bx	lr

08004e44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	603b      	str	r3, [r7, #0]
 8004e50:	4613      	mov	r3, r2
 8004e52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e54:	e02c      	b.n	8004eb0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5c:	d028      	beq.n	8004eb0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d007      	beq.n	8004e74 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e64:	f7fd fedc 	bl	8002c20 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d21d      	bcs.n	8004eb0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e82:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695a      	ldr	r2, [r3, #20]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0201 	bic.w	r2, r2, #1
 8004e92:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e00f      	b.n	8004ed0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	bf0c      	ite	eq
 8004ec0:	2301      	moveq	r3, #1
 8004ec2:	2300      	movne	r3, #0
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	79fb      	ldrb	r3, [r7, #7]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d0c3      	beq.n	8004e56 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68da      	ldr	r2, [r3, #12]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004eee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	695a      	ldr	r2, [r3, #20]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 0201 	bic.w	r2, r2, #1
 8004efe:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2220      	movs	r2, #32
 8004f04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bc80      	pop	{r7}
 8004f10:	4770      	bx	lr

08004f12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b084      	sub	sp, #16
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f7ff ff80 	bl	8004e32 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f32:	bf00      	nop
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b085      	sub	sp, #20
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b21      	cmp	r3, #33	; 0x21
 8004f4c:	d144      	bne.n	8004fd8 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f56:	d11a      	bne.n	8004f8e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	461a      	mov	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f6c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d105      	bne.n	8004f82 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	1c9a      	adds	r2, r3, #2
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	621a      	str	r2, [r3, #32]
 8004f80:	e00e      	b.n	8004fa0 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	1c5a      	adds	r2, r3, #1
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	621a      	str	r2, [r3, #32]
 8004f8c:	e008      	b.n	8004fa0 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	1c59      	adds	r1, r3, #1
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	6211      	str	r1, [r2, #32]
 8004f98:	781a      	ldrb	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	4619      	mov	r1, r3
 8004fae:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10f      	bne.n	8004fd4 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68da      	ldr	r2, [r3, #12]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fc2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68da      	ldr	r2, [r3, #12]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fd2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	e000      	b.n	8004fda <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004fd8:	2302      	movs	r3, #2
  }
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bc80      	pop	{r7}
 8004fe2:	4770      	bx	lr

08004fe4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68da      	ldr	r2, [r3, #12]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ffa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2220      	movs	r2, #32
 8005000:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f7ff ff0b 	bl	8004e20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b22      	cmp	r3, #34	; 0x22
 8005026:	d171      	bne.n	800510c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005030:	d123      	bne.n	800507a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005036:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10e      	bne.n	800505e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	b29b      	uxth	r3, r3
 8005048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800504c:	b29a      	uxth	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005056:	1c9a      	adds	r2, r3, #2
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	629a      	str	r2, [r3, #40]	; 0x28
 800505c:	e029      	b.n	80050b2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	b29b      	uxth	r3, r3
 8005066:	b2db      	uxtb	r3, r3
 8005068:	b29a      	uxth	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005072:	1c5a      	adds	r2, r3, #1
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	629a      	str	r2, [r3, #40]	; 0x28
 8005078:	e01b      	b.n	80050b2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10a      	bne.n	8005098 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6858      	ldr	r0, [r3, #4]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508c:	1c59      	adds	r1, r3, #1
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	6291      	str	r1, [r2, #40]	; 0x28
 8005092:	b2c2      	uxtb	r2, r0
 8005094:	701a      	strb	r2, [r3, #0]
 8005096:	e00c      	b.n	80050b2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	b2da      	uxtb	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a4:	1c58      	adds	r0, r3, #1
 80050a6:	6879      	ldr	r1, [r7, #4]
 80050a8:	6288      	str	r0, [r1, #40]	; 0x28
 80050aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	3b01      	subs	r3, #1
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	4619      	mov	r1, r3
 80050c0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d120      	bne.n	8005108 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68da      	ldr	r2, [r3, #12]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0220 	bic.w	r2, r2, #32
 80050d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68da      	ldr	r2, [r3, #12]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	695a      	ldr	r2, [r3, #20]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 0201 	bic.w	r2, r2, #1
 80050f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7fd fb02 	bl	8002708 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005104:	2300      	movs	r3, #0
 8005106:	e002      	b.n	800510e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005108:	2300      	movs	r3, #0
 800510a:	e000      	b.n	800510e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800510c:	2302      	movs	r3, #2
  }
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
	...

08005118 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68da      	ldr	r2, [r3, #12]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689a      	ldr	r2, [r3, #8]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	431a      	orrs	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	4313      	orrs	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005152:	f023 030c 	bic.w	r3, r3, #12
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	6812      	ldr	r2, [r2, #0]
 800515a:	68f9      	ldr	r1, [r7, #12]
 800515c:	430b      	orrs	r3, r1
 800515e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	699a      	ldr	r2, [r3, #24]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a52      	ldr	r2, [pc, #328]	; (80052c4 <UART_SetConfig+0x1ac>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d14e      	bne.n	800521e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005180:	f7fe fc7e 	bl	8003a80 <HAL_RCC_GetPCLK2Freq>
 8005184:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	4613      	mov	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	009a      	lsls	r2, r3, #2
 8005190:	441a      	add	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	fbb2 f3f3 	udiv	r3, r2, r3
 800519c:	4a4a      	ldr	r2, [pc, #296]	; (80052c8 <UART_SetConfig+0x1b0>)
 800519e:	fba2 2303 	umull	r2, r3, r2, r3
 80051a2:	095b      	lsrs	r3, r3, #5
 80051a4:	0119      	lsls	r1, r3, #4
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	4613      	mov	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4413      	add	r3, r2
 80051ae:	009a      	lsls	r2, r3, #2
 80051b0:	441a      	add	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80051bc:	4b42      	ldr	r3, [pc, #264]	; (80052c8 <UART_SetConfig+0x1b0>)
 80051be:	fba3 0302 	umull	r0, r3, r3, r2
 80051c2:	095b      	lsrs	r3, r3, #5
 80051c4:	2064      	movs	r0, #100	; 0x64
 80051c6:	fb00 f303 	mul.w	r3, r0, r3
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	011b      	lsls	r3, r3, #4
 80051ce:	3332      	adds	r3, #50	; 0x32
 80051d0:	4a3d      	ldr	r2, [pc, #244]	; (80052c8 <UART_SetConfig+0x1b0>)
 80051d2:	fba2 2303 	umull	r2, r3, r2, r3
 80051d6:	095b      	lsrs	r3, r3, #5
 80051d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051dc:	4419      	add	r1, r3
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	4613      	mov	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	009a      	lsls	r2, r3, #2
 80051e8:	441a      	add	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80051f4:	4b34      	ldr	r3, [pc, #208]	; (80052c8 <UART_SetConfig+0x1b0>)
 80051f6:	fba3 0302 	umull	r0, r3, r3, r2
 80051fa:	095b      	lsrs	r3, r3, #5
 80051fc:	2064      	movs	r0, #100	; 0x64
 80051fe:	fb00 f303 	mul.w	r3, r0, r3
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	011b      	lsls	r3, r3, #4
 8005206:	3332      	adds	r3, #50	; 0x32
 8005208:	4a2f      	ldr	r2, [pc, #188]	; (80052c8 <UART_SetConfig+0x1b0>)
 800520a:	fba2 2303 	umull	r2, r3, r2, r3
 800520e:	095b      	lsrs	r3, r3, #5
 8005210:	f003 020f 	and.w	r2, r3, #15
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	440a      	add	r2, r1
 800521a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800521c:	e04d      	b.n	80052ba <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800521e:	f7fe fc1b 	bl	8003a58 <HAL_RCC_GetPCLK1Freq>
 8005222:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	4613      	mov	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	009a      	lsls	r2, r3, #2
 800522e:	441a      	add	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	fbb2 f3f3 	udiv	r3, r2, r3
 800523a:	4a23      	ldr	r2, [pc, #140]	; (80052c8 <UART_SetConfig+0x1b0>)
 800523c:	fba2 2303 	umull	r2, r3, r2, r3
 8005240:	095b      	lsrs	r3, r3, #5
 8005242:	0119      	lsls	r1, r3, #4
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	4613      	mov	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4413      	add	r3, r2
 800524c:	009a      	lsls	r2, r3, #2
 800524e:	441a      	add	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	fbb2 f2f3 	udiv	r2, r2, r3
 800525a:	4b1b      	ldr	r3, [pc, #108]	; (80052c8 <UART_SetConfig+0x1b0>)
 800525c:	fba3 0302 	umull	r0, r3, r3, r2
 8005260:	095b      	lsrs	r3, r3, #5
 8005262:	2064      	movs	r0, #100	; 0x64
 8005264:	fb00 f303 	mul.w	r3, r0, r3
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	011b      	lsls	r3, r3, #4
 800526c:	3332      	adds	r3, #50	; 0x32
 800526e:	4a16      	ldr	r2, [pc, #88]	; (80052c8 <UART_SetConfig+0x1b0>)
 8005270:	fba2 2303 	umull	r2, r3, r2, r3
 8005274:	095b      	lsrs	r3, r3, #5
 8005276:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800527a:	4419      	add	r1, r3
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	4613      	mov	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4413      	add	r3, r2
 8005284:	009a      	lsls	r2, r3, #2
 8005286:	441a      	add	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005292:	4b0d      	ldr	r3, [pc, #52]	; (80052c8 <UART_SetConfig+0x1b0>)
 8005294:	fba3 0302 	umull	r0, r3, r3, r2
 8005298:	095b      	lsrs	r3, r3, #5
 800529a:	2064      	movs	r0, #100	; 0x64
 800529c:	fb00 f303 	mul.w	r3, r0, r3
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	3332      	adds	r3, #50	; 0x32
 80052a6:	4a08      	ldr	r2, [pc, #32]	; (80052c8 <UART_SetConfig+0x1b0>)
 80052a8:	fba2 2303 	umull	r2, r3, r2, r3
 80052ac:	095b      	lsrs	r3, r3, #5
 80052ae:	f003 020f 	and.w	r2, r3, #15
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	440a      	add	r2, r1
 80052b8:	609a      	str	r2, [r3, #8]
}
 80052ba:	bf00      	nop
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	40013800 	.word	0x40013800
 80052c8:	51eb851f 	.word	0x51eb851f

080052cc <atof>:
 80052cc:	2100      	movs	r1, #0
 80052ce:	f001 baeb 	b.w	80068a8 <strtod>

080052d2 <atoi>:
 80052d2:	220a      	movs	r2, #10
 80052d4:	2100      	movs	r1, #0
 80052d6:	f001 bb75 	b.w	80069c4 <strtol>
	...

080052dc <__errno>:
 80052dc:	4b01      	ldr	r3, [pc, #4]	; (80052e4 <__errno+0x8>)
 80052de:	6818      	ldr	r0, [r3, #0]
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	2000000c 	.word	0x2000000c

080052e8 <__libc_init_array>:
 80052e8:	b570      	push	{r4, r5, r6, lr}
 80052ea:	2500      	movs	r5, #0
 80052ec:	4e0c      	ldr	r6, [pc, #48]	; (8005320 <__libc_init_array+0x38>)
 80052ee:	4c0d      	ldr	r4, [pc, #52]	; (8005324 <__libc_init_array+0x3c>)
 80052f0:	1ba4      	subs	r4, r4, r6
 80052f2:	10a4      	asrs	r4, r4, #2
 80052f4:	42a5      	cmp	r5, r4
 80052f6:	d109      	bne.n	800530c <__libc_init_array+0x24>
 80052f8:	f003 fba4 	bl	8008a44 <_init>
 80052fc:	2500      	movs	r5, #0
 80052fe:	4e0a      	ldr	r6, [pc, #40]	; (8005328 <__libc_init_array+0x40>)
 8005300:	4c0a      	ldr	r4, [pc, #40]	; (800532c <__libc_init_array+0x44>)
 8005302:	1ba4      	subs	r4, r4, r6
 8005304:	10a4      	asrs	r4, r4, #2
 8005306:	42a5      	cmp	r5, r4
 8005308:	d105      	bne.n	8005316 <__libc_init_array+0x2e>
 800530a:	bd70      	pop	{r4, r5, r6, pc}
 800530c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005310:	4798      	blx	r3
 8005312:	3501      	adds	r5, #1
 8005314:	e7ee      	b.n	80052f4 <__libc_init_array+0xc>
 8005316:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800531a:	4798      	blx	r3
 800531c:	3501      	adds	r5, #1
 800531e:	e7f2      	b.n	8005306 <__libc_init_array+0x1e>
 8005320:	08008f38 	.word	0x08008f38
 8005324:	08008f38 	.word	0x08008f38
 8005328:	08008f38 	.word	0x08008f38
 800532c:	08008f3c 	.word	0x08008f3c

08005330 <memset>:
 8005330:	4603      	mov	r3, r0
 8005332:	4402      	add	r2, r0
 8005334:	4293      	cmp	r3, r2
 8005336:	d100      	bne.n	800533a <memset+0xa>
 8005338:	4770      	bx	lr
 800533a:	f803 1b01 	strb.w	r1, [r3], #1
 800533e:	e7f9      	b.n	8005334 <memset+0x4>

08005340 <__cvt>:
 8005340:	2b00      	cmp	r3, #0
 8005342:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005346:	461e      	mov	r6, r3
 8005348:	bfbb      	ittet	lt
 800534a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800534e:	461e      	movlt	r6, r3
 8005350:	2300      	movge	r3, #0
 8005352:	232d      	movlt	r3, #45	; 0x2d
 8005354:	b088      	sub	sp, #32
 8005356:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005358:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800535c:	f027 0720 	bic.w	r7, r7, #32
 8005360:	2f46      	cmp	r7, #70	; 0x46
 8005362:	4614      	mov	r4, r2
 8005364:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005366:	700b      	strb	r3, [r1, #0]
 8005368:	d004      	beq.n	8005374 <__cvt+0x34>
 800536a:	2f45      	cmp	r7, #69	; 0x45
 800536c:	d100      	bne.n	8005370 <__cvt+0x30>
 800536e:	3501      	adds	r5, #1
 8005370:	2302      	movs	r3, #2
 8005372:	e000      	b.n	8005376 <__cvt+0x36>
 8005374:	2303      	movs	r3, #3
 8005376:	aa07      	add	r2, sp, #28
 8005378:	9204      	str	r2, [sp, #16]
 800537a:	aa06      	add	r2, sp, #24
 800537c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005380:	e9cd 3500 	strd	r3, r5, [sp]
 8005384:	4622      	mov	r2, r4
 8005386:	4633      	mov	r3, r6
 8005388:	f001 fbc2 	bl	8006b10 <_dtoa_r>
 800538c:	2f47      	cmp	r7, #71	; 0x47
 800538e:	4680      	mov	r8, r0
 8005390:	d102      	bne.n	8005398 <__cvt+0x58>
 8005392:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005394:	07db      	lsls	r3, r3, #31
 8005396:	d526      	bpl.n	80053e6 <__cvt+0xa6>
 8005398:	2f46      	cmp	r7, #70	; 0x46
 800539a:	eb08 0905 	add.w	r9, r8, r5
 800539e:	d111      	bne.n	80053c4 <__cvt+0x84>
 80053a0:	f898 3000 	ldrb.w	r3, [r8]
 80053a4:	2b30      	cmp	r3, #48	; 0x30
 80053a6:	d10a      	bne.n	80053be <__cvt+0x7e>
 80053a8:	2200      	movs	r2, #0
 80053aa:	2300      	movs	r3, #0
 80053ac:	4620      	mov	r0, r4
 80053ae:	4631      	mov	r1, r6
 80053b0:	f7fb fb04 	bl	80009bc <__aeabi_dcmpeq>
 80053b4:	b918      	cbnz	r0, 80053be <__cvt+0x7e>
 80053b6:	f1c5 0501 	rsb	r5, r5, #1
 80053ba:	f8ca 5000 	str.w	r5, [sl]
 80053be:	f8da 3000 	ldr.w	r3, [sl]
 80053c2:	4499      	add	r9, r3
 80053c4:	2200      	movs	r2, #0
 80053c6:	2300      	movs	r3, #0
 80053c8:	4620      	mov	r0, r4
 80053ca:	4631      	mov	r1, r6
 80053cc:	f7fb faf6 	bl	80009bc <__aeabi_dcmpeq>
 80053d0:	b938      	cbnz	r0, 80053e2 <__cvt+0xa2>
 80053d2:	2230      	movs	r2, #48	; 0x30
 80053d4:	9b07      	ldr	r3, [sp, #28]
 80053d6:	454b      	cmp	r3, r9
 80053d8:	d205      	bcs.n	80053e6 <__cvt+0xa6>
 80053da:	1c59      	adds	r1, r3, #1
 80053dc:	9107      	str	r1, [sp, #28]
 80053de:	701a      	strb	r2, [r3, #0]
 80053e0:	e7f8      	b.n	80053d4 <__cvt+0x94>
 80053e2:	f8cd 901c 	str.w	r9, [sp, #28]
 80053e6:	4640      	mov	r0, r8
 80053e8:	9b07      	ldr	r3, [sp, #28]
 80053ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80053ec:	eba3 0308 	sub.w	r3, r3, r8
 80053f0:	6013      	str	r3, [r2, #0]
 80053f2:	b008      	add	sp, #32
 80053f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080053f8 <__exponent>:
 80053f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053fa:	2900      	cmp	r1, #0
 80053fc:	bfb4      	ite	lt
 80053fe:	232d      	movlt	r3, #45	; 0x2d
 8005400:	232b      	movge	r3, #43	; 0x2b
 8005402:	4604      	mov	r4, r0
 8005404:	bfb8      	it	lt
 8005406:	4249      	neglt	r1, r1
 8005408:	2909      	cmp	r1, #9
 800540a:	f804 2b02 	strb.w	r2, [r4], #2
 800540e:	7043      	strb	r3, [r0, #1]
 8005410:	dd21      	ble.n	8005456 <__exponent+0x5e>
 8005412:	f10d 0307 	add.w	r3, sp, #7
 8005416:	461f      	mov	r7, r3
 8005418:	260a      	movs	r6, #10
 800541a:	fb91 f5f6 	sdiv	r5, r1, r6
 800541e:	fb06 1115 	mls	r1, r6, r5, r1
 8005422:	2d09      	cmp	r5, #9
 8005424:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8005428:	f803 1c01 	strb.w	r1, [r3, #-1]
 800542c:	f103 32ff 	add.w	r2, r3, #4294967295
 8005430:	4629      	mov	r1, r5
 8005432:	dc09      	bgt.n	8005448 <__exponent+0x50>
 8005434:	3130      	adds	r1, #48	; 0x30
 8005436:	3b02      	subs	r3, #2
 8005438:	f802 1c01 	strb.w	r1, [r2, #-1]
 800543c:	42bb      	cmp	r3, r7
 800543e:	4622      	mov	r2, r4
 8005440:	d304      	bcc.n	800544c <__exponent+0x54>
 8005442:	1a10      	subs	r0, r2, r0
 8005444:	b003      	add	sp, #12
 8005446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005448:	4613      	mov	r3, r2
 800544a:	e7e6      	b.n	800541a <__exponent+0x22>
 800544c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005450:	f804 2b01 	strb.w	r2, [r4], #1
 8005454:	e7f2      	b.n	800543c <__exponent+0x44>
 8005456:	2330      	movs	r3, #48	; 0x30
 8005458:	4419      	add	r1, r3
 800545a:	7083      	strb	r3, [r0, #2]
 800545c:	1d02      	adds	r2, r0, #4
 800545e:	70c1      	strb	r1, [r0, #3]
 8005460:	e7ef      	b.n	8005442 <__exponent+0x4a>
	...

08005464 <_printf_float>:
 8005464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005468:	b091      	sub	sp, #68	; 0x44
 800546a:	460c      	mov	r4, r1
 800546c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800546e:	4693      	mov	fp, r2
 8005470:	461e      	mov	r6, r3
 8005472:	4605      	mov	r5, r0
 8005474:	f002 fc2e 	bl	8007cd4 <_localeconv_r>
 8005478:	6803      	ldr	r3, [r0, #0]
 800547a:	4618      	mov	r0, r3
 800547c:	9309      	str	r3, [sp, #36]	; 0x24
 800547e:	f7fa fe71 	bl	8000164 <strlen>
 8005482:	2300      	movs	r3, #0
 8005484:	930e      	str	r3, [sp, #56]	; 0x38
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	900a      	str	r0, [sp, #40]	; 0x28
 800548a:	3307      	adds	r3, #7
 800548c:	f023 0307 	bic.w	r3, r3, #7
 8005490:	f103 0208 	add.w	r2, r3, #8
 8005494:	f894 8018 	ldrb.w	r8, [r4, #24]
 8005498:	f8d4 a000 	ldr.w	sl, [r4]
 800549c:	603a      	str	r2, [r7, #0]
 800549e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80054a6:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80054aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80054ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80054b0:	f04f 32ff 	mov.w	r2, #4294967295
 80054b4:	4ba6      	ldr	r3, [pc, #664]	; (8005750 <_printf_float+0x2ec>)
 80054b6:	4638      	mov	r0, r7
 80054b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054ba:	f7fb fab1 	bl	8000a20 <__aeabi_dcmpun>
 80054be:	bb68      	cbnz	r0, 800551c <_printf_float+0xb8>
 80054c0:	f04f 32ff 	mov.w	r2, #4294967295
 80054c4:	4ba2      	ldr	r3, [pc, #648]	; (8005750 <_printf_float+0x2ec>)
 80054c6:	4638      	mov	r0, r7
 80054c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054ca:	f7fb fa8b 	bl	80009e4 <__aeabi_dcmple>
 80054ce:	bb28      	cbnz	r0, 800551c <_printf_float+0xb8>
 80054d0:	2200      	movs	r2, #0
 80054d2:	2300      	movs	r3, #0
 80054d4:	4638      	mov	r0, r7
 80054d6:	4649      	mov	r1, r9
 80054d8:	f7fb fa7a 	bl	80009d0 <__aeabi_dcmplt>
 80054dc:	b110      	cbz	r0, 80054e4 <_printf_float+0x80>
 80054de:	232d      	movs	r3, #45	; 0x2d
 80054e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054e4:	4f9b      	ldr	r7, [pc, #620]	; (8005754 <_printf_float+0x2f0>)
 80054e6:	4b9c      	ldr	r3, [pc, #624]	; (8005758 <_printf_float+0x2f4>)
 80054e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80054ec:	bf98      	it	ls
 80054ee:	461f      	movls	r7, r3
 80054f0:	2303      	movs	r3, #3
 80054f2:	f04f 0900 	mov.w	r9, #0
 80054f6:	6123      	str	r3, [r4, #16]
 80054f8:	f02a 0304 	bic.w	r3, sl, #4
 80054fc:	6023      	str	r3, [r4, #0]
 80054fe:	9600      	str	r6, [sp, #0]
 8005500:	465b      	mov	r3, fp
 8005502:	aa0f      	add	r2, sp, #60	; 0x3c
 8005504:	4621      	mov	r1, r4
 8005506:	4628      	mov	r0, r5
 8005508:	f000 f9e2 	bl	80058d0 <_printf_common>
 800550c:	3001      	adds	r0, #1
 800550e:	f040 8090 	bne.w	8005632 <_printf_float+0x1ce>
 8005512:	f04f 30ff 	mov.w	r0, #4294967295
 8005516:	b011      	add	sp, #68	; 0x44
 8005518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800551c:	463a      	mov	r2, r7
 800551e:	464b      	mov	r3, r9
 8005520:	4638      	mov	r0, r7
 8005522:	4649      	mov	r1, r9
 8005524:	f7fb fa7c 	bl	8000a20 <__aeabi_dcmpun>
 8005528:	b110      	cbz	r0, 8005530 <_printf_float+0xcc>
 800552a:	4f8c      	ldr	r7, [pc, #560]	; (800575c <_printf_float+0x2f8>)
 800552c:	4b8c      	ldr	r3, [pc, #560]	; (8005760 <_printf_float+0x2fc>)
 800552e:	e7db      	b.n	80054e8 <_printf_float+0x84>
 8005530:	6863      	ldr	r3, [r4, #4]
 8005532:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8005536:	1c59      	adds	r1, r3, #1
 8005538:	a80d      	add	r0, sp, #52	; 0x34
 800553a:	a90e      	add	r1, sp, #56	; 0x38
 800553c:	d140      	bne.n	80055c0 <_printf_float+0x15c>
 800553e:	2306      	movs	r3, #6
 8005540:	6063      	str	r3, [r4, #4]
 8005542:	f04f 0c00 	mov.w	ip, #0
 8005546:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800554a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800554e:	6863      	ldr	r3, [r4, #4]
 8005550:	6022      	str	r2, [r4, #0]
 8005552:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	463a      	mov	r2, r7
 800555a:	464b      	mov	r3, r9
 800555c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005560:	4628      	mov	r0, r5
 8005562:	f7ff feed 	bl	8005340 <__cvt>
 8005566:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800556a:	2b47      	cmp	r3, #71	; 0x47
 800556c:	4607      	mov	r7, r0
 800556e:	d109      	bne.n	8005584 <_printf_float+0x120>
 8005570:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005572:	1cd8      	adds	r0, r3, #3
 8005574:	db02      	blt.n	800557c <_printf_float+0x118>
 8005576:	6862      	ldr	r2, [r4, #4]
 8005578:	4293      	cmp	r3, r2
 800557a:	dd47      	ble.n	800560c <_printf_float+0x1a8>
 800557c:	f1a8 0802 	sub.w	r8, r8, #2
 8005580:	fa5f f888 	uxtb.w	r8, r8
 8005584:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005588:	990d      	ldr	r1, [sp, #52]	; 0x34
 800558a:	d824      	bhi.n	80055d6 <_printf_float+0x172>
 800558c:	3901      	subs	r1, #1
 800558e:	4642      	mov	r2, r8
 8005590:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005594:	910d      	str	r1, [sp, #52]	; 0x34
 8005596:	f7ff ff2f 	bl	80053f8 <__exponent>
 800559a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800559c:	4681      	mov	r9, r0
 800559e:	1813      	adds	r3, r2, r0
 80055a0:	2a01      	cmp	r2, #1
 80055a2:	6123      	str	r3, [r4, #16]
 80055a4:	dc02      	bgt.n	80055ac <_printf_float+0x148>
 80055a6:	6822      	ldr	r2, [r4, #0]
 80055a8:	07d1      	lsls	r1, r2, #31
 80055aa:	d501      	bpl.n	80055b0 <_printf_float+0x14c>
 80055ac:	3301      	adds	r3, #1
 80055ae:	6123      	str	r3, [r4, #16]
 80055b0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d0a2      	beq.n	80054fe <_printf_float+0x9a>
 80055b8:	232d      	movs	r3, #45	; 0x2d
 80055ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055be:	e79e      	b.n	80054fe <_printf_float+0x9a>
 80055c0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80055c4:	f000 816e 	beq.w	80058a4 <_printf_float+0x440>
 80055c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80055cc:	d1b9      	bne.n	8005542 <_printf_float+0xde>
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1b7      	bne.n	8005542 <_printf_float+0xde>
 80055d2:	2301      	movs	r3, #1
 80055d4:	e7b4      	b.n	8005540 <_printf_float+0xdc>
 80055d6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80055da:	d119      	bne.n	8005610 <_printf_float+0x1ac>
 80055dc:	2900      	cmp	r1, #0
 80055de:	6863      	ldr	r3, [r4, #4]
 80055e0:	dd0c      	ble.n	80055fc <_printf_float+0x198>
 80055e2:	6121      	str	r1, [r4, #16]
 80055e4:	b913      	cbnz	r3, 80055ec <_printf_float+0x188>
 80055e6:	6822      	ldr	r2, [r4, #0]
 80055e8:	07d2      	lsls	r2, r2, #31
 80055ea:	d502      	bpl.n	80055f2 <_printf_float+0x18e>
 80055ec:	3301      	adds	r3, #1
 80055ee:	440b      	add	r3, r1
 80055f0:	6123      	str	r3, [r4, #16]
 80055f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055f4:	f04f 0900 	mov.w	r9, #0
 80055f8:	65a3      	str	r3, [r4, #88]	; 0x58
 80055fa:	e7d9      	b.n	80055b0 <_printf_float+0x14c>
 80055fc:	b913      	cbnz	r3, 8005604 <_printf_float+0x1a0>
 80055fe:	6822      	ldr	r2, [r4, #0]
 8005600:	07d0      	lsls	r0, r2, #31
 8005602:	d501      	bpl.n	8005608 <_printf_float+0x1a4>
 8005604:	3302      	adds	r3, #2
 8005606:	e7f3      	b.n	80055f0 <_printf_float+0x18c>
 8005608:	2301      	movs	r3, #1
 800560a:	e7f1      	b.n	80055f0 <_printf_float+0x18c>
 800560c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8005610:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005614:	4293      	cmp	r3, r2
 8005616:	db05      	blt.n	8005624 <_printf_float+0x1c0>
 8005618:	6822      	ldr	r2, [r4, #0]
 800561a:	6123      	str	r3, [r4, #16]
 800561c:	07d1      	lsls	r1, r2, #31
 800561e:	d5e8      	bpl.n	80055f2 <_printf_float+0x18e>
 8005620:	3301      	adds	r3, #1
 8005622:	e7e5      	b.n	80055f0 <_printf_float+0x18c>
 8005624:	2b00      	cmp	r3, #0
 8005626:	bfcc      	ite	gt
 8005628:	2301      	movgt	r3, #1
 800562a:	f1c3 0302 	rsble	r3, r3, #2
 800562e:	4413      	add	r3, r2
 8005630:	e7de      	b.n	80055f0 <_printf_float+0x18c>
 8005632:	6823      	ldr	r3, [r4, #0]
 8005634:	055a      	lsls	r2, r3, #21
 8005636:	d407      	bmi.n	8005648 <_printf_float+0x1e4>
 8005638:	6923      	ldr	r3, [r4, #16]
 800563a:	463a      	mov	r2, r7
 800563c:	4659      	mov	r1, fp
 800563e:	4628      	mov	r0, r5
 8005640:	47b0      	blx	r6
 8005642:	3001      	adds	r0, #1
 8005644:	d129      	bne.n	800569a <_printf_float+0x236>
 8005646:	e764      	b.n	8005512 <_printf_float+0xae>
 8005648:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800564c:	f240 80d7 	bls.w	80057fe <_printf_float+0x39a>
 8005650:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005654:	2200      	movs	r2, #0
 8005656:	2300      	movs	r3, #0
 8005658:	f7fb f9b0 	bl	80009bc <__aeabi_dcmpeq>
 800565c:	b388      	cbz	r0, 80056c2 <_printf_float+0x25e>
 800565e:	2301      	movs	r3, #1
 8005660:	4a40      	ldr	r2, [pc, #256]	; (8005764 <_printf_float+0x300>)
 8005662:	4659      	mov	r1, fp
 8005664:	4628      	mov	r0, r5
 8005666:	47b0      	blx	r6
 8005668:	3001      	adds	r0, #1
 800566a:	f43f af52 	beq.w	8005512 <_printf_float+0xae>
 800566e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005672:	429a      	cmp	r2, r3
 8005674:	db02      	blt.n	800567c <_printf_float+0x218>
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	07d8      	lsls	r0, r3, #31
 800567a:	d50e      	bpl.n	800569a <_printf_float+0x236>
 800567c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005680:	4659      	mov	r1, fp
 8005682:	4628      	mov	r0, r5
 8005684:	47b0      	blx	r6
 8005686:	3001      	adds	r0, #1
 8005688:	f43f af43 	beq.w	8005512 <_printf_float+0xae>
 800568c:	2700      	movs	r7, #0
 800568e:	f104 081a 	add.w	r8, r4, #26
 8005692:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005694:	3b01      	subs	r3, #1
 8005696:	42bb      	cmp	r3, r7
 8005698:	dc09      	bgt.n	80056ae <_printf_float+0x24a>
 800569a:	6823      	ldr	r3, [r4, #0]
 800569c:	079f      	lsls	r7, r3, #30
 800569e:	f100 80fd 	bmi.w	800589c <_printf_float+0x438>
 80056a2:	68e0      	ldr	r0, [r4, #12]
 80056a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056a6:	4298      	cmp	r0, r3
 80056a8:	bfb8      	it	lt
 80056aa:	4618      	movlt	r0, r3
 80056ac:	e733      	b.n	8005516 <_printf_float+0xb2>
 80056ae:	2301      	movs	r3, #1
 80056b0:	4642      	mov	r2, r8
 80056b2:	4659      	mov	r1, fp
 80056b4:	4628      	mov	r0, r5
 80056b6:	47b0      	blx	r6
 80056b8:	3001      	adds	r0, #1
 80056ba:	f43f af2a 	beq.w	8005512 <_printf_float+0xae>
 80056be:	3701      	adds	r7, #1
 80056c0:	e7e7      	b.n	8005692 <_printf_float+0x22e>
 80056c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	dc2b      	bgt.n	8005720 <_printf_float+0x2bc>
 80056c8:	2301      	movs	r3, #1
 80056ca:	4a26      	ldr	r2, [pc, #152]	; (8005764 <_printf_float+0x300>)
 80056cc:	4659      	mov	r1, fp
 80056ce:	4628      	mov	r0, r5
 80056d0:	47b0      	blx	r6
 80056d2:	3001      	adds	r0, #1
 80056d4:	f43f af1d 	beq.w	8005512 <_printf_float+0xae>
 80056d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056da:	b923      	cbnz	r3, 80056e6 <_printf_float+0x282>
 80056dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056de:	b913      	cbnz	r3, 80056e6 <_printf_float+0x282>
 80056e0:	6823      	ldr	r3, [r4, #0]
 80056e2:	07d9      	lsls	r1, r3, #31
 80056e4:	d5d9      	bpl.n	800569a <_printf_float+0x236>
 80056e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056ea:	4659      	mov	r1, fp
 80056ec:	4628      	mov	r0, r5
 80056ee:	47b0      	blx	r6
 80056f0:	3001      	adds	r0, #1
 80056f2:	f43f af0e 	beq.w	8005512 <_printf_float+0xae>
 80056f6:	f04f 0800 	mov.w	r8, #0
 80056fa:	f104 091a 	add.w	r9, r4, #26
 80056fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005700:	425b      	negs	r3, r3
 8005702:	4543      	cmp	r3, r8
 8005704:	dc01      	bgt.n	800570a <_printf_float+0x2a6>
 8005706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005708:	e797      	b.n	800563a <_printf_float+0x1d6>
 800570a:	2301      	movs	r3, #1
 800570c:	464a      	mov	r2, r9
 800570e:	4659      	mov	r1, fp
 8005710:	4628      	mov	r0, r5
 8005712:	47b0      	blx	r6
 8005714:	3001      	adds	r0, #1
 8005716:	f43f aefc 	beq.w	8005512 <_printf_float+0xae>
 800571a:	f108 0801 	add.w	r8, r8, #1
 800571e:	e7ee      	b.n	80056fe <_printf_float+0x29a>
 8005720:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005722:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005724:	429a      	cmp	r2, r3
 8005726:	bfa8      	it	ge
 8005728:	461a      	movge	r2, r3
 800572a:	2a00      	cmp	r2, #0
 800572c:	4690      	mov	r8, r2
 800572e:	dd07      	ble.n	8005740 <_printf_float+0x2dc>
 8005730:	4613      	mov	r3, r2
 8005732:	4659      	mov	r1, fp
 8005734:	463a      	mov	r2, r7
 8005736:	4628      	mov	r0, r5
 8005738:	47b0      	blx	r6
 800573a:	3001      	adds	r0, #1
 800573c:	f43f aee9 	beq.w	8005512 <_printf_float+0xae>
 8005740:	f104 031a 	add.w	r3, r4, #26
 8005744:	f04f 0a00 	mov.w	sl, #0
 8005748:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800574c:	930b      	str	r3, [sp, #44]	; 0x2c
 800574e:	e015      	b.n	800577c <_printf_float+0x318>
 8005750:	7fefffff 	.word	0x7fefffff
 8005754:	08008c90 	.word	0x08008c90
 8005758:	08008c8c 	.word	0x08008c8c
 800575c:	08008c98 	.word	0x08008c98
 8005760:	08008c94 	.word	0x08008c94
 8005764:	08008c9c 	.word	0x08008c9c
 8005768:	2301      	movs	r3, #1
 800576a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800576c:	4659      	mov	r1, fp
 800576e:	4628      	mov	r0, r5
 8005770:	47b0      	blx	r6
 8005772:	3001      	adds	r0, #1
 8005774:	f43f aecd 	beq.w	8005512 <_printf_float+0xae>
 8005778:	f10a 0a01 	add.w	sl, sl, #1
 800577c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8005780:	eba9 0308 	sub.w	r3, r9, r8
 8005784:	4553      	cmp	r3, sl
 8005786:	dcef      	bgt.n	8005768 <_printf_float+0x304>
 8005788:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800578c:	429a      	cmp	r2, r3
 800578e:	444f      	add	r7, r9
 8005790:	db14      	blt.n	80057bc <_printf_float+0x358>
 8005792:	6823      	ldr	r3, [r4, #0]
 8005794:	07da      	lsls	r2, r3, #31
 8005796:	d411      	bmi.n	80057bc <_printf_float+0x358>
 8005798:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800579a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800579c:	eba3 0209 	sub.w	r2, r3, r9
 80057a0:	eba3 0901 	sub.w	r9, r3, r1
 80057a4:	4591      	cmp	r9, r2
 80057a6:	bfa8      	it	ge
 80057a8:	4691      	movge	r9, r2
 80057aa:	f1b9 0f00 	cmp.w	r9, #0
 80057ae:	dc0d      	bgt.n	80057cc <_printf_float+0x368>
 80057b0:	2700      	movs	r7, #0
 80057b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057b6:	f104 081a 	add.w	r8, r4, #26
 80057ba:	e018      	b.n	80057ee <_printf_float+0x38a>
 80057bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057c0:	4659      	mov	r1, fp
 80057c2:	4628      	mov	r0, r5
 80057c4:	47b0      	blx	r6
 80057c6:	3001      	adds	r0, #1
 80057c8:	d1e6      	bne.n	8005798 <_printf_float+0x334>
 80057ca:	e6a2      	b.n	8005512 <_printf_float+0xae>
 80057cc:	464b      	mov	r3, r9
 80057ce:	463a      	mov	r2, r7
 80057d0:	4659      	mov	r1, fp
 80057d2:	4628      	mov	r0, r5
 80057d4:	47b0      	blx	r6
 80057d6:	3001      	adds	r0, #1
 80057d8:	d1ea      	bne.n	80057b0 <_printf_float+0x34c>
 80057da:	e69a      	b.n	8005512 <_printf_float+0xae>
 80057dc:	2301      	movs	r3, #1
 80057de:	4642      	mov	r2, r8
 80057e0:	4659      	mov	r1, fp
 80057e2:	4628      	mov	r0, r5
 80057e4:	47b0      	blx	r6
 80057e6:	3001      	adds	r0, #1
 80057e8:	f43f ae93 	beq.w	8005512 <_printf_float+0xae>
 80057ec:	3701      	adds	r7, #1
 80057ee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80057f2:	1a9b      	subs	r3, r3, r2
 80057f4:	eba3 0309 	sub.w	r3, r3, r9
 80057f8:	42bb      	cmp	r3, r7
 80057fa:	dcef      	bgt.n	80057dc <_printf_float+0x378>
 80057fc:	e74d      	b.n	800569a <_printf_float+0x236>
 80057fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005800:	2a01      	cmp	r2, #1
 8005802:	dc01      	bgt.n	8005808 <_printf_float+0x3a4>
 8005804:	07db      	lsls	r3, r3, #31
 8005806:	d538      	bpl.n	800587a <_printf_float+0x416>
 8005808:	2301      	movs	r3, #1
 800580a:	463a      	mov	r2, r7
 800580c:	4659      	mov	r1, fp
 800580e:	4628      	mov	r0, r5
 8005810:	47b0      	blx	r6
 8005812:	3001      	adds	r0, #1
 8005814:	f43f ae7d 	beq.w	8005512 <_printf_float+0xae>
 8005818:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800581c:	4659      	mov	r1, fp
 800581e:	4628      	mov	r0, r5
 8005820:	47b0      	blx	r6
 8005822:	3001      	adds	r0, #1
 8005824:	f107 0701 	add.w	r7, r7, #1
 8005828:	f43f ae73 	beq.w	8005512 <_printf_float+0xae>
 800582c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005832:	2200      	movs	r2, #0
 8005834:	f103 38ff 	add.w	r8, r3, #4294967295
 8005838:	2300      	movs	r3, #0
 800583a:	f7fb f8bf 	bl	80009bc <__aeabi_dcmpeq>
 800583e:	b9c0      	cbnz	r0, 8005872 <_printf_float+0x40e>
 8005840:	4643      	mov	r3, r8
 8005842:	463a      	mov	r2, r7
 8005844:	4659      	mov	r1, fp
 8005846:	4628      	mov	r0, r5
 8005848:	47b0      	blx	r6
 800584a:	3001      	adds	r0, #1
 800584c:	d10d      	bne.n	800586a <_printf_float+0x406>
 800584e:	e660      	b.n	8005512 <_printf_float+0xae>
 8005850:	2301      	movs	r3, #1
 8005852:	4642      	mov	r2, r8
 8005854:	4659      	mov	r1, fp
 8005856:	4628      	mov	r0, r5
 8005858:	47b0      	blx	r6
 800585a:	3001      	adds	r0, #1
 800585c:	f43f ae59 	beq.w	8005512 <_printf_float+0xae>
 8005860:	3701      	adds	r7, #1
 8005862:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005864:	3b01      	subs	r3, #1
 8005866:	42bb      	cmp	r3, r7
 8005868:	dcf2      	bgt.n	8005850 <_printf_float+0x3ec>
 800586a:	464b      	mov	r3, r9
 800586c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005870:	e6e4      	b.n	800563c <_printf_float+0x1d8>
 8005872:	2700      	movs	r7, #0
 8005874:	f104 081a 	add.w	r8, r4, #26
 8005878:	e7f3      	b.n	8005862 <_printf_float+0x3fe>
 800587a:	2301      	movs	r3, #1
 800587c:	e7e1      	b.n	8005842 <_printf_float+0x3de>
 800587e:	2301      	movs	r3, #1
 8005880:	4642      	mov	r2, r8
 8005882:	4659      	mov	r1, fp
 8005884:	4628      	mov	r0, r5
 8005886:	47b0      	blx	r6
 8005888:	3001      	adds	r0, #1
 800588a:	f43f ae42 	beq.w	8005512 <_printf_float+0xae>
 800588e:	3701      	adds	r7, #1
 8005890:	68e3      	ldr	r3, [r4, #12]
 8005892:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005894:	1a9b      	subs	r3, r3, r2
 8005896:	42bb      	cmp	r3, r7
 8005898:	dcf1      	bgt.n	800587e <_printf_float+0x41a>
 800589a:	e702      	b.n	80056a2 <_printf_float+0x23e>
 800589c:	2700      	movs	r7, #0
 800589e:	f104 0819 	add.w	r8, r4, #25
 80058a2:	e7f5      	b.n	8005890 <_printf_float+0x42c>
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f43f ae94 	beq.w	80055d2 <_printf_float+0x16e>
 80058aa:	f04f 0c00 	mov.w	ip, #0
 80058ae:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80058b2:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80058b6:	6022      	str	r2, [r4, #0]
 80058b8:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80058bc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	463a      	mov	r2, r7
 80058c4:	464b      	mov	r3, r9
 80058c6:	4628      	mov	r0, r5
 80058c8:	f7ff fd3a 	bl	8005340 <__cvt>
 80058cc:	4607      	mov	r7, r0
 80058ce:	e64f      	b.n	8005570 <_printf_float+0x10c>

080058d0 <_printf_common>:
 80058d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058d4:	4691      	mov	r9, r2
 80058d6:	461f      	mov	r7, r3
 80058d8:	688a      	ldr	r2, [r1, #8]
 80058da:	690b      	ldr	r3, [r1, #16]
 80058dc:	4606      	mov	r6, r0
 80058de:	4293      	cmp	r3, r2
 80058e0:	bfb8      	it	lt
 80058e2:	4613      	movlt	r3, r2
 80058e4:	f8c9 3000 	str.w	r3, [r9]
 80058e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058ec:	460c      	mov	r4, r1
 80058ee:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058f2:	b112      	cbz	r2, 80058fa <_printf_common+0x2a>
 80058f4:	3301      	adds	r3, #1
 80058f6:	f8c9 3000 	str.w	r3, [r9]
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	0699      	lsls	r1, r3, #26
 80058fe:	bf42      	ittt	mi
 8005900:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005904:	3302      	addmi	r3, #2
 8005906:	f8c9 3000 	strmi.w	r3, [r9]
 800590a:	6825      	ldr	r5, [r4, #0]
 800590c:	f015 0506 	ands.w	r5, r5, #6
 8005910:	d107      	bne.n	8005922 <_printf_common+0x52>
 8005912:	f104 0a19 	add.w	sl, r4, #25
 8005916:	68e3      	ldr	r3, [r4, #12]
 8005918:	f8d9 2000 	ldr.w	r2, [r9]
 800591c:	1a9b      	subs	r3, r3, r2
 800591e:	42ab      	cmp	r3, r5
 8005920:	dc29      	bgt.n	8005976 <_printf_common+0xa6>
 8005922:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005926:	6822      	ldr	r2, [r4, #0]
 8005928:	3300      	adds	r3, #0
 800592a:	bf18      	it	ne
 800592c:	2301      	movne	r3, #1
 800592e:	0692      	lsls	r2, r2, #26
 8005930:	d42e      	bmi.n	8005990 <_printf_common+0xc0>
 8005932:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005936:	4639      	mov	r1, r7
 8005938:	4630      	mov	r0, r6
 800593a:	47c0      	blx	r8
 800593c:	3001      	adds	r0, #1
 800593e:	d021      	beq.n	8005984 <_printf_common+0xb4>
 8005940:	6823      	ldr	r3, [r4, #0]
 8005942:	68e5      	ldr	r5, [r4, #12]
 8005944:	f003 0306 	and.w	r3, r3, #6
 8005948:	2b04      	cmp	r3, #4
 800594a:	bf18      	it	ne
 800594c:	2500      	movne	r5, #0
 800594e:	f8d9 2000 	ldr.w	r2, [r9]
 8005952:	f04f 0900 	mov.w	r9, #0
 8005956:	bf08      	it	eq
 8005958:	1aad      	subeq	r5, r5, r2
 800595a:	68a3      	ldr	r3, [r4, #8]
 800595c:	6922      	ldr	r2, [r4, #16]
 800595e:	bf08      	it	eq
 8005960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005964:	4293      	cmp	r3, r2
 8005966:	bfc4      	itt	gt
 8005968:	1a9b      	subgt	r3, r3, r2
 800596a:	18ed      	addgt	r5, r5, r3
 800596c:	341a      	adds	r4, #26
 800596e:	454d      	cmp	r5, r9
 8005970:	d11a      	bne.n	80059a8 <_printf_common+0xd8>
 8005972:	2000      	movs	r0, #0
 8005974:	e008      	b.n	8005988 <_printf_common+0xb8>
 8005976:	2301      	movs	r3, #1
 8005978:	4652      	mov	r2, sl
 800597a:	4639      	mov	r1, r7
 800597c:	4630      	mov	r0, r6
 800597e:	47c0      	blx	r8
 8005980:	3001      	adds	r0, #1
 8005982:	d103      	bne.n	800598c <_printf_common+0xbc>
 8005984:	f04f 30ff 	mov.w	r0, #4294967295
 8005988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800598c:	3501      	adds	r5, #1
 800598e:	e7c2      	b.n	8005916 <_printf_common+0x46>
 8005990:	2030      	movs	r0, #48	; 0x30
 8005992:	18e1      	adds	r1, r4, r3
 8005994:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005998:	1c5a      	adds	r2, r3, #1
 800599a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800599e:	4422      	add	r2, r4
 80059a0:	3302      	adds	r3, #2
 80059a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059a6:	e7c4      	b.n	8005932 <_printf_common+0x62>
 80059a8:	2301      	movs	r3, #1
 80059aa:	4622      	mov	r2, r4
 80059ac:	4639      	mov	r1, r7
 80059ae:	4630      	mov	r0, r6
 80059b0:	47c0      	blx	r8
 80059b2:	3001      	adds	r0, #1
 80059b4:	d0e6      	beq.n	8005984 <_printf_common+0xb4>
 80059b6:	f109 0901 	add.w	r9, r9, #1
 80059ba:	e7d8      	b.n	800596e <_printf_common+0x9e>

080059bc <_printf_i>:
 80059bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80059c0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80059c4:	460c      	mov	r4, r1
 80059c6:	7e09      	ldrb	r1, [r1, #24]
 80059c8:	b085      	sub	sp, #20
 80059ca:	296e      	cmp	r1, #110	; 0x6e
 80059cc:	4617      	mov	r7, r2
 80059ce:	4606      	mov	r6, r0
 80059d0:	4698      	mov	r8, r3
 80059d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059d4:	f000 80b3 	beq.w	8005b3e <_printf_i+0x182>
 80059d8:	d822      	bhi.n	8005a20 <_printf_i+0x64>
 80059da:	2963      	cmp	r1, #99	; 0x63
 80059dc:	d036      	beq.n	8005a4c <_printf_i+0x90>
 80059de:	d80a      	bhi.n	80059f6 <_printf_i+0x3a>
 80059e0:	2900      	cmp	r1, #0
 80059e2:	f000 80b9 	beq.w	8005b58 <_printf_i+0x19c>
 80059e6:	2958      	cmp	r1, #88	; 0x58
 80059e8:	f000 8083 	beq.w	8005af2 <_printf_i+0x136>
 80059ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059f0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80059f4:	e032      	b.n	8005a5c <_printf_i+0xa0>
 80059f6:	2964      	cmp	r1, #100	; 0x64
 80059f8:	d001      	beq.n	80059fe <_printf_i+0x42>
 80059fa:	2969      	cmp	r1, #105	; 0x69
 80059fc:	d1f6      	bne.n	80059ec <_printf_i+0x30>
 80059fe:	6820      	ldr	r0, [r4, #0]
 8005a00:	6813      	ldr	r3, [r2, #0]
 8005a02:	0605      	lsls	r5, r0, #24
 8005a04:	f103 0104 	add.w	r1, r3, #4
 8005a08:	d52a      	bpl.n	8005a60 <_printf_i+0xa4>
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	6011      	str	r1, [r2, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	da03      	bge.n	8005a1a <_printf_i+0x5e>
 8005a12:	222d      	movs	r2, #45	; 0x2d
 8005a14:	425b      	negs	r3, r3
 8005a16:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005a1a:	486f      	ldr	r0, [pc, #444]	; (8005bd8 <_printf_i+0x21c>)
 8005a1c:	220a      	movs	r2, #10
 8005a1e:	e039      	b.n	8005a94 <_printf_i+0xd8>
 8005a20:	2973      	cmp	r1, #115	; 0x73
 8005a22:	f000 809d 	beq.w	8005b60 <_printf_i+0x1a4>
 8005a26:	d808      	bhi.n	8005a3a <_printf_i+0x7e>
 8005a28:	296f      	cmp	r1, #111	; 0x6f
 8005a2a:	d020      	beq.n	8005a6e <_printf_i+0xb2>
 8005a2c:	2970      	cmp	r1, #112	; 0x70
 8005a2e:	d1dd      	bne.n	80059ec <_printf_i+0x30>
 8005a30:	6823      	ldr	r3, [r4, #0]
 8005a32:	f043 0320 	orr.w	r3, r3, #32
 8005a36:	6023      	str	r3, [r4, #0]
 8005a38:	e003      	b.n	8005a42 <_printf_i+0x86>
 8005a3a:	2975      	cmp	r1, #117	; 0x75
 8005a3c:	d017      	beq.n	8005a6e <_printf_i+0xb2>
 8005a3e:	2978      	cmp	r1, #120	; 0x78
 8005a40:	d1d4      	bne.n	80059ec <_printf_i+0x30>
 8005a42:	2378      	movs	r3, #120	; 0x78
 8005a44:	4865      	ldr	r0, [pc, #404]	; (8005bdc <_printf_i+0x220>)
 8005a46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a4a:	e055      	b.n	8005af8 <_printf_i+0x13c>
 8005a4c:	6813      	ldr	r3, [r2, #0]
 8005a4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a52:	1d19      	adds	r1, r3, #4
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6011      	str	r1, [r2, #0]
 8005a58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e08c      	b.n	8005b7a <_printf_i+0x1be>
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a66:	6011      	str	r1, [r2, #0]
 8005a68:	bf18      	it	ne
 8005a6a:	b21b      	sxthne	r3, r3
 8005a6c:	e7cf      	b.n	8005a0e <_printf_i+0x52>
 8005a6e:	6813      	ldr	r3, [r2, #0]
 8005a70:	6825      	ldr	r5, [r4, #0]
 8005a72:	1d18      	adds	r0, r3, #4
 8005a74:	6010      	str	r0, [r2, #0]
 8005a76:	0628      	lsls	r0, r5, #24
 8005a78:	d501      	bpl.n	8005a7e <_printf_i+0xc2>
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	e002      	b.n	8005a84 <_printf_i+0xc8>
 8005a7e:	0668      	lsls	r0, r5, #25
 8005a80:	d5fb      	bpl.n	8005a7a <_printf_i+0xbe>
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	296f      	cmp	r1, #111	; 0x6f
 8005a86:	bf14      	ite	ne
 8005a88:	220a      	movne	r2, #10
 8005a8a:	2208      	moveq	r2, #8
 8005a8c:	4852      	ldr	r0, [pc, #328]	; (8005bd8 <_printf_i+0x21c>)
 8005a8e:	2100      	movs	r1, #0
 8005a90:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a94:	6865      	ldr	r5, [r4, #4]
 8005a96:	2d00      	cmp	r5, #0
 8005a98:	60a5      	str	r5, [r4, #8]
 8005a9a:	f2c0 8095 	blt.w	8005bc8 <_printf_i+0x20c>
 8005a9e:	6821      	ldr	r1, [r4, #0]
 8005aa0:	f021 0104 	bic.w	r1, r1, #4
 8005aa4:	6021      	str	r1, [r4, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d13d      	bne.n	8005b26 <_printf_i+0x16a>
 8005aaa:	2d00      	cmp	r5, #0
 8005aac:	f040 808e 	bne.w	8005bcc <_printf_i+0x210>
 8005ab0:	4665      	mov	r5, ip
 8005ab2:	2a08      	cmp	r2, #8
 8005ab4:	d10b      	bne.n	8005ace <_printf_i+0x112>
 8005ab6:	6823      	ldr	r3, [r4, #0]
 8005ab8:	07db      	lsls	r3, r3, #31
 8005aba:	d508      	bpl.n	8005ace <_printf_i+0x112>
 8005abc:	6923      	ldr	r3, [r4, #16]
 8005abe:	6862      	ldr	r2, [r4, #4]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	bfde      	ittt	le
 8005ac4:	2330      	movle	r3, #48	; 0x30
 8005ac6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005aca:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ace:	ebac 0305 	sub.w	r3, ip, r5
 8005ad2:	6123      	str	r3, [r4, #16]
 8005ad4:	f8cd 8000 	str.w	r8, [sp]
 8005ad8:	463b      	mov	r3, r7
 8005ada:	aa03      	add	r2, sp, #12
 8005adc:	4621      	mov	r1, r4
 8005ade:	4630      	mov	r0, r6
 8005ae0:	f7ff fef6 	bl	80058d0 <_printf_common>
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	d14d      	bne.n	8005b84 <_printf_i+0x1c8>
 8005ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8005aec:	b005      	add	sp, #20
 8005aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005af2:	4839      	ldr	r0, [pc, #228]	; (8005bd8 <_printf_i+0x21c>)
 8005af4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005af8:	6813      	ldr	r3, [r2, #0]
 8005afa:	6821      	ldr	r1, [r4, #0]
 8005afc:	1d1d      	adds	r5, r3, #4
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6015      	str	r5, [r2, #0]
 8005b02:	060a      	lsls	r2, r1, #24
 8005b04:	d50b      	bpl.n	8005b1e <_printf_i+0x162>
 8005b06:	07ca      	lsls	r2, r1, #31
 8005b08:	bf44      	itt	mi
 8005b0a:	f041 0120 	orrmi.w	r1, r1, #32
 8005b0e:	6021      	strmi	r1, [r4, #0]
 8005b10:	b91b      	cbnz	r3, 8005b1a <_printf_i+0x15e>
 8005b12:	6822      	ldr	r2, [r4, #0]
 8005b14:	f022 0220 	bic.w	r2, r2, #32
 8005b18:	6022      	str	r2, [r4, #0]
 8005b1a:	2210      	movs	r2, #16
 8005b1c:	e7b7      	b.n	8005a8e <_printf_i+0xd2>
 8005b1e:	064d      	lsls	r5, r1, #25
 8005b20:	bf48      	it	mi
 8005b22:	b29b      	uxthmi	r3, r3
 8005b24:	e7ef      	b.n	8005b06 <_printf_i+0x14a>
 8005b26:	4665      	mov	r5, ip
 8005b28:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b2c:	fb02 3311 	mls	r3, r2, r1, r3
 8005b30:	5cc3      	ldrb	r3, [r0, r3]
 8005b32:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005b36:	460b      	mov	r3, r1
 8005b38:	2900      	cmp	r1, #0
 8005b3a:	d1f5      	bne.n	8005b28 <_printf_i+0x16c>
 8005b3c:	e7b9      	b.n	8005ab2 <_printf_i+0xf6>
 8005b3e:	6813      	ldr	r3, [r2, #0]
 8005b40:	6825      	ldr	r5, [r4, #0]
 8005b42:	1d18      	adds	r0, r3, #4
 8005b44:	6961      	ldr	r1, [r4, #20]
 8005b46:	6010      	str	r0, [r2, #0]
 8005b48:	0628      	lsls	r0, r5, #24
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	d501      	bpl.n	8005b52 <_printf_i+0x196>
 8005b4e:	6019      	str	r1, [r3, #0]
 8005b50:	e002      	b.n	8005b58 <_printf_i+0x19c>
 8005b52:	066a      	lsls	r2, r5, #25
 8005b54:	d5fb      	bpl.n	8005b4e <_printf_i+0x192>
 8005b56:	8019      	strh	r1, [r3, #0]
 8005b58:	2300      	movs	r3, #0
 8005b5a:	4665      	mov	r5, ip
 8005b5c:	6123      	str	r3, [r4, #16]
 8005b5e:	e7b9      	b.n	8005ad4 <_printf_i+0x118>
 8005b60:	6813      	ldr	r3, [r2, #0]
 8005b62:	1d19      	adds	r1, r3, #4
 8005b64:	6011      	str	r1, [r2, #0]
 8005b66:	681d      	ldr	r5, [r3, #0]
 8005b68:	6862      	ldr	r2, [r4, #4]
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	4628      	mov	r0, r5
 8005b6e:	f002 f8d9 	bl	8007d24 <memchr>
 8005b72:	b108      	cbz	r0, 8005b78 <_printf_i+0x1bc>
 8005b74:	1b40      	subs	r0, r0, r5
 8005b76:	6060      	str	r0, [r4, #4]
 8005b78:	6863      	ldr	r3, [r4, #4]
 8005b7a:	6123      	str	r3, [r4, #16]
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b82:	e7a7      	b.n	8005ad4 <_printf_i+0x118>
 8005b84:	6923      	ldr	r3, [r4, #16]
 8005b86:	462a      	mov	r2, r5
 8005b88:	4639      	mov	r1, r7
 8005b8a:	4630      	mov	r0, r6
 8005b8c:	47c0      	blx	r8
 8005b8e:	3001      	adds	r0, #1
 8005b90:	d0aa      	beq.n	8005ae8 <_printf_i+0x12c>
 8005b92:	6823      	ldr	r3, [r4, #0]
 8005b94:	079b      	lsls	r3, r3, #30
 8005b96:	d413      	bmi.n	8005bc0 <_printf_i+0x204>
 8005b98:	68e0      	ldr	r0, [r4, #12]
 8005b9a:	9b03      	ldr	r3, [sp, #12]
 8005b9c:	4298      	cmp	r0, r3
 8005b9e:	bfb8      	it	lt
 8005ba0:	4618      	movlt	r0, r3
 8005ba2:	e7a3      	b.n	8005aec <_printf_i+0x130>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	464a      	mov	r2, r9
 8005ba8:	4639      	mov	r1, r7
 8005baa:	4630      	mov	r0, r6
 8005bac:	47c0      	blx	r8
 8005bae:	3001      	adds	r0, #1
 8005bb0:	d09a      	beq.n	8005ae8 <_printf_i+0x12c>
 8005bb2:	3501      	adds	r5, #1
 8005bb4:	68e3      	ldr	r3, [r4, #12]
 8005bb6:	9a03      	ldr	r2, [sp, #12]
 8005bb8:	1a9b      	subs	r3, r3, r2
 8005bba:	42ab      	cmp	r3, r5
 8005bbc:	dcf2      	bgt.n	8005ba4 <_printf_i+0x1e8>
 8005bbe:	e7eb      	b.n	8005b98 <_printf_i+0x1dc>
 8005bc0:	2500      	movs	r5, #0
 8005bc2:	f104 0919 	add.w	r9, r4, #25
 8005bc6:	e7f5      	b.n	8005bb4 <_printf_i+0x1f8>
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1ac      	bne.n	8005b26 <_printf_i+0x16a>
 8005bcc:	7803      	ldrb	r3, [r0, #0]
 8005bce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bd2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bd6:	e76c      	b.n	8005ab2 <_printf_i+0xf6>
 8005bd8:	08008c9e 	.word	0x08008c9e
 8005bdc:	08008caf 	.word	0x08008caf

08005be0 <siprintf>:
 8005be0:	b40e      	push	{r1, r2, r3}
 8005be2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005be6:	b500      	push	{lr}
 8005be8:	b09c      	sub	sp, #112	; 0x70
 8005bea:	ab1d      	add	r3, sp, #116	; 0x74
 8005bec:	9002      	str	r0, [sp, #8]
 8005bee:	9006      	str	r0, [sp, #24]
 8005bf0:	9107      	str	r1, [sp, #28]
 8005bf2:	9104      	str	r1, [sp, #16]
 8005bf4:	4808      	ldr	r0, [pc, #32]	; (8005c18 <siprintf+0x38>)
 8005bf6:	4909      	ldr	r1, [pc, #36]	; (8005c1c <siprintf+0x3c>)
 8005bf8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bfc:	9105      	str	r1, [sp, #20]
 8005bfe:	6800      	ldr	r0, [r0, #0]
 8005c00:	a902      	add	r1, sp, #8
 8005c02:	9301      	str	r3, [sp, #4]
 8005c04:	f002 fdae 	bl	8008764 <_svfiprintf_r>
 8005c08:	2200      	movs	r2, #0
 8005c0a:	9b02      	ldr	r3, [sp, #8]
 8005c0c:	701a      	strb	r2, [r3, #0]
 8005c0e:	b01c      	add	sp, #112	; 0x70
 8005c10:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c14:	b003      	add	sp, #12
 8005c16:	4770      	bx	lr
 8005c18:	2000000c 	.word	0x2000000c
 8005c1c:	ffff0208 	.word	0xffff0208

08005c20 <strcpy>:
 8005c20:	4603      	mov	r3, r0
 8005c22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c26:	f803 2b01 	strb.w	r2, [r3], #1
 8005c2a:	2a00      	cmp	r2, #0
 8005c2c:	d1f9      	bne.n	8005c22 <strcpy+0x2>
 8005c2e:	4770      	bx	lr

08005c30 <strpbrk>:
 8005c30:	b570      	push	{r4, r5, r6, lr}
 8005c32:	7803      	ldrb	r3, [r0, #0]
 8005c34:	b1a3      	cbz	r3, 8005c60 <strpbrk+0x30>
 8005c36:	4603      	mov	r3, r0
 8005c38:	460c      	mov	r4, r1
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f813 5b01 	ldrb.w	r5, [r3], #1
 8005c40:	b14d      	cbz	r5, 8005c56 <strpbrk+0x26>
 8005c42:	460a      	mov	r2, r1
 8005c44:	e001      	b.n	8005c4a <strpbrk+0x1a>
 8005c46:	42ae      	cmp	r6, r5
 8005c48:	d005      	beq.n	8005c56 <strpbrk+0x26>
 8005c4a:	4614      	mov	r4, r2
 8005c4c:	f812 6b01 	ldrb.w	r6, [r2], #1
 8005c50:	2e00      	cmp	r6, #0
 8005c52:	d1f8      	bne.n	8005c46 <strpbrk+0x16>
 8005c54:	e7f1      	b.n	8005c3a <strpbrk+0xa>
 8005c56:	7823      	ldrb	r3, [r4, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	bf08      	it	eq
 8005c5c:	2000      	moveq	r0, #0
 8005c5e:	bd70      	pop	{r4, r5, r6, pc}
 8005c60:	4618      	mov	r0, r3
 8005c62:	e7fc      	b.n	8005c5e <strpbrk+0x2e>

08005c64 <sulp>:
 8005c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c68:	460f      	mov	r7, r1
 8005c6a:	4690      	mov	r8, r2
 8005c6c:	f002 fb3e 	bl	80082ec <__ulp>
 8005c70:	4604      	mov	r4, r0
 8005c72:	460d      	mov	r5, r1
 8005c74:	f1b8 0f00 	cmp.w	r8, #0
 8005c78:	d011      	beq.n	8005c9e <sulp+0x3a>
 8005c7a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005c7e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	dd0b      	ble.n	8005c9e <sulp+0x3a>
 8005c86:	2400      	movs	r4, #0
 8005c88:	051b      	lsls	r3, r3, #20
 8005c8a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005c8e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005c92:	4622      	mov	r2, r4
 8005c94:	462b      	mov	r3, r5
 8005c96:	f7fa fc29 	bl	80004ec <__aeabi_dmul>
 8005c9a:	4604      	mov	r4, r0
 8005c9c:	460d      	mov	r5, r1
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	4629      	mov	r1, r5
 8005ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005ca8 <_strtod_l>:
 8005ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cac:	461f      	mov	r7, r3
 8005cae:	2300      	movs	r3, #0
 8005cb0:	b0a1      	sub	sp, #132	; 0x84
 8005cb2:	4683      	mov	fp, r0
 8005cb4:	4638      	mov	r0, r7
 8005cb6:	460e      	mov	r6, r1
 8005cb8:	9217      	str	r2, [sp, #92]	; 0x5c
 8005cba:	931c      	str	r3, [sp, #112]	; 0x70
 8005cbc:	f002 f807 	bl	8007cce <__localeconv_l>
 8005cc0:	4680      	mov	r8, r0
 8005cc2:	6800      	ldr	r0, [r0, #0]
 8005cc4:	f7fa fa4e 	bl	8000164 <strlen>
 8005cc8:	f04f 0900 	mov.w	r9, #0
 8005ccc:	4604      	mov	r4, r0
 8005cce:	f04f 0a00 	mov.w	sl, #0
 8005cd2:	961b      	str	r6, [sp, #108]	; 0x6c
 8005cd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005cd6:	781a      	ldrb	r2, [r3, #0]
 8005cd8:	2a0d      	cmp	r2, #13
 8005cda:	d832      	bhi.n	8005d42 <_strtod_l+0x9a>
 8005cdc:	2a09      	cmp	r2, #9
 8005cde:	d236      	bcs.n	8005d4e <_strtod_l+0xa6>
 8005ce0:	2a00      	cmp	r2, #0
 8005ce2:	d03e      	beq.n	8005d62 <_strtod_l+0xba>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	930d      	str	r3, [sp, #52]	; 0x34
 8005ce8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005cea:	782b      	ldrb	r3, [r5, #0]
 8005cec:	2b30      	cmp	r3, #48	; 0x30
 8005cee:	f040 80ac 	bne.w	8005e4a <_strtod_l+0x1a2>
 8005cf2:	786b      	ldrb	r3, [r5, #1]
 8005cf4:	2b58      	cmp	r3, #88	; 0x58
 8005cf6:	d001      	beq.n	8005cfc <_strtod_l+0x54>
 8005cf8:	2b78      	cmp	r3, #120	; 0x78
 8005cfa:	d167      	bne.n	8005dcc <_strtod_l+0x124>
 8005cfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cfe:	9702      	str	r7, [sp, #8]
 8005d00:	9301      	str	r3, [sp, #4]
 8005d02:	ab1c      	add	r3, sp, #112	; 0x70
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	4a89      	ldr	r2, [pc, #548]	; (8005f2c <_strtod_l+0x284>)
 8005d08:	ab1d      	add	r3, sp, #116	; 0x74
 8005d0a:	a91b      	add	r1, sp, #108	; 0x6c
 8005d0c:	4658      	mov	r0, fp
 8005d0e:	f001 fd03 	bl	8007718 <__gethex>
 8005d12:	f010 0407 	ands.w	r4, r0, #7
 8005d16:	4606      	mov	r6, r0
 8005d18:	d005      	beq.n	8005d26 <_strtod_l+0x7e>
 8005d1a:	2c06      	cmp	r4, #6
 8005d1c:	d12b      	bne.n	8005d76 <_strtod_l+0xce>
 8005d1e:	2300      	movs	r3, #0
 8005d20:	3501      	adds	r5, #1
 8005d22:	951b      	str	r5, [sp, #108]	; 0x6c
 8005d24:	930d      	str	r3, [sp, #52]	; 0x34
 8005d26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f040 85a6 	bne.w	800687a <_strtod_l+0xbd2>
 8005d2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d30:	b1e3      	cbz	r3, 8005d6c <_strtod_l+0xc4>
 8005d32:	464a      	mov	r2, r9
 8005d34:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8005d38:	4610      	mov	r0, r2
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	b021      	add	sp, #132	; 0x84
 8005d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d42:	2a2b      	cmp	r2, #43	; 0x2b
 8005d44:	d015      	beq.n	8005d72 <_strtod_l+0xca>
 8005d46:	2a2d      	cmp	r2, #45	; 0x2d
 8005d48:	d004      	beq.n	8005d54 <_strtod_l+0xac>
 8005d4a:	2a20      	cmp	r2, #32
 8005d4c:	d1ca      	bne.n	8005ce4 <_strtod_l+0x3c>
 8005d4e:	3301      	adds	r3, #1
 8005d50:	931b      	str	r3, [sp, #108]	; 0x6c
 8005d52:	e7bf      	b.n	8005cd4 <_strtod_l+0x2c>
 8005d54:	2201      	movs	r2, #1
 8005d56:	920d      	str	r2, [sp, #52]	; 0x34
 8005d58:	1c5a      	adds	r2, r3, #1
 8005d5a:	921b      	str	r2, [sp, #108]	; 0x6c
 8005d5c:	785b      	ldrb	r3, [r3, #1]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1c2      	bne.n	8005ce8 <_strtod_l+0x40>
 8005d62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d64:	961b      	str	r6, [sp, #108]	; 0x6c
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f040 8585 	bne.w	8006876 <_strtod_l+0xbce>
 8005d6c:	464a      	mov	r2, r9
 8005d6e:	4653      	mov	r3, sl
 8005d70:	e7e2      	b.n	8005d38 <_strtod_l+0x90>
 8005d72:	2200      	movs	r2, #0
 8005d74:	e7ef      	b.n	8005d56 <_strtod_l+0xae>
 8005d76:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005d78:	b13a      	cbz	r2, 8005d8a <_strtod_l+0xe2>
 8005d7a:	2135      	movs	r1, #53	; 0x35
 8005d7c:	a81e      	add	r0, sp, #120	; 0x78
 8005d7e:	f002 fba8 	bl	80084d2 <__copybits>
 8005d82:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005d84:	4658      	mov	r0, fp
 8005d86:	f002 f81a 	bl	8007dbe <_Bfree>
 8005d8a:	3c01      	subs	r4, #1
 8005d8c:	2c04      	cmp	r4, #4
 8005d8e:	d806      	bhi.n	8005d9e <_strtod_l+0xf6>
 8005d90:	e8df f004 	tbb	[pc, r4]
 8005d94:	1714030a 	.word	0x1714030a
 8005d98:	0a          	.byte	0x0a
 8005d99:	00          	.byte	0x00
 8005d9a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8005d9e:	0731      	lsls	r1, r6, #28
 8005da0:	d5c1      	bpl.n	8005d26 <_strtod_l+0x7e>
 8005da2:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8005da6:	e7be      	b.n	8005d26 <_strtod_l+0x7e>
 8005da8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005daa:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8005dae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005db2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005db6:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8005dba:	e7f0      	b.n	8005d9e <_strtod_l+0xf6>
 8005dbc:	f8df a170 	ldr.w	sl, [pc, #368]	; 8005f30 <_strtod_l+0x288>
 8005dc0:	e7ed      	b.n	8005d9e <_strtod_l+0xf6>
 8005dc2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8005dc6:	f04f 39ff 	mov.w	r9, #4294967295
 8005dca:	e7e8      	b.n	8005d9e <_strtod_l+0xf6>
 8005dcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005dce:	1c5a      	adds	r2, r3, #1
 8005dd0:	921b      	str	r2, [sp, #108]	; 0x6c
 8005dd2:	785b      	ldrb	r3, [r3, #1]
 8005dd4:	2b30      	cmp	r3, #48	; 0x30
 8005dd6:	d0f9      	beq.n	8005dcc <_strtod_l+0x124>
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d0a4      	beq.n	8005d26 <_strtod_l+0x7e>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	2500      	movs	r5, #0
 8005de0:	220a      	movs	r2, #10
 8005de2:	9307      	str	r3, [sp, #28]
 8005de4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005de6:	9506      	str	r5, [sp, #24]
 8005de8:	9308      	str	r3, [sp, #32]
 8005dea:	9504      	str	r5, [sp, #16]
 8005dec:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005dee:	7807      	ldrb	r7, [r0, #0]
 8005df0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8005df4:	b2d9      	uxtb	r1, r3
 8005df6:	2909      	cmp	r1, #9
 8005df8:	d929      	bls.n	8005e4e <_strtod_l+0x1a6>
 8005dfa:	4622      	mov	r2, r4
 8005dfc:	f8d8 1000 	ldr.w	r1, [r8]
 8005e00:	f002 fdb8 	bl	8008974 <strncmp>
 8005e04:	2800      	cmp	r0, #0
 8005e06:	d031      	beq.n	8005e6c <_strtod_l+0x1c4>
 8005e08:	2000      	movs	r0, #0
 8005e0a:	463b      	mov	r3, r7
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	9c04      	ldr	r4, [sp, #16]
 8005e10:	9005      	str	r0, [sp, #20]
 8005e12:	2b65      	cmp	r3, #101	; 0x65
 8005e14:	d001      	beq.n	8005e1a <_strtod_l+0x172>
 8005e16:	2b45      	cmp	r3, #69	; 0x45
 8005e18:	d114      	bne.n	8005e44 <_strtod_l+0x19c>
 8005e1a:	b924      	cbnz	r4, 8005e26 <_strtod_l+0x17e>
 8005e1c:	b910      	cbnz	r0, 8005e24 <_strtod_l+0x17c>
 8005e1e:	9b07      	ldr	r3, [sp, #28]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d09e      	beq.n	8005d62 <_strtod_l+0xba>
 8005e24:	2400      	movs	r4, #0
 8005e26:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005e28:	1c73      	adds	r3, r6, #1
 8005e2a:	931b      	str	r3, [sp, #108]	; 0x6c
 8005e2c:	7873      	ldrb	r3, [r6, #1]
 8005e2e:	2b2b      	cmp	r3, #43	; 0x2b
 8005e30:	d078      	beq.n	8005f24 <_strtod_l+0x27c>
 8005e32:	2b2d      	cmp	r3, #45	; 0x2d
 8005e34:	d070      	beq.n	8005f18 <_strtod_l+0x270>
 8005e36:	f04f 0c00 	mov.w	ip, #0
 8005e3a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8005e3e:	2f09      	cmp	r7, #9
 8005e40:	d97c      	bls.n	8005f3c <_strtod_l+0x294>
 8005e42:	961b      	str	r6, [sp, #108]	; 0x6c
 8005e44:	f04f 0e00 	mov.w	lr, #0
 8005e48:	e09a      	b.n	8005f80 <_strtod_l+0x2d8>
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	e7c7      	b.n	8005dde <_strtod_l+0x136>
 8005e4e:	9904      	ldr	r1, [sp, #16]
 8005e50:	3001      	adds	r0, #1
 8005e52:	2908      	cmp	r1, #8
 8005e54:	bfd7      	itett	le
 8005e56:	9906      	ldrle	r1, [sp, #24]
 8005e58:	fb02 3505 	mlagt	r5, r2, r5, r3
 8005e5c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005e60:	9306      	strle	r3, [sp, #24]
 8005e62:	9b04      	ldr	r3, [sp, #16]
 8005e64:	901b      	str	r0, [sp, #108]	; 0x6c
 8005e66:	3301      	adds	r3, #1
 8005e68:	9304      	str	r3, [sp, #16]
 8005e6a:	e7bf      	b.n	8005dec <_strtod_l+0x144>
 8005e6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e6e:	191a      	adds	r2, r3, r4
 8005e70:	921b      	str	r2, [sp, #108]	; 0x6c
 8005e72:	9a04      	ldr	r2, [sp, #16]
 8005e74:	5d1b      	ldrb	r3, [r3, r4]
 8005e76:	2a00      	cmp	r2, #0
 8005e78:	d037      	beq.n	8005eea <_strtod_l+0x242>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	9c04      	ldr	r4, [sp, #16]
 8005e7e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005e82:	2909      	cmp	r1, #9
 8005e84:	d913      	bls.n	8005eae <_strtod_l+0x206>
 8005e86:	2101      	movs	r1, #1
 8005e88:	9105      	str	r1, [sp, #20]
 8005e8a:	e7c2      	b.n	8005e12 <_strtod_l+0x16a>
 8005e8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005e8e:	3001      	adds	r0, #1
 8005e90:	1c5a      	adds	r2, r3, #1
 8005e92:	921b      	str	r2, [sp, #108]	; 0x6c
 8005e94:	785b      	ldrb	r3, [r3, #1]
 8005e96:	2b30      	cmp	r3, #48	; 0x30
 8005e98:	d0f8      	beq.n	8005e8c <_strtod_l+0x1e4>
 8005e9a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005e9e:	2a08      	cmp	r2, #8
 8005ea0:	f200 84f0 	bhi.w	8006884 <_strtod_l+0xbdc>
 8005ea4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005ea6:	9208      	str	r2, [sp, #32]
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	2000      	movs	r0, #0
 8005eac:	4604      	mov	r4, r0
 8005eae:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8005eb2:	f100 0101 	add.w	r1, r0, #1
 8005eb6:	d012      	beq.n	8005ede <_strtod_l+0x236>
 8005eb8:	440a      	add	r2, r1
 8005eba:	270a      	movs	r7, #10
 8005ebc:	4621      	mov	r1, r4
 8005ebe:	eb00 0c04 	add.w	ip, r0, r4
 8005ec2:	458c      	cmp	ip, r1
 8005ec4:	d113      	bne.n	8005eee <_strtod_l+0x246>
 8005ec6:	1821      	adds	r1, r4, r0
 8005ec8:	2908      	cmp	r1, #8
 8005eca:	f104 0401 	add.w	r4, r4, #1
 8005ece:	4404      	add	r4, r0
 8005ed0:	dc19      	bgt.n	8005f06 <_strtod_l+0x25e>
 8005ed2:	210a      	movs	r1, #10
 8005ed4:	9b06      	ldr	r3, [sp, #24]
 8005ed6:	fb01 e303 	mla	r3, r1, r3, lr
 8005eda:	9306      	str	r3, [sp, #24]
 8005edc:	2100      	movs	r1, #0
 8005ede:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ee0:	1c58      	adds	r0, r3, #1
 8005ee2:	901b      	str	r0, [sp, #108]	; 0x6c
 8005ee4:	785b      	ldrb	r3, [r3, #1]
 8005ee6:	4608      	mov	r0, r1
 8005ee8:	e7c9      	b.n	8005e7e <_strtod_l+0x1d6>
 8005eea:	9804      	ldr	r0, [sp, #16]
 8005eec:	e7d3      	b.n	8005e96 <_strtod_l+0x1ee>
 8005eee:	2908      	cmp	r1, #8
 8005ef0:	f101 0101 	add.w	r1, r1, #1
 8005ef4:	dc03      	bgt.n	8005efe <_strtod_l+0x256>
 8005ef6:	9b06      	ldr	r3, [sp, #24]
 8005ef8:	437b      	muls	r3, r7
 8005efa:	9306      	str	r3, [sp, #24]
 8005efc:	e7e1      	b.n	8005ec2 <_strtod_l+0x21a>
 8005efe:	2910      	cmp	r1, #16
 8005f00:	bfd8      	it	le
 8005f02:	437d      	mulle	r5, r7
 8005f04:	e7dd      	b.n	8005ec2 <_strtod_l+0x21a>
 8005f06:	2c10      	cmp	r4, #16
 8005f08:	bfdc      	itt	le
 8005f0a:	210a      	movle	r1, #10
 8005f0c:	fb01 e505 	mlale	r5, r1, r5, lr
 8005f10:	e7e4      	b.n	8005edc <_strtod_l+0x234>
 8005f12:	2301      	movs	r3, #1
 8005f14:	9305      	str	r3, [sp, #20]
 8005f16:	e781      	b.n	8005e1c <_strtod_l+0x174>
 8005f18:	f04f 0c01 	mov.w	ip, #1
 8005f1c:	1cb3      	adds	r3, r6, #2
 8005f1e:	931b      	str	r3, [sp, #108]	; 0x6c
 8005f20:	78b3      	ldrb	r3, [r6, #2]
 8005f22:	e78a      	b.n	8005e3a <_strtod_l+0x192>
 8005f24:	f04f 0c00 	mov.w	ip, #0
 8005f28:	e7f8      	b.n	8005f1c <_strtod_l+0x274>
 8005f2a:	bf00      	nop
 8005f2c:	08008cc0 	.word	0x08008cc0
 8005f30:	7ff00000 	.word	0x7ff00000
 8005f34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f36:	1c5f      	adds	r7, r3, #1
 8005f38:	971b      	str	r7, [sp, #108]	; 0x6c
 8005f3a:	785b      	ldrb	r3, [r3, #1]
 8005f3c:	2b30      	cmp	r3, #48	; 0x30
 8005f3e:	d0f9      	beq.n	8005f34 <_strtod_l+0x28c>
 8005f40:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8005f44:	2f08      	cmp	r7, #8
 8005f46:	f63f af7d 	bhi.w	8005e44 <_strtod_l+0x19c>
 8005f4a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005f4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f50:	9309      	str	r3, [sp, #36]	; 0x24
 8005f52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f54:	1c5f      	adds	r7, r3, #1
 8005f56:	971b      	str	r7, [sp, #108]	; 0x6c
 8005f58:	785b      	ldrb	r3, [r3, #1]
 8005f5a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8005f5e:	f1b8 0f09 	cmp.w	r8, #9
 8005f62:	d937      	bls.n	8005fd4 <_strtod_l+0x32c>
 8005f64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f66:	1a7f      	subs	r7, r7, r1
 8005f68:	2f08      	cmp	r7, #8
 8005f6a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005f6e:	dc37      	bgt.n	8005fe0 <_strtod_l+0x338>
 8005f70:	45be      	cmp	lr, r7
 8005f72:	bfa8      	it	ge
 8005f74:	46be      	movge	lr, r7
 8005f76:	f1bc 0f00 	cmp.w	ip, #0
 8005f7a:	d001      	beq.n	8005f80 <_strtod_l+0x2d8>
 8005f7c:	f1ce 0e00 	rsb	lr, lr, #0
 8005f80:	2c00      	cmp	r4, #0
 8005f82:	d151      	bne.n	8006028 <_strtod_l+0x380>
 8005f84:	2800      	cmp	r0, #0
 8005f86:	f47f aece 	bne.w	8005d26 <_strtod_l+0x7e>
 8005f8a:	9a07      	ldr	r2, [sp, #28]
 8005f8c:	2a00      	cmp	r2, #0
 8005f8e:	f47f aeca 	bne.w	8005d26 <_strtod_l+0x7e>
 8005f92:	9a05      	ldr	r2, [sp, #20]
 8005f94:	2a00      	cmp	r2, #0
 8005f96:	f47f aee4 	bne.w	8005d62 <_strtod_l+0xba>
 8005f9a:	2b4e      	cmp	r3, #78	; 0x4e
 8005f9c:	d027      	beq.n	8005fee <_strtod_l+0x346>
 8005f9e:	dc21      	bgt.n	8005fe4 <_strtod_l+0x33c>
 8005fa0:	2b49      	cmp	r3, #73	; 0x49
 8005fa2:	f47f aede 	bne.w	8005d62 <_strtod_l+0xba>
 8005fa6:	49a4      	ldr	r1, [pc, #656]	; (8006238 <_strtod_l+0x590>)
 8005fa8:	a81b      	add	r0, sp, #108	; 0x6c
 8005faa:	f001 fde9 	bl	8007b80 <__match>
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	f43f aed7 	beq.w	8005d62 <_strtod_l+0xba>
 8005fb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005fb6:	49a1      	ldr	r1, [pc, #644]	; (800623c <_strtod_l+0x594>)
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	a81b      	add	r0, sp, #108	; 0x6c
 8005fbc:	931b      	str	r3, [sp, #108]	; 0x6c
 8005fbe:	f001 fddf 	bl	8007b80 <__match>
 8005fc2:	b910      	cbnz	r0, 8005fca <_strtod_l+0x322>
 8005fc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	931b      	str	r3, [sp, #108]	; 0x6c
 8005fca:	f8df a284 	ldr.w	sl, [pc, #644]	; 8006250 <_strtod_l+0x5a8>
 8005fce:	f04f 0900 	mov.w	r9, #0
 8005fd2:	e6a8      	b.n	8005d26 <_strtod_l+0x7e>
 8005fd4:	210a      	movs	r1, #10
 8005fd6:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005fda:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005fde:	e7b8      	b.n	8005f52 <_strtod_l+0x2aa>
 8005fe0:	46be      	mov	lr, r7
 8005fe2:	e7c8      	b.n	8005f76 <_strtod_l+0x2ce>
 8005fe4:	2b69      	cmp	r3, #105	; 0x69
 8005fe6:	d0de      	beq.n	8005fa6 <_strtod_l+0x2fe>
 8005fe8:	2b6e      	cmp	r3, #110	; 0x6e
 8005fea:	f47f aeba 	bne.w	8005d62 <_strtod_l+0xba>
 8005fee:	4994      	ldr	r1, [pc, #592]	; (8006240 <_strtod_l+0x598>)
 8005ff0:	a81b      	add	r0, sp, #108	; 0x6c
 8005ff2:	f001 fdc5 	bl	8007b80 <__match>
 8005ff6:	2800      	cmp	r0, #0
 8005ff8:	f43f aeb3 	beq.w	8005d62 <_strtod_l+0xba>
 8005ffc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	2b28      	cmp	r3, #40	; 0x28
 8006002:	d10e      	bne.n	8006022 <_strtod_l+0x37a>
 8006004:	aa1e      	add	r2, sp, #120	; 0x78
 8006006:	498f      	ldr	r1, [pc, #572]	; (8006244 <_strtod_l+0x59c>)
 8006008:	a81b      	add	r0, sp, #108	; 0x6c
 800600a:	f001 fdcd 	bl	8007ba8 <__hexnan>
 800600e:	2805      	cmp	r0, #5
 8006010:	d107      	bne.n	8006022 <_strtod_l+0x37a>
 8006012:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006014:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8006018:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800601c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8006020:	e681      	b.n	8005d26 <_strtod_l+0x7e>
 8006022:	f8df a234 	ldr.w	sl, [pc, #564]	; 8006258 <_strtod_l+0x5b0>
 8006026:	e7d2      	b.n	8005fce <_strtod_l+0x326>
 8006028:	ebae 0302 	sub.w	r3, lr, r2
 800602c:	9307      	str	r3, [sp, #28]
 800602e:	9b04      	ldr	r3, [sp, #16]
 8006030:	9806      	ldr	r0, [sp, #24]
 8006032:	2b00      	cmp	r3, #0
 8006034:	bf08      	it	eq
 8006036:	4623      	moveq	r3, r4
 8006038:	2c10      	cmp	r4, #16
 800603a:	9304      	str	r3, [sp, #16]
 800603c:	46a0      	mov	r8, r4
 800603e:	bfa8      	it	ge
 8006040:	f04f 0810 	movge.w	r8, #16
 8006044:	f7fa f9d8 	bl	80003f8 <__aeabi_ui2d>
 8006048:	2c09      	cmp	r4, #9
 800604a:	4681      	mov	r9, r0
 800604c:	468a      	mov	sl, r1
 800604e:	dc13      	bgt.n	8006078 <_strtod_l+0x3d0>
 8006050:	9b07      	ldr	r3, [sp, #28]
 8006052:	2b00      	cmp	r3, #0
 8006054:	f43f ae67 	beq.w	8005d26 <_strtod_l+0x7e>
 8006058:	9b07      	ldr	r3, [sp, #28]
 800605a:	dd7e      	ble.n	800615a <_strtod_l+0x4b2>
 800605c:	2b16      	cmp	r3, #22
 800605e:	dc65      	bgt.n	800612c <_strtod_l+0x484>
 8006060:	4a79      	ldr	r2, [pc, #484]	; (8006248 <_strtod_l+0x5a0>)
 8006062:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8006066:	464a      	mov	r2, r9
 8006068:	e9de 0100 	ldrd	r0, r1, [lr]
 800606c:	4653      	mov	r3, sl
 800606e:	f7fa fa3d 	bl	80004ec <__aeabi_dmul>
 8006072:	4681      	mov	r9, r0
 8006074:	468a      	mov	sl, r1
 8006076:	e656      	b.n	8005d26 <_strtod_l+0x7e>
 8006078:	4b73      	ldr	r3, [pc, #460]	; (8006248 <_strtod_l+0x5a0>)
 800607a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800607e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006082:	f7fa fa33 	bl	80004ec <__aeabi_dmul>
 8006086:	4606      	mov	r6, r0
 8006088:	4628      	mov	r0, r5
 800608a:	460f      	mov	r7, r1
 800608c:	f7fa f9b4 	bl	80003f8 <__aeabi_ui2d>
 8006090:	4602      	mov	r2, r0
 8006092:	460b      	mov	r3, r1
 8006094:	4630      	mov	r0, r6
 8006096:	4639      	mov	r1, r7
 8006098:	f7fa f872 	bl	8000180 <__adddf3>
 800609c:	2c0f      	cmp	r4, #15
 800609e:	4681      	mov	r9, r0
 80060a0:	468a      	mov	sl, r1
 80060a2:	ddd5      	ble.n	8006050 <_strtod_l+0x3a8>
 80060a4:	9b07      	ldr	r3, [sp, #28]
 80060a6:	eba4 0808 	sub.w	r8, r4, r8
 80060aa:	4498      	add	r8, r3
 80060ac:	f1b8 0f00 	cmp.w	r8, #0
 80060b0:	f340 809a 	ble.w	80061e8 <_strtod_l+0x540>
 80060b4:	f018 030f 	ands.w	r3, r8, #15
 80060b8:	d00a      	beq.n	80060d0 <_strtod_l+0x428>
 80060ba:	4963      	ldr	r1, [pc, #396]	; (8006248 <_strtod_l+0x5a0>)
 80060bc:	464a      	mov	r2, r9
 80060be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80060c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060c6:	4653      	mov	r3, sl
 80060c8:	f7fa fa10 	bl	80004ec <__aeabi_dmul>
 80060cc:	4681      	mov	r9, r0
 80060ce:	468a      	mov	sl, r1
 80060d0:	f038 080f 	bics.w	r8, r8, #15
 80060d4:	d077      	beq.n	80061c6 <_strtod_l+0x51e>
 80060d6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80060da:	dd4b      	ble.n	8006174 <_strtod_l+0x4cc>
 80060dc:	f04f 0800 	mov.w	r8, #0
 80060e0:	f8cd 8010 	str.w	r8, [sp, #16]
 80060e4:	f8cd 8020 	str.w	r8, [sp, #32]
 80060e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80060ec:	2322      	movs	r3, #34	; 0x22
 80060ee:	f04f 0900 	mov.w	r9, #0
 80060f2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8006250 <_strtod_l+0x5a8>
 80060f6:	f8cb 3000 	str.w	r3, [fp]
 80060fa:	9b08      	ldr	r3, [sp, #32]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f43f ae12 	beq.w	8005d26 <_strtod_l+0x7e>
 8006102:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006104:	4658      	mov	r0, fp
 8006106:	f001 fe5a 	bl	8007dbe <_Bfree>
 800610a:	9906      	ldr	r1, [sp, #24]
 800610c:	4658      	mov	r0, fp
 800610e:	f001 fe56 	bl	8007dbe <_Bfree>
 8006112:	9904      	ldr	r1, [sp, #16]
 8006114:	4658      	mov	r0, fp
 8006116:	f001 fe52 	bl	8007dbe <_Bfree>
 800611a:	9908      	ldr	r1, [sp, #32]
 800611c:	4658      	mov	r0, fp
 800611e:	f001 fe4e 	bl	8007dbe <_Bfree>
 8006122:	4641      	mov	r1, r8
 8006124:	4658      	mov	r0, fp
 8006126:	f001 fe4a 	bl	8007dbe <_Bfree>
 800612a:	e5fc      	b.n	8005d26 <_strtod_l+0x7e>
 800612c:	9a07      	ldr	r2, [sp, #28]
 800612e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006132:	4293      	cmp	r3, r2
 8006134:	dbb6      	blt.n	80060a4 <_strtod_l+0x3fc>
 8006136:	4d44      	ldr	r5, [pc, #272]	; (8006248 <_strtod_l+0x5a0>)
 8006138:	f1c4 040f 	rsb	r4, r4, #15
 800613c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006140:	464a      	mov	r2, r9
 8006142:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006146:	4653      	mov	r3, sl
 8006148:	f7fa f9d0 	bl	80004ec <__aeabi_dmul>
 800614c:	9b07      	ldr	r3, [sp, #28]
 800614e:	1b1c      	subs	r4, r3, r4
 8006150:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006154:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006158:	e789      	b.n	800606e <_strtod_l+0x3c6>
 800615a:	f113 0f16 	cmn.w	r3, #22
 800615e:	dba1      	blt.n	80060a4 <_strtod_l+0x3fc>
 8006160:	4a39      	ldr	r2, [pc, #228]	; (8006248 <_strtod_l+0x5a0>)
 8006162:	4648      	mov	r0, r9
 8006164:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8006168:	e9d2 2300 	ldrd	r2, r3, [r2]
 800616c:	4651      	mov	r1, sl
 800616e:	f7fa fae7 	bl	8000740 <__aeabi_ddiv>
 8006172:	e77e      	b.n	8006072 <_strtod_l+0x3ca>
 8006174:	2300      	movs	r3, #0
 8006176:	4648      	mov	r0, r9
 8006178:	4651      	mov	r1, sl
 800617a:	461d      	mov	r5, r3
 800617c:	4e33      	ldr	r6, [pc, #204]	; (800624c <_strtod_l+0x5a4>)
 800617e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006182:	f1b8 0f01 	cmp.w	r8, #1
 8006186:	dc21      	bgt.n	80061cc <_strtod_l+0x524>
 8006188:	b10b      	cbz	r3, 800618e <_strtod_l+0x4e6>
 800618a:	4681      	mov	r9, r0
 800618c:	468a      	mov	sl, r1
 800618e:	4b2f      	ldr	r3, [pc, #188]	; (800624c <_strtod_l+0x5a4>)
 8006190:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8006194:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006198:	464a      	mov	r2, r9
 800619a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800619e:	4653      	mov	r3, sl
 80061a0:	f7fa f9a4 	bl	80004ec <__aeabi_dmul>
 80061a4:	4b2a      	ldr	r3, [pc, #168]	; (8006250 <_strtod_l+0x5a8>)
 80061a6:	460a      	mov	r2, r1
 80061a8:	400b      	ands	r3, r1
 80061aa:	492a      	ldr	r1, [pc, #168]	; (8006254 <_strtod_l+0x5ac>)
 80061ac:	4681      	mov	r9, r0
 80061ae:	428b      	cmp	r3, r1
 80061b0:	d894      	bhi.n	80060dc <_strtod_l+0x434>
 80061b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80061b6:	428b      	cmp	r3, r1
 80061b8:	bf86      	itte	hi
 80061ba:	f04f 39ff 	movhi.w	r9, #4294967295
 80061be:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800625c <_strtod_l+0x5b4>
 80061c2:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 80061c6:	2300      	movs	r3, #0
 80061c8:	9305      	str	r3, [sp, #20]
 80061ca:	e07b      	b.n	80062c4 <_strtod_l+0x61c>
 80061cc:	f018 0f01 	tst.w	r8, #1
 80061d0:	d006      	beq.n	80061e0 <_strtod_l+0x538>
 80061d2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80061d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061da:	f7fa f987 	bl	80004ec <__aeabi_dmul>
 80061de:	2301      	movs	r3, #1
 80061e0:	3501      	adds	r5, #1
 80061e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80061e6:	e7cc      	b.n	8006182 <_strtod_l+0x4da>
 80061e8:	d0ed      	beq.n	80061c6 <_strtod_l+0x51e>
 80061ea:	f1c8 0800 	rsb	r8, r8, #0
 80061ee:	f018 020f 	ands.w	r2, r8, #15
 80061f2:	d00a      	beq.n	800620a <_strtod_l+0x562>
 80061f4:	4b14      	ldr	r3, [pc, #80]	; (8006248 <_strtod_l+0x5a0>)
 80061f6:	4648      	mov	r0, r9
 80061f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061fc:	4651      	mov	r1, sl
 80061fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006202:	f7fa fa9d 	bl	8000740 <__aeabi_ddiv>
 8006206:	4681      	mov	r9, r0
 8006208:	468a      	mov	sl, r1
 800620a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800620e:	d0da      	beq.n	80061c6 <_strtod_l+0x51e>
 8006210:	f1b8 0f1f 	cmp.w	r8, #31
 8006214:	dd24      	ble.n	8006260 <_strtod_l+0x5b8>
 8006216:	f04f 0800 	mov.w	r8, #0
 800621a:	f8cd 8010 	str.w	r8, [sp, #16]
 800621e:	f8cd 8020 	str.w	r8, [sp, #32]
 8006222:	f8cd 8018 	str.w	r8, [sp, #24]
 8006226:	2322      	movs	r3, #34	; 0x22
 8006228:	f04f 0900 	mov.w	r9, #0
 800622c:	f04f 0a00 	mov.w	sl, #0
 8006230:	f8cb 3000 	str.w	r3, [fp]
 8006234:	e761      	b.n	80060fa <_strtod_l+0x452>
 8006236:	bf00      	nop
 8006238:	08008c91 	.word	0x08008c91
 800623c:	08008d13 	.word	0x08008d13
 8006240:	08008c99 	.word	0x08008c99
 8006244:	08008cd4 	.word	0x08008cd4
 8006248:	08008d50 	.word	0x08008d50
 800624c:	08008d28 	.word	0x08008d28
 8006250:	7ff00000 	.word	0x7ff00000
 8006254:	7ca00000 	.word	0x7ca00000
 8006258:	fff80000 	.word	0xfff80000
 800625c:	7fefffff 	.word	0x7fefffff
 8006260:	f018 0310 	ands.w	r3, r8, #16
 8006264:	bf18      	it	ne
 8006266:	236a      	movne	r3, #106	; 0x6a
 8006268:	4648      	mov	r0, r9
 800626a:	9305      	str	r3, [sp, #20]
 800626c:	4651      	mov	r1, sl
 800626e:	2300      	movs	r3, #0
 8006270:	4da1      	ldr	r5, [pc, #644]	; (80064f8 <_strtod_l+0x850>)
 8006272:	f1b8 0f00 	cmp.w	r8, #0
 8006276:	f300 8113 	bgt.w	80064a0 <_strtod_l+0x7f8>
 800627a:	b10b      	cbz	r3, 8006280 <_strtod_l+0x5d8>
 800627c:	4681      	mov	r9, r0
 800627e:	468a      	mov	sl, r1
 8006280:	9b05      	ldr	r3, [sp, #20]
 8006282:	b1bb      	cbz	r3, 80062b4 <_strtod_l+0x60c>
 8006284:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8006288:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800628c:	2b00      	cmp	r3, #0
 800628e:	4651      	mov	r1, sl
 8006290:	dd10      	ble.n	80062b4 <_strtod_l+0x60c>
 8006292:	2b1f      	cmp	r3, #31
 8006294:	f340 8110 	ble.w	80064b8 <_strtod_l+0x810>
 8006298:	2b34      	cmp	r3, #52	; 0x34
 800629a:	bfd8      	it	le
 800629c:	f04f 32ff 	movle.w	r2, #4294967295
 80062a0:	f04f 0900 	mov.w	r9, #0
 80062a4:	bfcf      	iteee	gt
 80062a6:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 80062aa:	3b20      	suble	r3, #32
 80062ac:	fa02 f303 	lslle.w	r3, r2, r3
 80062b0:	ea03 0a01 	andle.w	sl, r3, r1
 80062b4:	2200      	movs	r2, #0
 80062b6:	2300      	movs	r3, #0
 80062b8:	4648      	mov	r0, r9
 80062ba:	4651      	mov	r1, sl
 80062bc:	f7fa fb7e 	bl	80009bc <__aeabi_dcmpeq>
 80062c0:	2800      	cmp	r0, #0
 80062c2:	d1a8      	bne.n	8006216 <_strtod_l+0x56e>
 80062c4:	9b06      	ldr	r3, [sp, #24]
 80062c6:	9a04      	ldr	r2, [sp, #16]
 80062c8:	9300      	str	r3, [sp, #0]
 80062ca:	9908      	ldr	r1, [sp, #32]
 80062cc:	4623      	mov	r3, r4
 80062ce:	4658      	mov	r0, fp
 80062d0:	f001 fdc7 	bl	8007e62 <__s2b>
 80062d4:	9008      	str	r0, [sp, #32]
 80062d6:	2800      	cmp	r0, #0
 80062d8:	f43f af00 	beq.w	80060dc <_strtod_l+0x434>
 80062dc:	9a07      	ldr	r2, [sp, #28]
 80062de:	9b07      	ldr	r3, [sp, #28]
 80062e0:	2a00      	cmp	r2, #0
 80062e2:	f1c3 0300 	rsb	r3, r3, #0
 80062e6:	bfa8      	it	ge
 80062e8:	2300      	movge	r3, #0
 80062ea:	f04f 0800 	mov.w	r8, #0
 80062ee:	930e      	str	r3, [sp, #56]	; 0x38
 80062f0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80062f4:	9316      	str	r3, [sp, #88]	; 0x58
 80062f6:	f8cd 8010 	str.w	r8, [sp, #16]
 80062fa:	9b08      	ldr	r3, [sp, #32]
 80062fc:	4658      	mov	r0, fp
 80062fe:	6859      	ldr	r1, [r3, #4]
 8006300:	f001 fd29 	bl	8007d56 <_Balloc>
 8006304:	9006      	str	r0, [sp, #24]
 8006306:	2800      	cmp	r0, #0
 8006308:	f43f aef0 	beq.w	80060ec <_strtod_l+0x444>
 800630c:	9b08      	ldr	r3, [sp, #32]
 800630e:	300c      	adds	r0, #12
 8006310:	691a      	ldr	r2, [r3, #16]
 8006312:	f103 010c 	add.w	r1, r3, #12
 8006316:	3202      	adds	r2, #2
 8006318:	0092      	lsls	r2, r2, #2
 800631a:	f001 fd11 	bl	8007d40 <memcpy>
 800631e:	ab1e      	add	r3, sp, #120	; 0x78
 8006320:	9301      	str	r3, [sp, #4]
 8006322:	ab1d      	add	r3, sp, #116	; 0x74
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	464a      	mov	r2, r9
 8006328:	4653      	mov	r3, sl
 800632a:	4658      	mov	r0, fp
 800632c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8006330:	f002 f852 	bl	80083d8 <__d2b>
 8006334:	901c      	str	r0, [sp, #112]	; 0x70
 8006336:	2800      	cmp	r0, #0
 8006338:	f43f aed8 	beq.w	80060ec <_strtod_l+0x444>
 800633c:	2101      	movs	r1, #1
 800633e:	4658      	mov	r0, fp
 8006340:	f001 fe1b 	bl	8007f7a <__i2b>
 8006344:	9004      	str	r0, [sp, #16]
 8006346:	4603      	mov	r3, r0
 8006348:	2800      	cmp	r0, #0
 800634a:	f43f aecf 	beq.w	80060ec <_strtod_l+0x444>
 800634e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8006350:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006352:	2d00      	cmp	r5, #0
 8006354:	bfab      	itete	ge
 8006356:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006358:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800635a:	18ee      	addge	r6, r5, r3
 800635c:	1b5c      	sublt	r4, r3, r5
 800635e:	9b05      	ldr	r3, [sp, #20]
 8006360:	bfa8      	it	ge
 8006362:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8006364:	eba5 0503 	sub.w	r5, r5, r3
 8006368:	4415      	add	r5, r2
 800636a:	4b64      	ldr	r3, [pc, #400]	; (80064fc <_strtod_l+0x854>)
 800636c:	f105 35ff 	add.w	r5, r5, #4294967295
 8006370:	bfb8      	it	lt
 8006372:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006374:	429d      	cmp	r5, r3
 8006376:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800637a:	f280 80af 	bge.w	80064dc <_strtod_l+0x834>
 800637e:	1b5b      	subs	r3, r3, r5
 8006380:	2b1f      	cmp	r3, #31
 8006382:	eba2 0203 	sub.w	r2, r2, r3
 8006386:	f04f 0701 	mov.w	r7, #1
 800638a:	f300 809c 	bgt.w	80064c6 <_strtod_l+0x81e>
 800638e:	2500      	movs	r5, #0
 8006390:	fa07 f303 	lsl.w	r3, r7, r3
 8006394:	930f      	str	r3, [sp, #60]	; 0x3c
 8006396:	18b7      	adds	r7, r6, r2
 8006398:	9b05      	ldr	r3, [sp, #20]
 800639a:	42be      	cmp	r6, r7
 800639c:	4414      	add	r4, r2
 800639e:	441c      	add	r4, r3
 80063a0:	4633      	mov	r3, r6
 80063a2:	bfa8      	it	ge
 80063a4:	463b      	movge	r3, r7
 80063a6:	42a3      	cmp	r3, r4
 80063a8:	bfa8      	it	ge
 80063aa:	4623      	movge	r3, r4
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	bfc2      	ittt	gt
 80063b0:	1aff      	subgt	r7, r7, r3
 80063b2:	1ae4      	subgt	r4, r4, r3
 80063b4:	1af6      	subgt	r6, r6, r3
 80063b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063b8:	b1bb      	cbz	r3, 80063ea <_strtod_l+0x742>
 80063ba:	461a      	mov	r2, r3
 80063bc:	9904      	ldr	r1, [sp, #16]
 80063be:	4658      	mov	r0, fp
 80063c0:	f001 fe7a 	bl	80080b8 <__pow5mult>
 80063c4:	9004      	str	r0, [sp, #16]
 80063c6:	2800      	cmp	r0, #0
 80063c8:	f43f ae90 	beq.w	80060ec <_strtod_l+0x444>
 80063cc:	4601      	mov	r1, r0
 80063ce:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80063d0:	4658      	mov	r0, fp
 80063d2:	f001 fddb 	bl	8007f8c <__multiply>
 80063d6:	9009      	str	r0, [sp, #36]	; 0x24
 80063d8:	2800      	cmp	r0, #0
 80063da:	f43f ae87 	beq.w	80060ec <_strtod_l+0x444>
 80063de:	991c      	ldr	r1, [sp, #112]	; 0x70
 80063e0:	4658      	mov	r0, fp
 80063e2:	f001 fcec 	bl	8007dbe <_Bfree>
 80063e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063e8:	931c      	str	r3, [sp, #112]	; 0x70
 80063ea:	2f00      	cmp	r7, #0
 80063ec:	dc7a      	bgt.n	80064e4 <_strtod_l+0x83c>
 80063ee:	9b07      	ldr	r3, [sp, #28]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	dd08      	ble.n	8006406 <_strtod_l+0x75e>
 80063f4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80063f6:	9906      	ldr	r1, [sp, #24]
 80063f8:	4658      	mov	r0, fp
 80063fa:	f001 fe5d 	bl	80080b8 <__pow5mult>
 80063fe:	9006      	str	r0, [sp, #24]
 8006400:	2800      	cmp	r0, #0
 8006402:	f43f ae73 	beq.w	80060ec <_strtod_l+0x444>
 8006406:	2c00      	cmp	r4, #0
 8006408:	dd08      	ble.n	800641c <_strtod_l+0x774>
 800640a:	4622      	mov	r2, r4
 800640c:	9906      	ldr	r1, [sp, #24]
 800640e:	4658      	mov	r0, fp
 8006410:	f001 fea0 	bl	8008154 <__lshift>
 8006414:	9006      	str	r0, [sp, #24]
 8006416:	2800      	cmp	r0, #0
 8006418:	f43f ae68 	beq.w	80060ec <_strtod_l+0x444>
 800641c:	2e00      	cmp	r6, #0
 800641e:	dd08      	ble.n	8006432 <_strtod_l+0x78a>
 8006420:	4632      	mov	r2, r6
 8006422:	9904      	ldr	r1, [sp, #16]
 8006424:	4658      	mov	r0, fp
 8006426:	f001 fe95 	bl	8008154 <__lshift>
 800642a:	9004      	str	r0, [sp, #16]
 800642c:	2800      	cmp	r0, #0
 800642e:	f43f ae5d 	beq.w	80060ec <_strtod_l+0x444>
 8006432:	9a06      	ldr	r2, [sp, #24]
 8006434:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006436:	4658      	mov	r0, fp
 8006438:	f001 fefa 	bl	8008230 <__mdiff>
 800643c:	4680      	mov	r8, r0
 800643e:	2800      	cmp	r0, #0
 8006440:	f43f ae54 	beq.w	80060ec <_strtod_l+0x444>
 8006444:	2400      	movs	r4, #0
 8006446:	68c3      	ldr	r3, [r0, #12]
 8006448:	9904      	ldr	r1, [sp, #16]
 800644a:	60c4      	str	r4, [r0, #12]
 800644c:	930c      	str	r3, [sp, #48]	; 0x30
 800644e:	f001 fed5 	bl	80081fc <__mcmp>
 8006452:	42a0      	cmp	r0, r4
 8006454:	da54      	bge.n	8006500 <_strtod_l+0x858>
 8006456:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006458:	b9f3      	cbnz	r3, 8006498 <_strtod_l+0x7f0>
 800645a:	f1b9 0f00 	cmp.w	r9, #0
 800645e:	d11b      	bne.n	8006498 <_strtod_l+0x7f0>
 8006460:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8006464:	b9c3      	cbnz	r3, 8006498 <_strtod_l+0x7f0>
 8006466:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800646a:	0d1b      	lsrs	r3, r3, #20
 800646c:	051b      	lsls	r3, r3, #20
 800646e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006472:	d911      	bls.n	8006498 <_strtod_l+0x7f0>
 8006474:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006478:	b91b      	cbnz	r3, 8006482 <_strtod_l+0x7da>
 800647a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800647e:	2b01      	cmp	r3, #1
 8006480:	dd0a      	ble.n	8006498 <_strtod_l+0x7f0>
 8006482:	4641      	mov	r1, r8
 8006484:	2201      	movs	r2, #1
 8006486:	4658      	mov	r0, fp
 8006488:	f001 fe64 	bl	8008154 <__lshift>
 800648c:	9904      	ldr	r1, [sp, #16]
 800648e:	4680      	mov	r8, r0
 8006490:	f001 feb4 	bl	80081fc <__mcmp>
 8006494:	2800      	cmp	r0, #0
 8006496:	dc68      	bgt.n	800656a <_strtod_l+0x8c2>
 8006498:	9b05      	ldr	r3, [sp, #20]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d172      	bne.n	8006584 <_strtod_l+0x8dc>
 800649e:	e630      	b.n	8006102 <_strtod_l+0x45a>
 80064a0:	f018 0f01 	tst.w	r8, #1
 80064a4:	d004      	beq.n	80064b0 <_strtod_l+0x808>
 80064a6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80064aa:	f7fa f81f 	bl	80004ec <__aeabi_dmul>
 80064ae:	2301      	movs	r3, #1
 80064b0:	ea4f 0868 	mov.w	r8, r8, asr #1
 80064b4:	3508      	adds	r5, #8
 80064b6:	e6dc      	b.n	8006272 <_strtod_l+0x5ca>
 80064b8:	f04f 32ff 	mov.w	r2, #4294967295
 80064bc:	fa02 f303 	lsl.w	r3, r2, r3
 80064c0:	ea03 0909 	and.w	r9, r3, r9
 80064c4:	e6f6      	b.n	80062b4 <_strtod_l+0x60c>
 80064c6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80064ca:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80064ce:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80064d2:	35e2      	adds	r5, #226	; 0xe2
 80064d4:	fa07 f505 	lsl.w	r5, r7, r5
 80064d8:	970f      	str	r7, [sp, #60]	; 0x3c
 80064da:	e75c      	b.n	8006396 <_strtod_l+0x6ee>
 80064dc:	2301      	movs	r3, #1
 80064de:	2500      	movs	r5, #0
 80064e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80064e2:	e758      	b.n	8006396 <_strtod_l+0x6ee>
 80064e4:	463a      	mov	r2, r7
 80064e6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80064e8:	4658      	mov	r0, fp
 80064ea:	f001 fe33 	bl	8008154 <__lshift>
 80064ee:	901c      	str	r0, [sp, #112]	; 0x70
 80064f0:	2800      	cmp	r0, #0
 80064f2:	f47f af7c 	bne.w	80063ee <_strtod_l+0x746>
 80064f6:	e5f9      	b.n	80060ec <_strtod_l+0x444>
 80064f8:	08008ce8 	.word	0x08008ce8
 80064fc:	fffffc02 	.word	0xfffffc02
 8006500:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006504:	f040 8089 	bne.w	800661a <_strtod_l+0x972>
 8006508:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800650a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800650e:	b342      	cbz	r2, 8006562 <_strtod_l+0x8ba>
 8006510:	4aaf      	ldr	r2, [pc, #700]	; (80067d0 <_strtod_l+0xb28>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d156      	bne.n	80065c4 <_strtod_l+0x91c>
 8006516:	9b05      	ldr	r3, [sp, #20]
 8006518:	4648      	mov	r0, r9
 800651a:	b1eb      	cbz	r3, 8006558 <_strtod_l+0x8b0>
 800651c:	4653      	mov	r3, sl
 800651e:	4aad      	ldr	r2, [pc, #692]	; (80067d4 <_strtod_l+0xb2c>)
 8006520:	f04f 31ff 	mov.w	r1, #4294967295
 8006524:	401a      	ands	r2, r3
 8006526:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800652a:	d818      	bhi.n	800655e <_strtod_l+0x8b6>
 800652c:	0d12      	lsrs	r2, r2, #20
 800652e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006532:	fa01 f303 	lsl.w	r3, r1, r3
 8006536:	4298      	cmp	r0, r3
 8006538:	d144      	bne.n	80065c4 <_strtod_l+0x91c>
 800653a:	4ba7      	ldr	r3, [pc, #668]	; (80067d8 <_strtod_l+0xb30>)
 800653c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800653e:	429a      	cmp	r2, r3
 8006540:	d102      	bne.n	8006548 <_strtod_l+0x8a0>
 8006542:	3001      	adds	r0, #1
 8006544:	f43f add2 	beq.w	80060ec <_strtod_l+0x444>
 8006548:	4ba2      	ldr	r3, [pc, #648]	; (80067d4 <_strtod_l+0xb2c>)
 800654a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800654c:	f04f 0900 	mov.w	r9, #0
 8006550:	401a      	ands	r2, r3
 8006552:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8006556:	e79f      	b.n	8006498 <_strtod_l+0x7f0>
 8006558:	f04f 33ff 	mov.w	r3, #4294967295
 800655c:	e7eb      	b.n	8006536 <_strtod_l+0x88e>
 800655e:	460b      	mov	r3, r1
 8006560:	e7e9      	b.n	8006536 <_strtod_l+0x88e>
 8006562:	bb7b      	cbnz	r3, 80065c4 <_strtod_l+0x91c>
 8006564:	f1b9 0f00 	cmp.w	r9, #0
 8006568:	d12c      	bne.n	80065c4 <_strtod_l+0x91c>
 800656a:	9905      	ldr	r1, [sp, #20]
 800656c:	4653      	mov	r3, sl
 800656e:	4a99      	ldr	r2, [pc, #612]	; (80067d4 <_strtod_l+0xb2c>)
 8006570:	b1f1      	cbz	r1, 80065b0 <_strtod_l+0x908>
 8006572:	ea02 010a 	and.w	r1, r2, sl
 8006576:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800657a:	dc19      	bgt.n	80065b0 <_strtod_l+0x908>
 800657c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006580:	f77f ae51 	ble.w	8006226 <_strtod_l+0x57e>
 8006584:	2300      	movs	r3, #0
 8006586:	4a95      	ldr	r2, [pc, #596]	; (80067dc <_strtod_l+0xb34>)
 8006588:	4648      	mov	r0, r9
 800658a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800658e:	4651      	mov	r1, sl
 8006590:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006594:	f7f9 ffaa 	bl	80004ec <__aeabi_dmul>
 8006598:	4681      	mov	r9, r0
 800659a:	468a      	mov	sl, r1
 800659c:	2900      	cmp	r1, #0
 800659e:	f47f adb0 	bne.w	8006102 <_strtod_l+0x45a>
 80065a2:	2800      	cmp	r0, #0
 80065a4:	f47f adad 	bne.w	8006102 <_strtod_l+0x45a>
 80065a8:	2322      	movs	r3, #34	; 0x22
 80065aa:	f8cb 3000 	str.w	r3, [fp]
 80065ae:	e5a8      	b.n	8006102 <_strtod_l+0x45a>
 80065b0:	4013      	ands	r3, r2
 80065b2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80065b6:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 80065ba:	f04f 39ff 	mov.w	r9, #4294967295
 80065be:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 80065c2:	e769      	b.n	8006498 <_strtod_l+0x7f0>
 80065c4:	b19d      	cbz	r5, 80065ee <_strtod_l+0x946>
 80065c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065c8:	421d      	tst	r5, r3
 80065ca:	f43f af65 	beq.w	8006498 <_strtod_l+0x7f0>
 80065ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065d0:	9a05      	ldr	r2, [sp, #20]
 80065d2:	4648      	mov	r0, r9
 80065d4:	4651      	mov	r1, sl
 80065d6:	b173      	cbz	r3, 80065f6 <_strtod_l+0x94e>
 80065d8:	f7ff fb44 	bl	8005c64 <sulp>
 80065dc:	4602      	mov	r2, r0
 80065de:	460b      	mov	r3, r1
 80065e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80065e4:	f7f9 fdcc 	bl	8000180 <__adddf3>
 80065e8:	4681      	mov	r9, r0
 80065ea:	468a      	mov	sl, r1
 80065ec:	e754      	b.n	8006498 <_strtod_l+0x7f0>
 80065ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065f0:	ea13 0f09 	tst.w	r3, r9
 80065f4:	e7e9      	b.n	80065ca <_strtod_l+0x922>
 80065f6:	f7ff fb35 	bl	8005c64 <sulp>
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006602:	f7f9 fdbb 	bl	800017c <__aeabi_dsub>
 8006606:	2200      	movs	r2, #0
 8006608:	2300      	movs	r3, #0
 800660a:	4681      	mov	r9, r0
 800660c:	468a      	mov	sl, r1
 800660e:	f7fa f9d5 	bl	80009bc <__aeabi_dcmpeq>
 8006612:	2800      	cmp	r0, #0
 8006614:	f47f ae07 	bne.w	8006226 <_strtod_l+0x57e>
 8006618:	e73e      	b.n	8006498 <_strtod_l+0x7f0>
 800661a:	9904      	ldr	r1, [sp, #16]
 800661c:	4640      	mov	r0, r8
 800661e:	f001 ff2a 	bl	8008476 <__ratio>
 8006622:	2200      	movs	r2, #0
 8006624:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006628:	4606      	mov	r6, r0
 800662a:	460f      	mov	r7, r1
 800662c:	f7fa f9da 	bl	80009e4 <__aeabi_dcmple>
 8006630:	2800      	cmp	r0, #0
 8006632:	d075      	beq.n	8006720 <_strtod_l+0xa78>
 8006634:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006636:	2b00      	cmp	r3, #0
 8006638:	d047      	beq.n	80066ca <_strtod_l+0xa22>
 800663a:	2600      	movs	r6, #0
 800663c:	4f68      	ldr	r7, [pc, #416]	; (80067e0 <_strtod_l+0xb38>)
 800663e:	4d68      	ldr	r5, [pc, #416]	; (80067e0 <_strtod_l+0xb38>)
 8006640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006642:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006646:	0d1b      	lsrs	r3, r3, #20
 8006648:	051b      	lsls	r3, r3, #20
 800664a:	930f      	str	r3, [sp, #60]	; 0x3c
 800664c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800664e:	4b65      	ldr	r3, [pc, #404]	; (80067e4 <_strtod_l+0xb3c>)
 8006650:	429a      	cmp	r2, r3
 8006652:	f040 80cf 	bne.w	80067f4 <_strtod_l+0xb4c>
 8006656:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800665a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800665e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006660:	4648      	mov	r0, r9
 8006662:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8006666:	4651      	mov	r1, sl
 8006668:	f001 fe40 	bl	80082ec <__ulp>
 800666c:	4602      	mov	r2, r0
 800666e:	460b      	mov	r3, r1
 8006670:	4630      	mov	r0, r6
 8006672:	4639      	mov	r1, r7
 8006674:	f7f9 ff3a 	bl	80004ec <__aeabi_dmul>
 8006678:	464a      	mov	r2, r9
 800667a:	4653      	mov	r3, sl
 800667c:	f7f9 fd80 	bl	8000180 <__adddf3>
 8006680:	460b      	mov	r3, r1
 8006682:	4954      	ldr	r1, [pc, #336]	; (80067d4 <_strtod_l+0xb2c>)
 8006684:	4a58      	ldr	r2, [pc, #352]	; (80067e8 <_strtod_l+0xb40>)
 8006686:	4019      	ands	r1, r3
 8006688:	4291      	cmp	r1, r2
 800668a:	4681      	mov	r9, r0
 800668c:	d95e      	bls.n	800674c <_strtod_l+0xaa4>
 800668e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006690:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006694:	4293      	cmp	r3, r2
 8006696:	d103      	bne.n	80066a0 <_strtod_l+0x9f8>
 8006698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800669a:	3301      	adds	r3, #1
 800669c:	f43f ad26 	beq.w	80060ec <_strtod_l+0x444>
 80066a0:	f04f 39ff 	mov.w	r9, #4294967295
 80066a4:	f8df a130 	ldr.w	sl, [pc, #304]	; 80067d8 <_strtod_l+0xb30>
 80066a8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80066aa:	4658      	mov	r0, fp
 80066ac:	f001 fb87 	bl	8007dbe <_Bfree>
 80066b0:	9906      	ldr	r1, [sp, #24]
 80066b2:	4658      	mov	r0, fp
 80066b4:	f001 fb83 	bl	8007dbe <_Bfree>
 80066b8:	9904      	ldr	r1, [sp, #16]
 80066ba:	4658      	mov	r0, fp
 80066bc:	f001 fb7f 	bl	8007dbe <_Bfree>
 80066c0:	4641      	mov	r1, r8
 80066c2:	4658      	mov	r0, fp
 80066c4:	f001 fb7b 	bl	8007dbe <_Bfree>
 80066c8:	e617      	b.n	80062fa <_strtod_l+0x652>
 80066ca:	f1b9 0f00 	cmp.w	r9, #0
 80066ce:	d119      	bne.n	8006704 <_strtod_l+0xa5c>
 80066d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066d6:	b9e3      	cbnz	r3, 8006712 <_strtod_l+0xa6a>
 80066d8:	2200      	movs	r2, #0
 80066da:	4b41      	ldr	r3, [pc, #260]	; (80067e0 <_strtod_l+0xb38>)
 80066dc:	4630      	mov	r0, r6
 80066de:	4639      	mov	r1, r7
 80066e0:	f7fa f976 	bl	80009d0 <__aeabi_dcmplt>
 80066e4:	b9c8      	cbnz	r0, 800671a <_strtod_l+0xa72>
 80066e6:	2200      	movs	r2, #0
 80066e8:	4b40      	ldr	r3, [pc, #256]	; (80067ec <_strtod_l+0xb44>)
 80066ea:	4630      	mov	r0, r6
 80066ec:	4639      	mov	r1, r7
 80066ee:	f7f9 fefd 	bl	80004ec <__aeabi_dmul>
 80066f2:	4604      	mov	r4, r0
 80066f4:	460d      	mov	r5, r1
 80066f6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80066fa:	9418      	str	r4, [sp, #96]	; 0x60
 80066fc:	9319      	str	r3, [sp, #100]	; 0x64
 80066fe:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8006702:	e79d      	b.n	8006640 <_strtod_l+0x998>
 8006704:	f1b9 0f01 	cmp.w	r9, #1
 8006708:	d103      	bne.n	8006712 <_strtod_l+0xa6a>
 800670a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800670c:	2b00      	cmp	r3, #0
 800670e:	f43f ad8a 	beq.w	8006226 <_strtod_l+0x57e>
 8006712:	2600      	movs	r6, #0
 8006714:	4f36      	ldr	r7, [pc, #216]	; (80067f0 <_strtod_l+0xb48>)
 8006716:	2400      	movs	r4, #0
 8006718:	e791      	b.n	800663e <_strtod_l+0x996>
 800671a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800671c:	4d33      	ldr	r5, [pc, #204]	; (80067ec <_strtod_l+0xb44>)
 800671e:	e7ea      	b.n	80066f6 <_strtod_l+0xa4e>
 8006720:	4b32      	ldr	r3, [pc, #200]	; (80067ec <_strtod_l+0xb44>)
 8006722:	2200      	movs	r2, #0
 8006724:	4630      	mov	r0, r6
 8006726:	4639      	mov	r1, r7
 8006728:	f7f9 fee0 	bl	80004ec <__aeabi_dmul>
 800672c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800672e:	4604      	mov	r4, r0
 8006730:	460d      	mov	r5, r1
 8006732:	b933      	cbnz	r3, 8006742 <_strtod_l+0xa9a>
 8006734:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006738:	9010      	str	r0, [sp, #64]	; 0x40
 800673a:	9311      	str	r3, [sp, #68]	; 0x44
 800673c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006740:	e77e      	b.n	8006640 <_strtod_l+0x998>
 8006742:	4602      	mov	r2, r0
 8006744:	460b      	mov	r3, r1
 8006746:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800674a:	e7f7      	b.n	800673c <_strtod_l+0xa94>
 800674c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8006750:	9b05      	ldr	r3, [sp, #20]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1a8      	bne.n	80066a8 <_strtod_l+0xa00>
 8006756:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800675a:	0d1b      	lsrs	r3, r3, #20
 800675c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800675e:	051b      	lsls	r3, r3, #20
 8006760:	429a      	cmp	r2, r3
 8006762:	4656      	mov	r6, sl
 8006764:	d1a0      	bne.n	80066a8 <_strtod_l+0xa00>
 8006766:	4629      	mov	r1, r5
 8006768:	4620      	mov	r0, r4
 800676a:	f7fa f96f 	bl	8000a4c <__aeabi_d2iz>
 800676e:	f7f9 fe53 	bl	8000418 <__aeabi_i2d>
 8006772:	460b      	mov	r3, r1
 8006774:	4602      	mov	r2, r0
 8006776:	4629      	mov	r1, r5
 8006778:	4620      	mov	r0, r4
 800677a:	f7f9 fcff 	bl	800017c <__aeabi_dsub>
 800677e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006780:	4604      	mov	r4, r0
 8006782:	460d      	mov	r5, r1
 8006784:	b933      	cbnz	r3, 8006794 <_strtod_l+0xaec>
 8006786:	f1b9 0f00 	cmp.w	r9, #0
 800678a:	d103      	bne.n	8006794 <_strtod_l+0xaec>
 800678c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8006790:	2e00      	cmp	r6, #0
 8006792:	d06a      	beq.n	800686a <_strtod_l+0xbc2>
 8006794:	a30a      	add	r3, pc, #40	; (adr r3, 80067c0 <_strtod_l+0xb18>)
 8006796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679a:	4620      	mov	r0, r4
 800679c:	4629      	mov	r1, r5
 800679e:	f7fa f917 	bl	80009d0 <__aeabi_dcmplt>
 80067a2:	2800      	cmp	r0, #0
 80067a4:	f47f acad 	bne.w	8006102 <_strtod_l+0x45a>
 80067a8:	a307      	add	r3, pc, #28	; (adr r3, 80067c8 <_strtod_l+0xb20>)
 80067aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ae:	4620      	mov	r0, r4
 80067b0:	4629      	mov	r1, r5
 80067b2:	f7fa f92b 	bl	8000a0c <__aeabi_dcmpgt>
 80067b6:	2800      	cmp	r0, #0
 80067b8:	f43f af76 	beq.w	80066a8 <_strtod_l+0xa00>
 80067bc:	e4a1      	b.n	8006102 <_strtod_l+0x45a>
 80067be:	bf00      	nop
 80067c0:	94a03595 	.word	0x94a03595
 80067c4:	3fdfffff 	.word	0x3fdfffff
 80067c8:	35afe535 	.word	0x35afe535
 80067cc:	3fe00000 	.word	0x3fe00000
 80067d0:	000fffff 	.word	0x000fffff
 80067d4:	7ff00000 	.word	0x7ff00000
 80067d8:	7fefffff 	.word	0x7fefffff
 80067dc:	39500000 	.word	0x39500000
 80067e0:	3ff00000 	.word	0x3ff00000
 80067e4:	7fe00000 	.word	0x7fe00000
 80067e8:	7c9fffff 	.word	0x7c9fffff
 80067ec:	3fe00000 	.word	0x3fe00000
 80067f0:	bff00000 	.word	0xbff00000
 80067f4:	9b05      	ldr	r3, [sp, #20]
 80067f6:	b313      	cbz	r3, 800683e <_strtod_l+0xb96>
 80067f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067fa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80067fe:	d81e      	bhi.n	800683e <_strtod_l+0xb96>
 8006800:	a325      	add	r3, pc, #148	; (adr r3, 8006898 <_strtod_l+0xbf0>)
 8006802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006806:	4620      	mov	r0, r4
 8006808:	4629      	mov	r1, r5
 800680a:	f7fa f8eb 	bl	80009e4 <__aeabi_dcmple>
 800680e:	b190      	cbz	r0, 8006836 <_strtod_l+0xb8e>
 8006810:	4629      	mov	r1, r5
 8006812:	4620      	mov	r0, r4
 8006814:	f7fa f942 	bl	8000a9c <__aeabi_d2uiz>
 8006818:	2800      	cmp	r0, #0
 800681a:	bf08      	it	eq
 800681c:	2001      	moveq	r0, #1
 800681e:	f7f9 fdeb 	bl	80003f8 <__aeabi_ui2d>
 8006822:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006824:	4604      	mov	r4, r0
 8006826:	460d      	mov	r5, r1
 8006828:	b9d3      	cbnz	r3, 8006860 <_strtod_l+0xbb8>
 800682a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800682e:	9012      	str	r0, [sp, #72]	; 0x48
 8006830:	9313      	str	r3, [sp, #76]	; 0x4c
 8006832:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006836:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006838:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800683c:	1a9f      	subs	r7, r3, r2
 800683e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006842:	f001 fd53 	bl	80082ec <__ulp>
 8006846:	4602      	mov	r2, r0
 8006848:	460b      	mov	r3, r1
 800684a:	4630      	mov	r0, r6
 800684c:	4639      	mov	r1, r7
 800684e:	f7f9 fe4d 	bl	80004ec <__aeabi_dmul>
 8006852:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006856:	f7f9 fc93 	bl	8000180 <__adddf3>
 800685a:	4681      	mov	r9, r0
 800685c:	468a      	mov	sl, r1
 800685e:	e777      	b.n	8006750 <_strtod_l+0xaa8>
 8006860:	4602      	mov	r2, r0
 8006862:	460b      	mov	r3, r1
 8006864:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006868:	e7e3      	b.n	8006832 <_strtod_l+0xb8a>
 800686a:	a30d      	add	r3, pc, #52	; (adr r3, 80068a0 <_strtod_l+0xbf8>)
 800686c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006870:	f7fa f8ae 	bl	80009d0 <__aeabi_dcmplt>
 8006874:	e79f      	b.n	80067b6 <_strtod_l+0xb0e>
 8006876:	2300      	movs	r3, #0
 8006878:	930d      	str	r3, [sp, #52]	; 0x34
 800687a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800687c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800687e:	6013      	str	r3, [r2, #0]
 8006880:	f7ff ba55 	b.w	8005d2e <_strtod_l+0x86>
 8006884:	2b65      	cmp	r3, #101	; 0x65
 8006886:	f04f 0200 	mov.w	r2, #0
 800688a:	f43f ab42 	beq.w	8005f12 <_strtod_l+0x26a>
 800688e:	2101      	movs	r1, #1
 8006890:	4614      	mov	r4, r2
 8006892:	9105      	str	r1, [sp, #20]
 8006894:	f7ff babf 	b.w	8005e16 <_strtod_l+0x16e>
 8006898:	ffc00000 	.word	0xffc00000
 800689c:	41dfffff 	.word	0x41dfffff
 80068a0:	94a03595 	.word	0x94a03595
 80068a4:	3fcfffff 	.word	0x3fcfffff

080068a8 <strtod>:
 80068a8:	4b06      	ldr	r3, [pc, #24]	; (80068c4 <strtod+0x1c>)
 80068aa:	b410      	push	{r4}
 80068ac:	681c      	ldr	r4, [r3, #0]
 80068ae:	4a06      	ldr	r2, [pc, #24]	; (80068c8 <strtod+0x20>)
 80068b0:	6a23      	ldr	r3, [r4, #32]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	bf08      	it	eq
 80068b6:	4613      	moveq	r3, r2
 80068b8:	460a      	mov	r2, r1
 80068ba:	4601      	mov	r1, r0
 80068bc:	4620      	mov	r0, r4
 80068be:	bc10      	pop	{r4}
 80068c0:	f7ff b9f2 	b.w	8005ca8 <_strtod_l>
 80068c4:	2000000c 	.word	0x2000000c
 80068c8:	20000070 	.word	0x20000070

080068cc <_strtol_l.isra.0>:
 80068cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068d0:	4680      	mov	r8, r0
 80068d2:	4689      	mov	r9, r1
 80068d4:	4692      	mov	sl, r2
 80068d6:	461e      	mov	r6, r3
 80068d8:	460f      	mov	r7, r1
 80068da:	463d      	mov	r5, r7
 80068dc:	9808      	ldr	r0, [sp, #32]
 80068de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80068e2:	f001 f9f1 	bl	8007cc8 <__locale_ctype_ptr_l>
 80068e6:	4420      	add	r0, r4
 80068e8:	7843      	ldrb	r3, [r0, #1]
 80068ea:	f013 0308 	ands.w	r3, r3, #8
 80068ee:	d132      	bne.n	8006956 <_strtol_l.isra.0+0x8a>
 80068f0:	2c2d      	cmp	r4, #45	; 0x2d
 80068f2:	d132      	bne.n	800695a <_strtol_l.isra.0+0x8e>
 80068f4:	2201      	movs	r2, #1
 80068f6:	787c      	ldrb	r4, [r7, #1]
 80068f8:	1cbd      	adds	r5, r7, #2
 80068fa:	2e00      	cmp	r6, #0
 80068fc:	d05d      	beq.n	80069ba <_strtol_l.isra.0+0xee>
 80068fe:	2e10      	cmp	r6, #16
 8006900:	d109      	bne.n	8006916 <_strtol_l.isra.0+0x4a>
 8006902:	2c30      	cmp	r4, #48	; 0x30
 8006904:	d107      	bne.n	8006916 <_strtol_l.isra.0+0x4a>
 8006906:	782b      	ldrb	r3, [r5, #0]
 8006908:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800690c:	2b58      	cmp	r3, #88	; 0x58
 800690e:	d14f      	bne.n	80069b0 <_strtol_l.isra.0+0xe4>
 8006910:	2610      	movs	r6, #16
 8006912:	786c      	ldrb	r4, [r5, #1]
 8006914:	3502      	adds	r5, #2
 8006916:	2a00      	cmp	r2, #0
 8006918:	bf14      	ite	ne
 800691a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800691e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006922:	2700      	movs	r7, #0
 8006924:	fbb1 fcf6 	udiv	ip, r1, r6
 8006928:	4638      	mov	r0, r7
 800692a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800692e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006932:	2b09      	cmp	r3, #9
 8006934:	d817      	bhi.n	8006966 <_strtol_l.isra.0+0x9a>
 8006936:	461c      	mov	r4, r3
 8006938:	42a6      	cmp	r6, r4
 800693a:	dd23      	ble.n	8006984 <_strtol_l.isra.0+0xb8>
 800693c:	1c7b      	adds	r3, r7, #1
 800693e:	d007      	beq.n	8006950 <_strtol_l.isra.0+0x84>
 8006940:	4584      	cmp	ip, r0
 8006942:	d31c      	bcc.n	800697e <_strtol_l.isra.0+0xb2>
 8006944:	d101      	bne.n	800694a <_strtol_l.isra.0+0x7e>
 8006946:	45a6      	cmp	lr, r4
 8006948:	db19      	blt.n	800697e <_strtol_l.isra.0+0xb2>
 800694a:	2701      	movs	r7, #1
 800694c:	fb00 4006 	mla	r0, r0, r6, r4
 8006950:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006954:	e7eb      	b.n	800692e <_strtol_l.isra.0+0x62>
 8006956:	462f      	mov	r7, r5
 8006958:	e7bf      	b.n	80068da <_strtol_l.isra.0+0xe>
 800695a:	2c2b      	cmp	r4, #43	; 0x2b
 800695c:	bf04      	itt	eq
 800695e:	1cbd      	addeq	r5, r7, #2
 8006960:	787c      	ldrbeq	r4, [r7, #1]
 8006962:	461a      	mov	r2, r3
 8006964:	e7c9      	b.n	80068fa <_strtol_l.isra.0+0x2e>
 8006966:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800696a:	2b19      	cmp	r3, #25
 800696c:	d801      	bhi.n	8006972 <_strtol_l.isra.0+0xa6>
 800696e:	3c37      	subs	r4, #55	; 0x37
 8006970:	e7e2      	b.n	8006938 <_strtol_l.isra.0+0x6c>
 8006972:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006976:	2b19      	cmp	r3, #25
 8006978:	d804      	bhi.n	8006984 <_strtol_l.isra.0+0xb8>
 800697a:	3c57      	subs	r4, #87	; 0x57
 800697c:	e7dc      	b.n	8006938 <_strtol_l.isra.0+0x6c>
 800697e:	f04f 37ff 	mov.w	r7, #4294967295
 8006982:	e7e5      	b.n	8006950 <_strtol_l.isra.0+0x84>
 8006984:	1c7b      	adds	r3, r7, #1
 8006986:	d108      	bne.n	800699a <_strtol_l.isra.0+0xce>
 8006988:	2322      	movs	r3, #34	; 0x22
 800698a:	4608      	mov	r0, r1
 800698c:	f8c8 3000 	str.w	r3, [r8]
 8006990:	f1ba 0f00 	cmp.w	sl, #0
 8006994:	d107      	bne.n	80069a6 <_strtol_l.isra.0+0xda>
 8006996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800699a:	b102      	cbz	r2, 800699e <_strtol_l.isra.0+0xd2>
 800699c:	4240      	negs	r0, r0
 800699e:	f1ba 0f00 	cmp.w	sl, #0
 80069a2:	d0f8      	beq.n	8006996 <_strtol_l.isra.0+0xca>
 80069a4:	b10f      	cbz	r7, 80069aa <_strtol_l.isra.0+0xde>
 80069a6:	f105 39ff 	add.w	r9, r5, #4294967295
 80069aa:	f8ca 9000 	str.w	r9, [sl]
 80069ae:	e7f2      	b.n	8006996 <_strtol_l.isra.0+0xca>
 80069b0:	2430      	movs	r4, #48	; 0x30
 80069b2:	2e00      	cmp	r6, #0
 80069b4:	d1af      	bne.n	8006916 <_strtol_l.isra.0+0x4a>
 80069b6:	2608      	movs	r6, #8
 80069b8:	e7ad      	b.n	8006916 <_strtol_l.isra.0+0x4a>
 80069ba:	2c30      	cmp	r4, #48	; 0x30
 80069bc:	d0a3      	beq.n	8006906 <_strtol_l.isra.0+0x3a>
 80069be:	260a      	movs	r6, #10
 80069c0:	e7a9      	b.n	8006916 <_strtol_l.isra.0+0x4a>
	...

080069c4 <strtol>:
 80069c4:	4b08      	ldr	r3, [pc, #32]	; (80069e8 <strtol+0x24>)
 80069c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069c8:	681c      	ldr	r4, [r3, #0]
 80069ca:	4d08      	ldr	r5, [pc, #32]	; (80069ec <strtol+0x28>)
 80069cc:	6a23      	ldr	r3, [r4, #32]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	bf08      	it	eq
 80069d2:	462b      	moveq	r3, r5
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	4613      	mov	r3, r2
 80069d8:	460a      	mov	r2, r1
 80069da:	4601      	mov	r1, r0
 80069dc:	4620      	mov	r0, r4
 80069de:	f7ff ff75 	bl	80068cc <_strtol_l.isra.0>
 80069e2:	b003      	add	sp, #12
 80069e4:	bd30      	pop	{r4, r5, pc}
 80069e6:	bf00      	nop
 80069e8:	2000000c 	.word	0x2000000c
 80069ec:	20000070 	.word	0x20000070

080069f0 <quorem>:
 80069f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f4:	6903      	ldr	r3, [r0, #16]
 80069f6:	690c      	ldr	r4, [r1, #16]
 80069f8:	4680      	mov	r8, r0
 80069fa:	42a3      	cmp	r3, r4
 80069fc:	f2c0 8084 	blt.w	8006b08 <quorem+0x118>
 8006a00:	3c01      	subs	r4, #1
 8006a02:	f101 0714 	add.w	r7, r1, #20
 8006a06:	f100 0614 	add.w	r6, r0, #20
 8006a0a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006a0e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006a12:	3501      	adds	r5, #1
 8006a14:	fbb0 f5f5 	udiv	r5, r0, r5
 8006a18:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006a1c:	eb06 030c 	add.w	r3, r6, ip
 8006a20:	eb07 090c 	add.w	r9, r7, ip
 8006a24:	9301      	str	r3, [sp, #4]
 8006a26:	b39d      	cbz	r5, 8006a90 <quorem+0xa0>
 8006a28:	f04f 0a00 	mov.w	sl, #0
 8006a2c:	4638      	mov	r0, r7
 8006a2e:	46b6      	mov	lr, r6
 8006a30:	46d3      	mov	fp, sl
 8006a32:	f850 2b04 	ldr.w	r2, [r0], #4
 8006a36:	b293      	uxth	r3, r2
 8006a38:	fb05 a303 	mla	r3, r5, r3, sl
 8006a3c:	0c12      	lsrs	r2, r2, #16
 8006a3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a42:	fb05 a202 	mla	r2, r5, r2, sl
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	ebab 0303 	sub.w	r3, fp, r3
 8006a4c:	f8de b000 	ldr.w	fp, [lr]
 8006a50:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006a54:	fa1f fb8b 	uxth.w	fp, fp
 8006a58:	445b      	add	r3, fp
 8006a5a:	fa1f fb82 	uxth.w	fp, r2
 8006a5e:	f8de 2000 	ldr.w	r2, [lr]
 8006a62:	4581      	cmp	r9, r0
 8006a64:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006a68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a72:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006a76:	f84e 3b04 	str.w	r3, [lr], #4
 8006a7a:	d2da      	bcs.n	8006a32 <quorem+0x42>
 8006a7c:	f856 300c 	ldr.w	r3, [r6, ip]
 8006a80:	b933      	cbnz	r3, 8006a90 <quorem+0xa0>
 8006a82:	9b01      	ldr	r3, [sp, #4]
 8006a84:	3b04      	subs	r3, #4
 8006a86:	429e      	cmp	r6, r3
 8006a88:	461a      	mov	r2, r3
 8006a8a:	d331      	bcc.n	8006af0 <quorem+0x100>
 8006a8c:	f8c8 4010 	str.w	r4, [r8, #16]
 8006a90:	4640      	mov	r0, r8
 8006a92:	f001 fbb3 	bl	80081fc <__mcmp>
 8006a96:	2800      	cmp	r0, #0
 8006a98:	db26      	blt.n	8006ae8 <quorem+0xf8>
 8006a9a:	4630      	mov	r0, r6
 8006a9c:	f04f 0c00 	mov.w	ip, #0
 8006aa0:	3501      	adds	r5, #1
 8006aa2:	f857 1b04 	ldr.w	r1, [r7], #4
 8006aa6:	f8d0 e000 	ldr.w	lr, [r0]
 8006aaa:	b28b      	uxth	r3, r1
 8006aac:	ebac 0303 	sub.w	r3, ip, r3
 8006ab0:	fa1f f28e 	uxth.w	r2, lr
 8006ab4:	4413      	add	r3, r2
 8006ab6:	0c0a      	lsrs	r2, r1, #16
 8006ab8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006abc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ac6:	45b9      	cmp	r9, r7
 8006ac8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006acc:	f840 3b04 	str.w	r3, [r0], #4
 8006ad0:	d2e7      	bcs.n	8006aa2 <quorem+0xb2>
 8006ad2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006ad6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006ada:	b92a      	cbnz	r2, 8006ae8 <quorem+0xf8>
 8006adc:	3b04      	subs	r3, #4
 8006ade:	429e      	cmp	r6, r3
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	d30b      	bcc.n	8006afc <quorem+0x10c>
 8006ae4:	f8c8 4010 	str.w	r4, [r8, #16]
 8006ae8:	4628      	mov	r0, r5
 8006aea:	b003      	add	sp, #12
 8006aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006af0:	6812      	ldr	r2, [r2, #0]
 8006af2:	3b04      	subs	r3, #4
 8006af4:	2a00      	cmp	r2, #0
 8006af6:	d1c9      	bne.n	8006a8c <quorem+0x9c>
 8006af8:	3c01      	subs	r4, #1
 8006afa:	e7c4      	b.n	8006a86 <quorem+0x96>
 8006afc:	6812      	ldr	r2, [r2, #0]
 8006afe:	3b04      	subs	r3, #4
 8006b00:	2a00      	cmp	r2, #0
 8006b02:	d1ef      	bne.n	8006ae4 <quorem+0xf4>
 8006b04:	3c01      	subs	r4, #1
 8006b06:	e7ea      	b.n	8006ade <quorem+0xee>
 8006b08:	2000      	movs	r0, #0
 8006b0a:	e7ee      	b.n	8006aea <quorem+0xfa>
 8006b0c:	0000      	movs	r0, r0
	...

08006b10 <_dtoa_r>:
 8006b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b14:	4616      	mov	r6, r2
 8006b16:	461f      	mov	r7, r3
 8006b18:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006b1a:	b095      	sub	sp, #84	; 0x54
 8006b1c:	4604      	mov	r4, r0
 8006b1e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8006b22:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006b26:	b93d      	cbnz	r5, 8006b38 <_dtoa_r+0x28>
 8006b28:	2010      	movs	r0, #16
 8006b2a:	f001 f8e1 	bl	8007cf0 <malloc>
 8006b2e:	6260      	str	r0, [r4, #36]	; 0x24
 8006b30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006b34:	6005      	str	r5, [r0, #0]
 8006b36:	60c5      	str	r5, [r0, #12]
 8006b38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b3a:	6819      	ldr	r1, [r3, #0]
 8006b3c:	b151      	cbz	r1, 8006b54 <_dtoa_r+0x44>
 8006b3e:	685a      	ldr	r2, [r3, #4]
 8006b40:	2301      	movs	r3, #1
 8006b42:	4093      	lsls	r3, r2
 8006b44:	604a      	str	r2, [r1, #4]
 8006b46:	608b      	str	r3, [r1, #8]
 8006b48:	4620      	mov	r0, r4
 8006b4a:	f001 f938 	bl	8007dbe <_Bfree>
 8006b4e:	2200      	movs	r2, #0
 8006b50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	1e3b      	subs	r3, r7, #0
 8006b56:	bfaf      	iteee	ge
 8006b58:	2300      	movge	r3, #0
 8006b5a:	2201      	movlt	r2, #1
 8006b5c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006b60:	9303      	strlt	r3, [sp, #12]
 8006b62:	bfac      	ite	ge
 8006b64:	f8c8 3000 	strge.w	r3, [r8]
 8006b68:	f8c8 2000 	strlt.w	r2, [r8]
 8006b6c:	4bae      	ldr	r3, [pc, #696]	; (8006e28 <_dtoa_r+0x318>)
 8006b6e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006b72:	ea33 0308 	bics.w	r3, r3, r8
 8006b76:	d11b      	bne.n	8006bb0 <_dtoa_r+0xa0>
 8006b78:	f242 730f 	movw	r3, #9999	; 0x270f
 8006b7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006b7e:	6013      	str	r3, [r2, #0]
 8006b80:	9b02      	ldr	r3, [sp, #8]
 8006b82:	b923      	cbnz	r3, 8006b8e <_dtoa_r+0x7e>
 8006b84:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	f000 8545 	beq.w	8007618 <_dtoa_r+0xb08>
 8006b8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b90:	b953      	cbnz	r3, 8006ba8 <_dtoa_r+0x98>
 8006b92:	4ba6      	ldr	r3, [pc, #664]	; (8006e2c <_dtoa_r+0x31c>)
 8006b94:	e021      	b.n	8006bda <_dtoa_r+0xca>
 8006b96:	4ba6      	ldr	r3, [pc, #664]	; (8006e30 <_dtoa_r+0x320>)
 8006b98:	9306      	str	r3, [sp, #24]
 8006b9a:	3308      	adds	r3, #8
 8006b9c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006b9e:	6013      	str	r3, [r2, #0]
 8006ba0:	9806      	ldr	r0, [sp, #24]
 8006ba2:	b015      	add	sp, #84	; 0x54
 8006ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba8:	4ba0      	ldr	r3, [pc, #640]	; (8006e2c <_dtoa_r+0x31c>)
 8006baa:	9306      	str	r3, [sp, #24]
 8006bac:	3303      	adds	r3, #3
 8006bae:	e7f5      	b.n	8006b9c <_dtoa_r+0x8c>
 8006bb0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	4630      	mov	r0, r6
 8006bba:	4639      	mov	r1, r7
 8006bbc:	f7f9 fefe 	bl	80009bc <__aeabi_dcmpeq>
 8006bc0:	4682      	mov	sl, r0
 8006bc2:	b160      	cbz	r0, 8006bde <_dtoa_r+0xce>
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006bc8:	6013      	str	r3, [r2, #0]
 8006bca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f000 8520 	beq.w	8007612 <_dtoa_r+0xb02>
 8006bd2:	4b98      	ldr	r3, [pc, #608]	; (8006e34 <_dtoa_r+0x324>)
 8006bd4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006bd6:	6013      	str	r3, [r2, #0]
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	9306      	str	r3, [sp, #24]
 8006bdc:	e7e0      	b.n	8006ba0 <_dtoa_r+0x90>
 8006bde:	ab12      	add	r3, sp, #72	; 0x48
 8006be0:	9301      	str	r3, [sp, #4]
 8006be2:	ab13      	add	r3, sp, #76	; 0x4c
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	4632      	mov	r2, r6
 8006be8:	463b      	mov	r3, r7
 8006bea:	4620      	mov	r0, r4
 8006bec:	f001 fbf4 	bl	80083d8 <__d2b>
 8006bf0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006bf4:	4683      	mov	fp, r0
 8006bf6:	2d00      	cmp	r5, #0
 8006bf8:	d07d      	beq.n	8006cf6 <_dtoa_r+0x1e6>
 8006bfa:	46b0      	mov	r8, r6
 8006bfc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006c00:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8006c04:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8006c08:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006c0c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8006c10:	2200      	movs	r2, #0
 8006c12:	4b89      	ldr	r3, [pc, #548]	; (8006e38 <_dtoa_r+0x328>)
 8006c14:	4640      	mov	r0, r8
 8006c16:	4649      	mov	r1, r9
 8006c18:	f7f9 fab0 	bl	800017c <__aeabi_dsub>
 8006c1c:	a37c      	add	r3, pc, #496	; (adr r3, 8006e10 <_dtoa_r+0x300>)
 8006c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c22:	f7f9 fc63 	bl	80004ec <__aeabi_dmul>
 8006c26:	a37c      	add	r3, pc, #496	; (adr r3, 8006e18 <_dtoa_r+0x308>)
 8006c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2c:	f7f9 faa8 	bl	8000180 <__adddf3>
 8006c30:	4606      	mov	r6, r0
 8006c32:	4628      	mov	r0, r5
 8006c34:	460f      	mov	r7, r1
 8006c36:	f7f9 fbef 	bl	8000418 <__aeabi_i2d>
 8006c3a:	a379      	add	r3, pc, #484	; (adr r3, 8006e20 <_dtoa_r+0x310>)
 8006c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c40:	f7f9 fc54 	bl	80004ec <__aeabi_dmul>
 8006c44:	4602      	mov	r2, r0
 8006c46:	460b      	mov	r3, r1
 8006c48:	4630      	mov	r0, r6
 8006c4a:	4639      	mov	r1, r7
 8006c4c:	f7f9 fa98 	bl	8000180 <__adddf3>
 8006c50:	4606      	mov	r6, r0
 8006c52:	460f      	mov	r7, r1
 8006c54:	f7f9 fefa 	bl	8000a4c <__aeabi_d2iz>
 8006c58:	2200      	movs	r2, #0
 8006c5a:	4682      	mov	sl, r0
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	4630      	mov	r0, r6
 8006c60:	4639      	mov	r1, r7
 8006c62:	f7f9 feb5 	bl	80009d0 <__aeabi_dcmplt>
 8006c66:	b148      	cbz	r0, 8006c7c <_dtoa_r+0x16c>
 8006c68:	4650      	mov	r0, sl
 8006c6a:	f7f9 fbd5 	bl	8000418 <__aeabi_i2d>
 8006c6e:	4632      	mov	r2, r6
 8006c70:	463b      	mov	r3, r7
 8006c72:	f7f9 fea3 	bl	80009bc <__aeabi_dcmpeq>
 8006c76:	b908      	cbnz	r0, 8006c7c <_dtoa_r+0x16c>
 8006c78:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c7c:	f1ba 0f16 	cmp.w	sl, #22
 8006c80:	d85a      	bhi.n	8006d38 <_dtoa_r+0x228>
 8006c82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c86:	496d      	ldr	r1, [pc, #436]	; (8006e3c <_dtoa_r+0x32c>)
 8006c88:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006c8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c90:	f7f9 febc 	bl	8000a0c <__aeabi_dcmpgt>
 8006c94:	2800      	cmp	r0, #0
 8006c96:	d051      	beq.n	8006d3c <_dtoa_r+0x22c>
 8006c98:	2300      	movs	r3, #0
 8006c9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c9e:	930d      	str	r3, [sp, #52]	; 0x34
 8006ca0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ca2:	1b5d      	subs	r5, r3, r5
 8006ca4:	1e6b      	subs	r3, r5, #1
 8006ca6:	9307      	str	r3, [sp, #28]
 8006ca8:	bf43      	ittte	mi
 8006caa:	2300      	movmi	r3, #0
 8006cac:	f1c5 0901 	rsbmi	r9, r5, #1
 8006cb0:	9307      	strmi	r3, [sp, #28]
 8006cb2:	f04f 0900 	movpl.w	r9, #0
 8006cb6:	f1ba 0f00 	cmp.w	sl, #0
 8006cba:	db41      	blt.n	8006d40 <_dtoa_r+0x230>
 8006cbc:	9b07      	ldr	r3, [sp, #28]
 8006cbe:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8006cc2:	4453      	add	r3, sl
 8006cc4:	9307      	str	r3, [sp, #28]
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	9308      	str	r3, [sp, #32]
 8006cca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006ccc:	2b09      	cmp	r3, #9
 8006cce:	f200 808f 	bhi.w	8006df0 <_dtoa_r+0x2e0>
 8006cd2:	2b05      	cmp	r3, #5
 8006cd4:	bfc4      	itt	gt
 8006cd6:	3b04      	subgt	r3, #4
 8006cd8:	931e      	strgt	r3, [sp, #120]	; 0x78
 8006cda:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006cdc:	bfc8      	it	gt
 8006cde:	2500      	movgt	r5, #0
 8006ce0:	f1a3 0302 	sub.w	r3, r3, #2
 8006ce4:	bfd8      	it	le
 8006ce6:	2501      	movle	r5, #1
 8006ce8:	2b03      	cmp	r3, #3
 8006cea:	f200 808d 	bhi.w	8006e08 <_dtoa_r+0x2f8>
 8006cee:	e8df f003 	tbb	[pc, r3]
 8006cf2:	7d7b      	.short	0x7d7b
 8006cf4:	6f2f      	.short	0x6f2f
 8006cf6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006cfa:	441d      	add	r5, r3
 8006cfc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006d00:	2820      	cmp	r0, #32
 8006d02:	dd13      	ble.n	8006d2c <_dtoa_r+0x21c>
 8006d04:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006d08:	9b02      	ldr	r3, [sp, #8]
 8006d0a:	fa08 f800 	lsl.w	r8, r8, r0
 8006d0e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006d12:	fa23 f000 	lsr.w	r0, r3, r0
 8006d16:	ea48 0000 	orr.w	r0, r8, r0
 8006d1a:	f7f9 fb6d 	bl	80003f8 <__aeabi_ui2d>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	4680      	mov	r8, r0
 8006d22:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8006d26:	3d01      	subs	r5, #1
 8006d28:	9310      	str	r3, [sp, #64]	; 0x40
 8006d2a:	e771      	b.n	8006c10 <_dtoa_r+0x100>
 8006d2c:	9b02      	ldr	r3, [sp, #8]
 8006d2e:	f1c0 0020 	rsb	r0, r0, #32
 8006d32:	fa03 f000 	lsl.w	r0, r3, r0
 8006d36:	e7f0      	b.n	8006d1a <_dtoa_r+0x20a>
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e7b0      	b.n	8006c9e <_dtoa_r+0x18e>
 8006d3c:	900d      	str	r0, [sp, #52]	; 0x34
 8006d3e:	e7af      	b.n	8006ca0 <_dtoa_r+0x190>
 8006d40:	f1ca 0300 	rsb	r3, sl, #0
 8006d44:	9308      	str	r3, [sp, #32]
 8006d46:	2300      	movs	r3, #0
 8006d48:	eba9 090a 	sub.w	r9, r9, sl
 8006d4c:	930c      	str	r3, [sp, #48]	; 0x30
 8006d4e:	e7bc      	b.n	8006cca <_dtoa_r+0x1ba>
 8006d50:	2301      	movs	r3, #1
 8006d52:	9309      	str	r3, [sp, #36]	; 0x24
 8006d54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	dd74      	ble.n	8006e44 <_dtoa_r+0x334>
 8006d5a:	4698      	mov	r8, r3
 8006d5c:	9304      	str	r3, [sp, #16]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006d62:	6072      	str	r2, [r6, #4]
 8006d64:	2204      	movs	r2, #4
 8006d66:	f102 0014 	add.w	r0, r2, #20
 8006d6a:	4298      	cmp	r0, r3
 8006d6c:	6871      	ldr	r1, [r6, #4]
 8006d6e:	d96e      	bls.n	8006e4e <_dtoa_r+0x33e>
 8006d70:	4620      	mov	r0, r4
 8006d72:	f000 fff0 	bl	8007d56 <_Balloc>
 8006d76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d78:	6030      	str	r0, [r6, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f1b8 0f0e 	cmp.w	r8, #14
 8006d80:	9306      	str	r3, [sp, #24]
 8006d82:	f200 80ed 	bhi.w	8006f60 <_dtoa_r+0x450>
 8006d86:	2d00      	cmp	r5, #0
 8006d88:	f000 80ea 	beq.w	8006f60 <_dtoa_r+0x450>
 8006d8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d90:	f1ba 0f00 	cmp.w	sl, #0
 8006d94:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006d98:	dd77      	ble.n	8006e8a <_dtoa_r+0x37a>
 8006d9a:	4a28      	ldr	r2, [pc, #160]	; (8006e3c <_dtoa_r+0x32c>)
 8006d9c:	f00a 030f 	and.w	r3, sl, #15
 8006da0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006da4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006da8:	06f0      	lsls	r0, r6, #27
 8006daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006db2:	d568      	bpl.n	8006e86 <_dtoa_r+0x376>
 8006db4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006db8:	4b21      	ldr	r3, [pc, #132]	; (8006e40 <_dtoa_r+0x330>)
 8006dba:	2503      	movs	r5, #3
 8006dbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006dc0:	f7f9 fcbe 	bl	8000740 <__aeabi_ddiv>
 8006dc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dc8:	f006 060f 	and.w	r6, r6, #15
 8006dcc:	4f1c      	ldr	r7, [pc, #112]	; (8006e40 <_dtoa_r+0x330>)
 8006dce:	e04f      	b.n	8006e70 <_dtoa_r+0x360>
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8006dd4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006dd6:	4453      	add	r3, sl
 8006dd8:	f103 0801 	add.w	r8, r3, #1
 8006ddc:	9304      	str	r3, [sp, #16]
 8006dde:	4643      	mov	r3, r8
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	bfb8      	it	lt
 8006de4:	2301      	movlt	r3, #1
 8006de6:	e7ba      	b.n	8006d5e <_dtoa_r+0x24e>
 8006de8:	2300      	movs	r3, #0
 8006dea:	e7b2      	b.n	8006d52 <_dtoa_r+0x242>
 8006dec:	2300      	movs	r3, #0
 8006dee:	e7f0      	b.n	8006dd2 <_dtoa_r+0x2c2>
 8006df0:	2501      	movs	r5, #1
 8006df2:	2300      	movs	r3, #0
 8006df4:	9509      	str	r5, [sp, #36]	; 0x24
 8006df6:	931e      	str	r3, [sp, #120]	; 0x78
 8006df8:	f04f 33ff 	mov.w	r3, #4294967295
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	9304      	str	r3, [sp, #16]
 8006e00:	4698      	mov	r8, r3
 8006e02:	2312      	movs	r3, #18
 8006e04:	921f      	str	r2, [sp, #124]	; 0x7c
 8006e06:	e7aa      	b.n	8006d5e <_dtoa_r+0x24e>
 8006e08:	2301      	movs	r3, #1
 8006e0a:	9309      	str	r3, [sp, #36]	; 0x24
 8006e0c:	e7f4      	b.n	8006df8 <_dtoa_r+0x2e8>
 8006e0e:	bf00      	nop
 8006e10:	636f4361 	.word	0x636f4361
 8006e14:	3fd287a7 	.word	0x3fd287a7
 8006e18:	8b60c8b3 	.word	0x8b60c8b3
 8006e1c:	3fc68a28 	.word	0x3fc68a28
 8006e20:	509f79fb 	.word	0x509f79fb
 8006e24:	3fd34413 	.word	0x3fd34413
 8006e28:	7ff00000 	.word	0x7ff00000
 8006e2c:	08008d19 	.word	0x08008d19
 8006e30:	08008d10 	.word	0x08008d10
 8006e34:	08008c9d 	.word	0x08008c9d
 8006e38:	3ff80000 	.word	0x3ff80000
 8006e3c:	08008d50 	.word	0x08008d50
 8006e40:	08008d28 	.word	0x08008d28
 8006e44:	2301      	movs	r3, #1
 8006e46:	9304      	str	r3, [sp, #16]
 8006e48:	4698      	mov	r8, r3
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	e7da      	b.n	8006e04 <_dtoa_r+0x2f4>
 8006e4e:	3101      	adds	r1, #1
 8006e50:	6071      	str	r1, [r6, #4]
 8006e52:	0052      	lsls	r2, r2, #1
 8006e54:	e787      	b.n	8006d66 <_dtoa_r+0x256>
 8006e56:	07f1      	lsls	r1, r6, #31
 8006e58:	d508      	bpl.n	8006e6c <_dtoa_r+0x35c>
 8006e5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006e5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e62:	f7f9 fb43 	bl	80004ec <__aeabi_dmul>
 8006e66:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006e6a:	3501      	adds	r5, #1
 8006e6c:	1076      	asrs	r6, r6, #1
 8006e6e:	3708      	adds	r7, #8
 8006e70:	2e00      	cmp	r6, #0
 8006e72:	d1f0      	bne.n	8006e56 <_dtoa_r+0x346>
 8006e74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006e78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e7c:	f7f9 fc60 	bl	8000740 <__aeabi_ddiv>
 8006e80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e84:	e01b      	b.n	8006ebe <_dtoa_r+0x3ae>
 8006e86:	2502      	movs	r5, #2
 8006e88:	e7a0      	b.n	8006dcc <_dtoa_r+0x2bc>
 8006e8a:	f000 80a4 	beq.w	8006fd6 <_dtoa_r+0x4c6>
 8006e8e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006e92:	f1ca 0600 	rsb	r6, sl, #0
 8006e96:	4ba0      	ldr	r3, [pc, #640]	; (8007118 <_dtoa_r+0x608>)
 8006e98:	f006 020f 	and.w	r2, r6, #15
 8006e9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea4:	f7f9 fb22 	bl	80004ec <__aeabi_dmul>
 8006ea8:	2502      	movs	r5, #2
 8006eaa:	2300      	movs	r3, #0
 8006eac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006eb0:	4f9a      	ldr	r7, [pc, #616]	; (800711c <_dtoa_r+0x60c>)
 8006eb2:	1136      	asrs	r6, r6, #4
 8006eb4:	2e00      	cmp	r6, #0
 8006eb6:	f040 8083 	bne.w	8006fc0 <_dtoa_r+0x4b0>
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1e0      	bne.n	8006e80 <_dtoa_r+0x370>
 8006ebe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f000 808a 	beq.w	8006fda <_dtoa_r+0x4ca>
 8006ec6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006eca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006ece:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	4b92      	ldr	r3, [pc, #584]	; (8007120 <_dtoa_r+0x610>)
 8006ed6:	f7f9 fd7b 	bl	80009d0 <__aeabi_dcmplt>
 8006eda:	2800      	cmp	r0, #0
 8006edc:	d07d      	beq.n	8006fda <_dtoa_r+0x4ca>
 8006ede:	f1b8 0f00 	cmp.w	r8, #0
 8006ee2:	d07a      	beq.n	8006fda <_dtoa_r+0x4ca>
 8006ee4:	9b04      	ldr	r3, [sp, #16]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	dd36      	ble.n	8006f58 <_dtoa_r+0x448>
 8006eea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006eee:	2200      	movs	r2, #0
 8006ef0:	4b8c      	ldr	r3, [pc, #560]	; (8007124 <_dtoa_r+0x614>)
 8006ef2:	f7f9 fafb 	bl	80004ec <__aeabi_dmul>
 8006ef6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006efa:	9e04      	ldr	r6, [sp, #16]
 8006efc:	f10a 37ff 	add.w	r7, sl, #4294967295
 8006f00:	3501      	adds	r5, #1
 8006f02:	4628      	mov	r0, r5
 8006f04:	f7f9 fa88 	bl	8000418 <__aeabi_i2d>
 8006f08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f0c:	f7f9 faee 	bl	80004ec <__aeabi_dmul>
 8006f10:	2200      	movs	r2, #0
 8006f12:	4b85      	ldr	r3, [pc, #532]	; (8007128 <_dtoa_r+0x618>)
 8006f14:	f7f9 f934 	bl	8000180 <__adddf3>
 8006f18:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006f1c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006f20:	950b      	str	r5, [sp, #44]	; 0x2c
 8006f22:	2e00      	cmp	r6, #0
 8006f24:	d15c      	bne.n	8006fe0 <_dtoa_r+0x4d0>
 8006f26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	4b7f      	ldr	r3, [pc, #508]	; (800712c <_dtoa_r+0x61c>)
 8006f2e:	f7f9 f925 	bl	800017c <__aeabi_dsub>
 8006f32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f34:	462b      	mov	r3, r5
 8006f36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f3a:	f7f9 fd67 	bl	8000a0c <__aeabi_dcmpgt>
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	f040 8281 	bne.w	8007446 <_dtoa_r+0x936>
 8006f44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f4a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006f4e:	f7f9 fd3f 	bl	80009d0 <__aeabi_dcmplt>
 8006f52:	2800      	cmp	r0, #0
 8006f54:	f040 8275 	bne.w	8007442 <_dtoa_r+0x932>
 8006f58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006f5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	f2c0 814b 	blt.w	80071fe <_dtoa_r+0x6ee>
 8006f68:	f1ba 0f0e 	cmp.w	sl, #14
 8006f6c:	f300 8147 	bgt.w	80071fe <_dtoa_r+0x6ee>
 8006f70:	4b69      	ldr	r3, [pc, #420]	; (8007118 <_dtoa_r+0x608>)
 8006f72:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006f7e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f280 80d7 	bge.w	8007134 <_dtoa_r+0x624>
 8006f86:	f1b8 0f00 	cmp.w	r8, #0
 8006f8a:	f300 80d3 	bgt.w	8007134 <_dtoa_r+0x624>
 8006f8e:	f040 8257 	bne.w	8007440 <_dtoa_r+0x930>
 8006f92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f96:	2200      	movs	r2, #0
 8006f98:	4b64      	ldr	r3, [pc, #400]	; (800712c <_dtoa_r+0x61c>)
 8006f9a:	f7f9 faa7 	bl	80004ec <__aeabi_dmul>
 8006f9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fa2:	f7f9 fd29 	bl	80009f8 <__aeabi_dcmpge>
 8006fa6:	4646      	mov	r6, r8
 8006fa8:	4647      	mov	r7, r8
 8006faa:	2800      	cmp	r0, #0
 8006fac:	f040 822d 	bne.w	800740a <_dtoa_r+0x8fa>
 8006fb0:	9b06      	ldr	r3, [sp, #24]
 8006fb2:	9a06      	ldr	r2, [sp, #24]
 8006fb4:	1c5d      	adds	r5, r3, #1
 8006fb6:	2331      	movs	r3, #49	; 0x31
 8006fb8:	f10a 0a01 	add.w	sl, sl, #1
 8006fbc:	7013      	strb	r3, [r2, #0]
 8006fbe:	e228      	b.n	8007412 <_dtoa_r+0x902>
 8006fc0:	07f2      	lsls	r2, r6, #31
 8006fc2:	d505      	bpl.n	8006fd0 <_dtoa_r+0x4c0>
 8006fc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fc8:	f7f9 fa90 	bl	80004ec <__aeabi_dmul>
 8006fcc:	2301      	movs	r3, #1
 8006fce:	3501      	adds	r5, #1
 8006fd0:	1076      	asrs	r6, r6, #1
 8006fd2:	3708      	adds	r7, #8
 8006fd4:	e76e      	b.n	8006eb4 <_dtoa_r+0x3a4>
 8006fd6:	2502      	movs	r5, #2
 8006fd8:	e771      	b.n	8006ebe <_dtoa_r+0x3ae>
 8006fda:	4657      	mov	r7, sl
 8006fdc:	4646      	mov	r6, r8
 8006fde:	e790      	b.n	8006f02 <_dtoa_r+0x3f2>
 8006fe0:	4b4d      	ldr	r3, [pc, #308]	; (8007118 <_dtoa_r+0x608>)
 8006fe2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006fe6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d048      	beq.n	8007082 <_dtoa_r+0x572>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	2000      	movs	r0, #0
 8006ff6:	494e      	ldr	r1, [pc, #312]	; (8007130 <_dtoa_r+0x620>)
 8006ff8:	f7f9 fba2 	bl	8000740 <__aeabi_ddiv>
 8006ffc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007000:	f7f9 f8bc 	bl	800017c <__aeabi_dsub>
 8007004:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007008:	9d06      	ldr	r5, [sp, #24]
 800700a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800700e:	f7f9 fd1d 	bl	8000a4c <__aeabi_d2iz>
 8007012:	9011      	str	r0, [sp, #68]	; 0x44
 8007014:	f7f9 fa00 	bl	8000418 <__aeabi_i2d>
 8007018:	4602      	mov	r2, r0
 800701a:	460b      	mov	r3, r1
 800701c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007020:	f7f9 f8ac 	bl	800017c <__aeabi_dsub>
 8007024:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007026:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800702a:	3330      	adds	r3, #48	; 0x30
 800702c:	f805 3b01 	strb.w	r3, [r5], #1
 8007030:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007034:	f7f9 fccc 	bl	80009d0 <__aeabi_dcmplt>
 8007038:	2800      	cmp	r0, #0
 800703a:	d163      	bne.n	8007104 <_dtoa_r+0x5f4>
 800703c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007040:	2000      	movs	r0, #0
 8007042:	4937      	ldr	r1, [pc, #220]	; (8007120 <_dtoa_r+0x610>)
 8007044:	f7f9 f89a 	bl	800017c <__aeabi_dsub>
 8007048:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800704c:	f7f9 fcc0 	bl	80009d0 <__aeabi_dcmplt>
 8007050:	2800      	cmp	r0, #0
 8007052:	f040 80b5 	bne.w	80071c0 <_dtoa_r+0x6b0>
 8007056:	9b06      	ldr	r3, [sp, #24]
 8007058:	1aeb      	subs	r3, r5, r3
 800705a:	429e      	cmp	r6, r3
 800705c:	f77f af7c 	ble.w	8006f58 <_dtoa_r+0x448>
 8007060:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007064:	2200      	movs	r2, #0
 8007066:	4b2f      	ldr	r3, [pc, #188]	; (8007124 <_dtoa_r+0x614>)
 8007068:	f7f9 fa40 	bl	80004ec <__aeabi_dmul>
 800706c:	2200      	movs	r2, #0
 800706e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007072:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007076:	4b2b      	ldr	r3, [pc, #172]	; (8007124 <_dtoa_r+0x614>)
 8007078:	f7f9 fa38 	bl	80004ec <__aeabi_dmul>
 800707c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007080:	e7c3      	b.n	800700a <_dtoa_r+0x4fa>
 8007082:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007086:	f7f9 fa31 	bl	80004ec <__aeabi_dmul>
 800708a:	9b06      	ldr	r3, [sp, #24]
 800708c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007090:	199d      	adds	r5, r3, r6
 8007092:	461e      	mov	r6, r3
 8007094:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007098:	f7f9 fcd8 	bl	8000a4c <__aeabi_d2iz>
 800709c:	9011      	str	r0, [sp, #68]	; 0x44
 800709e:	f7f9 f9bb 	bl	8000418 <__aeabi_i2d>
 80070a2:	4602      	mov	r2, r0
 80070a4:	460b      	mov	r3, r1
 80070a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070aa:	f7f9 f867 	bl	800017c <__aeabi_dsub>
 80070ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80070b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070b4:	3330      	adds	r3, #48	; 0x30
 80070b6:	f806 3b01 	strb.w	r3, [r6], #1
 80070ba:	42ae      	cmp	r6, r5
 80070bc:	f04f 0200 	mov.w	r2, #0
 80070c0:	d124      	bne.n	800710c <_dtoa_r+0x5fc>
 80070c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80070c6:	4b1a      	ldr	r3, [pc, #104]	; (8007130 <_dtoa_r+0x620>)
 80070c8:	f7f9 f85a 	bl	8000180 <__adddf3>
 80070cc:	4602      	mov	r2, r0
 80070ce:	460b      	mov	r3, r1
 80070d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070d4:	f7f9 fc9a 	bl	8000a0c <__aeabi_dcmpgt>
 80070d8:	2800      	cmp	r0, #0
 80070da:	d171      	bne.n	80071c0 <_dtoa_r+0x6b0>
 80070dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80070e0:	2000      	movs	r0, #0
 80070e2:	4913      	ldr	r1, [pc, #76]	; (8007130 <_dtoa_r+0x620>)
 80070e4:	f7f9 f84a 	bl	800017c <__aeabi_dsub>
 80070e8:	4602      	mov	r2, r0
 80070ea:	460b      	mov	r3, r1
 80070ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070f0:	f7f9 fc6e 	bl	80009d0 <__aeabi_dcmplt>
 80070f4:	2800      	cmp	r0, #0
 80070f6:	f43f af2f 	beq.w	8006f58 <_dtoa_r+0x448>
 80070fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80070fe:	1e6a      	subs	r2, r5, #1
 8007100:	2b30      	cmp	r3, #48	; 0x30
 8007102:	d001      	beq.n	8007108 <_dtoa_r+0x5f8>
 8007104:	46ba      	mov	sl, r7
 8007106:	e04a      	b.n	800719e <_dtoa_r+0x68e>
 8007108:	4615      	mov	r5, r2
 800710a:	e7f6      	b.n	80070fa <_dtoa_r+0x5ea>
 800710c:	4b05      	ldr	r3, [pc, #20]	; (8007124 <_dtoa_r+0x614>)
 800710e:	f7f9 f9ed 	bl	80004ec <__aeabi_dmul>
 8007112:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007116:	e7bd      	b.n	8007094 <_dtoa_r+0x584>
 8007118:	08008d50 	.word	0x08008d50
 800711c:	08008d28 	.word	0x08008d28
 8007120:	3ff00000 	.word	0x3ff00000
 8007124:	40240000 	.word	0x40240000
 8007128:	401c0000 	.word	0x401c0000
 800712c:	40140000 	.word	0x40140000
 8007130:	3fe00000 	.word	0x3fe00000
 8007134:	9d06      	ldr	r5, [sp, #24]
 8007136:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800713a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800713e:	4630      	mov	r0, r6
 8007140:	4639      	mov	r1, r7
 8007142:	f7f9 fafd 	bl	8000740 <__aeabi_ddiv>
 8007146:	f7f9 fc81 	bl	8000a4c <__aeabi_d2iz>
 800714a:	4681      	mov	r9, r0
 800714c:	f7f9 f964 	bl	8000418 <__aeabi_i2d>
 8007150:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007154:	f7f9 f9ca 	bl	80004ec <__aeabi_dmul>
 8007158:	4602      	mov	r2, r0
 800715a:	460b      	mov	r3, r1
 800715c:	4630      	mov	r0, r6
 800715e:	4639      	mov	r1, r7
 8007160:	f7f9 f80c 	bl	800017c <__aeabi_dsub>
 8007164:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8007168:	f805 6b01 	strb.w	r6, [r5], #1
 800716c:	9e06      	ldr	r6, [sp, #24]
 800716e:	4602      	mov	r2, r0
 8007170:	1bae      	subs	r6, r5, r6
 8007172:	45b0      	cmp	r8, r6
 8007174:	460b      	mov	r3, r1
 8007176:	d135      	bne.n	80071e4 <_dtoa_r+0x6d4>
 8007178:	f7f9 f802 	bl	8000180 <__adddf3>
 800717c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007180:	4606      	mov	r6, r0
 8007182:	460f      	mov	r7, r1
 8007184:	f7f9 fc42 	bl	8000a0c <__aeabi_dcmpgt>
 8007188:	b9c8      	cbnz	r0, 80071be <_dtoa_r+0x6ae>
 800718a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800718e:	4630      	mov	r0, r6
 8007190:	4639      	mov	r1, r7
 8007192:	f7f9 fc13 	bl	80009bc <__aeabi_dcmpeq>
 8007196:	b110      	cbz	r0, 800719e <_dtoa_r+0x68e>
 8007198:	f019 0f01 	tst.w	r9, #1
 800719c:	d10f      	bne.n	80071be <_dtoa_r+0x6ae>
 800719e:	4659      	mov	r1, fp
 80071a0:	4620      	mov	r0, r4
 80071a2:	f000 fe0c 	bl	8007dbe <_Bfree>
 80071a6:	2300      	movs	r3, #0
 80071a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80071aa:	702b      	strb	r3, [r5, #0]
 80071ac:	f10a 0301 	add.w	r3, sl, #1
 80071b0:	6013      	str	r3, [r2, #0]
 80071b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f43f acf3 	beq.w	8006ba0 <_dtoa_r+0x90>
 80071ba:	601d      	str	r5, [r3, #0]
 80071bc:	e4f0      	b.n	8006ba0 <_dtoa_r+0x90>
 80071be:	4657      	mov	r7, sl
 80071c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80071c4:	1e6b      	subs	r3, r5, #1
 80071c6:	2a39      	cmp	r2, #57	; 0x39
 80071c8:	d106      	bne.n	80071d8 <_dtoa_r+0x6c8>
 80071ca:	9a06      	ldr	r2, [sp, #24]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d107      	bne.n	80071e0 <_dtoa_r+0x6d0>
 80071d0:	2330      	movs	r3, #48	; 0x30
 80071d2:	7013      	strb	r3, [r2, #0]
 80071d4:	4613      	mov	r3, r2
 80071d6:	3701      	adds	r7, #1
 80071d8:	781a      	ldrb	r2, [r3, #0]
 80071da:	3201      	adds	r2, #1
 80071dc:	701a      	strb	r2, [r3, #0]
 80071de:	e791      	b.n	8007104 <_dtoa_r+0x5f4>
 80071e0:	461d      	mov	r5, r3
 80071e2:	e7ed      	b.n	80071c0 <_dtoa_r+0x6b0>
 80071e4:	2200      	movs	r2, #0
 80071e6:	4b99      	ldr	r3, [pc, #612]	; (800744c <_dtoa_r+0x93c>)
 80071e8:	f7f9 f980 	bl	80004ec <__aeabi_dmul>
 80071ec:	2200      	movs	r2, #0
 80071ee:	2300      	movs	r3, #0
 80071f0:	4606      	mov	r6, r0
 80071f2:	460f      	mov	r7, r1
 80071f4:	f7f9 fbe2 	bl	80009bc <__aeabi_dcmpeq>
 80071f8:	2800      	cmp	r0, #0
 80071fa:	d09e      	beq.n	800713a <_dtoa_r+0x62a>
 80071fc:	e7cf      	b.n	800719e <_dtoa_r+0x68e>
 80071fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007200:	2a00      	cmp	r2, #0
 8007202:	f000 8088 	beq.w	8007316 <_dtoa_r+0x806>
 8007206:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007208:	2a01      	cmp	r2, #1
 800720a:	dc6d      	bgt.n	80072e8 <_dtoa_r+0x7d8>
 800720c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800720e:	2a00      	cmp	r2, #0
 8007210:	d066      	beq.n	80072e0 <_dtoa_r+0x7d0>
 8007212:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007216:	464d      	mov	r5, r9
 8007218:	9e08      	ldr	r6, [sp, #32]
 800721a:	9a07      	ldr	r2, [sp, #28]
 800721c:	2101      	movs	r1, #1
 800721e:	441a      	add	r2, r3
 8007220:	4620      	mov	r0, r4
 8007222:	4499      	add	r9, r3
 8007224:	9207      	str	r2, [sp, #28]
 8007226:	f000 fea8 	bl	8007f7a <__i2b>
 800722a:	4607      	mov	r7, r0
 800722c:	2d00      	cmp	r5, #0
 800722e:	dd0b      	ble.n	8007248 <_dtoa_r+0x738>
 8007230:	9b07      	ldr	r3, [sp, #28]
 8007232:	2b00      	cmp	r3, #0
 8007234:	dd08      	ble.n	8007248 <_dtoa_r+0x738>
 8007236:	42ab      	cmp	r3, r5
 8007238:	bfa8      	it	ge
 800723a:	462b      	movge	r3, r5
 800723c:	9a07      	ldr	r2, [sp, #28]
 800723e:	eba9 0903 	sub.w	r9, r9, r3
 8007242:	1aed      	subs	r5, r5, r3
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	9307      	str	r3, [sp, #28]
 8007248:	9b08      	ldr	r3, [sp, #32]
 800724a:	b1eb      	cbz	r3, 8007288 <_dtoa_r+0x778>
 800724c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800724e:	2b00      	cmp	r3, #0
 8007250:	d065      	beq.n	800731e <_dtoa_r+0x80e>
 8007252:	b18e      	cbz	r6, 8007278 <_dtoa_r+0x768>
 8007254:	4639      	mov	r1, r7
 8007256:	4632      	mov	r2, r6
 8007258:	4620      	mov	r0, r4
 800725a:	f000 ff2d 	bl	80080b8 <__pow5mult>
 800725e:	465a      	mov	r2, fp
 8007260:	4601      	mov	r1, r0
 8007262:	4607      	mov	r7, r0
 8007264:	4620      	mov	r0, r4
 8007266:	f000 fe91 	bl	8007f8c <__multiply>
 800726a:	4659      	mov	r1, fp
 800726c:	900a      	str	r0, [sp, #40]	; 0x28
 800726e:	4620      	mov	r0, r4
 8007270:	f000 fda5 	bl	8007dbe <_Bfree>
 8007274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007276:	469b      	mov	fp, r3
 8007278:	9b08      	ldr	r3, [sp, #32]
 800727a:	1b9a      	subs	r2, r3, r6
 800727c:	d004      	beq.n	8007288 <_dtoa_r+0x778>
 800727e:	4659      	mov	r1, fp
 8007280:	4620      	mov	r0, r4
 8007282:	f000 ff19 	bl	80080b8 <__pow5mult>
 8007286:	4683      	mov	fp, r0
 8007288:	2101      	movs	r1, #1
 800728a:	4620      	mov	r0, r4
 800728c:	f000 fe75 	bl	8007f7a <__i2b>
 8007290:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007292:	4606      	mov	r6, r0
 8007294:	2b00      	cmp	r3, #0
 8007296:	f000 81c6 	beq.w	8007626 <_dtoa_r+0xb16>
 800729a:	461a      	mov	r2, r3
 800729c:	4601      	mov	r1, r0
 800729e:	4620      	mov	r0, r4
 80072a0:	f000 ff0a 	bl	80080b8 <__pow5mult>
 80072a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80072a6:	4606      	mov	r6, r0
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	dc3e      	bgt.n	800732a <_dtoa_r+0x81a>
 80072ac:	9b02      	ldr	r3, [sp, #8]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d137      	bne.n	8007322 <_dtoa_r+0x812>
 80072b2:	9b03      	ldr	r3, [sp, #12]
 80072b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d134      	bne.n	8007326 <_dtoa_r+0x816>
 80072bc:	9b03      	ldr	r3, [sp, #12]
 80072be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072c2:	0d1b      	lsrs	r3, r3, #20
 80072c4:	051b      	lsls	r3, r3, #20
 80072c6:	b12b      	cbz	r3, 80072d4 <_dtoa_r+0x7c4>
 80072c8:	9b07      	ldr	r3, [sp, #28]
 80072ca:	f109 0901 	add.w	r9, r9, #1
 80072ce:	3301      	adds	r3, #1
 80072d0:	9307      	str	r3, [sp, #28]
 80072d2:	2301      	movs	r3, #1
 80072d4:	9308      	str	r3, [sp, #32]
 80072d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d128      	bne.n	800732e <_dtoa_r+0x81e>
 80072dc:	2001      	movs	r0, #1
 80072de:	e02e      	b.n	800733e <_dtoa_r+0x82e>
 80072e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80072e2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80072e6:	e796      	b.n	8007216 <_dtoa_r+0x706>
 80072e8:	9b08      	ldr	r3, [sp, #32]
 80072ea:	f108 36ff 	add.w	r6, r8, #4294967295
 80072ee:	42b3      	cmp	r3, r6
 80072f0:	bfb7      	itett	lt
 80072f2:	9b08      	ldrlt	r3, [sp, #32]
 80072f4:	1b9e      	subge	r6, r3, r6
 80072f6:	1af2      	sublt	r2, r6, r3
 80072f8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80072fa:	bfbf      	itttt	lt
 80072fc:	9608      	strlt	r6, [sp, #32]
 80072fe:	189b      	addlt	r3, r3, r2
 8007300:	930c      	strlt	r3, [sp, #48]	; 0x30
 8007302:	2600      	movlt	r6, #0
 8007304:	f1b8 0f00 	cmp.w	r8, #0
 8007308:	bfb9      	ittee	lt
 800730a:	eba9 0508 	sublt.w	r5, r9, r8
 800730e:	2300      	movlt	r3, #0
 8007310:	464d      	movge	r5, r9
 8007312:	4643      	movge	r3, r8
 8007314:	e781      	b.n	800721a <_dtoa_r+0x70a>
 8007316:	9e08      	ldr	r6, [sp, #32]
 8007318:	464d      	mov	r5, r9
 800731a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800731c:	e786      	b.n	800722c <_dtoa_r+0x71c>
 800731e:	9a08      	ldr	r2, [sp, #32]
 8007320:	e7ad      	b.n	800727e <_dtoa_r+0x76e>
 8007322:	2300      	movs	r3, #0
 8007324:	e7d6      	b.n	80072d4 <_dtoa_r+0x7c4>
 8007326:	9b02      	ldr	r3, [sp, #8]
 8007328:	e7d4      	b.n	80072d4 <_dtoa_r+0x7c4>
 800732a:	2300      	movs	r3, #0
 800732c:	9308      	str	r3, [sp, #32]
 800732e:	6933      	ldr	r3, [r6, #16]
 8007330:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007334:	6918      	ldr	r0, [r3, #16]
 8007336:	f000 fdd2 	bl	8007ede <__hi0bits>
 800733a:	f1c0 0020 	rsb	r0, r0, #32
 800733e:	9b07      	ldr	r3, [sp, #28]
 8007340:	4418      	add	r0, r3
 8007342:	f010 001f 	ands.w	r0, r0, #31
 8007346:	d047      	beq.n	80073d8 <_dtoa_r+0x8c8>
 8007348:	f1c0 0320 	rsb	r3, r0, #32
 800734c:	2b04      	cmp	r3, #4
 800734e:	dd3b      	ble.n	80073c8 <_dtoa_r+0x8b8>
 8007350:	9b07      	ldr	r3, [sp, #28]
 8007352:	f1c0 001c 	rsb	r0, r0, #28
 8007356:	4481      	add	r9, r0
 8007358:	4405      	add	r5, r0
 800735a:	4403      	add	r3, r0
 800735c:	9307      	str	r3, [sp, #28]
 800735e:	f1b9 0f00 	cmp.w	r9, #0
 8007362:	dd05      	ble.n	8007370 <_dtoa_r+0x860>
 8007364:	4659      	mov	r1, fp
 8007366:	464a      	mov	r2, r9
 8007368:	4620      	mov	r0, r4
 800736a:	f000 fef3 	bl	8008154 <__lshift>
 800736e:	4683      	mov	fp, r0
 8007370:	9b07      	ldr	r3, [sp, #28]
 8007372:	2b00      	cmp	r3, #0
 8007374:	dd05      	ble.n	8007382 <_dtoa_r+0x872>
 8007376:	4631      	mov	r1, r6
 8007378:	461a      	mov	r2, r3
 800737a:	4620      	mov	r0, r4
 800737c:	f000 feea 	bl	8008154 <__lshift>
 8007380:	4606      	mov	r6, r0
 8007382:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007384:	b353      	cbz	r3, 80073dc <_dtoa_r+0x8cc>
 8007386:	4631      	mov	r1, r6
 8007388:	4658      	mov	r0, fp
 800738a:	f000 ff37 	bl	80081fc <__mcmp>
 800738e:	2800      	cmp	r0, #0
 8007390:	da24      	bge.n	80073dc <_dtoa_r+0x8cc>
 8007392:	2300      	movs	r3, #0
 8007394:	4659      	mov	r1, fp
 8007396:	220a      	movs	r2, #10
 8007398:	4620      	mov	r0, r4
 800739a:	f000 fd27 	bl	8007dec <__multadd>
 800739e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073a4:	4683      	mov	fp, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f000 8144 	beq.w	8007634 <_dtoa_r+0xb24>
 80073ac:	2300      	movs	r3, #0
 80073ae:	4639      	mov	r1, r7
 80073b0:	220a      	movs	r2, #10
 80073b2:	4620      	mov	r0, r4
 80073b4:	f000 fd1a 	bl	8007dec <__multadd>
 80073b8:	9b04      	ldr	r3, [sp, #16]
 80073ba:	4607      	mov	r7, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	dc4d      	bgt.n	800745c <_dtoa_r+0x94c>
 80073c0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	dd4a      	ble.n	800745c <_dtoa_r+0x94c>
 80073c6:	e011      	b.n	80073ec <_dtoa_r+0x8dc>
 80073c8:	d0c9      	beq.n	800735e <_dtoa_r+0x84e>
 80073ca:	9a07      	ldr	r2, [sp, #28]
 80073cc:	331c      	adds	r3, #28
 80073ce:	441a      	add	r2, r3
 80073d0:	4499      	add	r9, r3
 80073d2:	441d      	add	r5, r3
 80073d4:	4613      	mov	r3, r2
 80073d6:	e7c1      	b.n	800735c <_dtoa_r+0x84c>
 80073d8:	4603      	mov	r3, r0
 80073da:	e7f6      	b.n	80073ca <_dtoa_r+0x8ba>
 80073dc:	f1b8 0f00 	cmp.w	r8, #0
 80073e0:	dc36      	bgt.n	8007450 <_dtoa_r+0x940>
 80073e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	dd33      	ble.n	8007450 <_dtoa_r+0x940>
 80073e8:	f8cd 8010 	str.w	r8, [sp, #16]
 80073ec:	9b04      	ldr	r3, [sp, #16]
 80073ee:	b963      	cbnz	r3, 800740a <_dtoa_r+0x8fa>
 80073f0:	4631      	mov	r1, r6
 80073f2:	2205      	movs	r2, #5
 80073f4:	4620      	mov	r0, r4
 80073f6:	f000 fcf9 	bl	8007dec <__multadd>
 80073fa:	4601      	mov	r1, r0
 80073fc:	4606      	mov	r6, r0
 80073fe:	4658      	mov	r0, fp
 8007400:	f000 fefc 	bl	80081fc <__mcmp>
 8007404:	2800      	cmp	r0, #0
 8007406:	f73f add3 	bgt.w	8006fb0 <_dtoa_r+0x4a0>
 800740a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800740c:	9d06      	ldr	r5, [sp, #24]
 800740e:	ea6f 0a03 	mvn.w	sl, r3
 8007412:	f04f 0900 	mov.w	r9, #0
 8007416:	4631      	mov	r1, r6
 8007418:	4620      	mov	r0, r4
 800741a:	f000 fcd0 	bl	8007dbe <_Bfree>
 800741e:	2f00      	cmp	r7, #0
 8007420:	f43f aebd 	beq.w	800719e <_dtoa_r+0x68e>
 8007424:	f1b9 0f00 	cmp.w	r9, #0
 8007428:	d005      	beq.n	8007436 <_dtoa_r+0x926>
 800742a:	45b9      	cmp	r9, r7
 800742c:	d003      	beq.n	8007436 <_dtoa_r+0x926>
 800742e:	4649      	mov	r1, r9
 8007430:	4620      	mov	r0, r4
 8007432:	f000 fcc4 	bl	8007dbe <_Bfree>
 8007436:	4639      	mov	r1, r7
 8007438:	4620      	mov	r0, r4
 800743a:	f000 fcc0 	bl	8007dbe <_Bfree>
 800743e:	e6ae      	b.n	800719e <_dtoa_r+0x68e>
 8007440:	2600      	movs	r6, #0
 8007442:	4637      	mov	r7, r6
 8007444:	e7e1      	b.n	800740a <_dtoa_r+0x8fa>
 8007446:	46ba      	mov	sl, r7
 8007448:	4637      	mov	r7, r6
 800744a:	e5b1      	b.n	8006fb0 <_dtoa_r+0x4a0>
 800744c:	40240000 	.word	0x40240000
 8007450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007452:	f8cd 8010 	str.w	r8, [sp, #16]
 8007456:	2b00      	cmp	r3, #0
 8007458:	f000 80f3 	beq.w	8007642 <_dtoa_r+0xb32>
 800745c:	2d00      	cmp	r5, #0
 800745e:	dd05      	ble.n	800746c <_dtoa_r+0x95c>
 8007460:	4639      	mov	r1, r7
 8007462:	462a      	mov	r2, r5
 8007464:	4620      	mov	r0, r4
 8007466:	f000 fe75 	bl	8008154 <__lshift>
 800746a:	4607      	mov	r7, r0
 800746c:	9b08      	ldr	r3, [sp, #32]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d04c      	beq.n	800750c <_dtoa_r+0x9fc>
 8007472:	6879      	ldr	r1, [r7, #4]
 8007474:	4620      	mov	r0, r4
 8007476:	f000 fc6e 	bl	8007d56 <_Balloc>
 800747a:	4605      	mov	r5, r0
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	f107 010c 	add.w	r1, r7, #12
 8007482:	3202      	adds	r2, #2
 8007484:	0092      	lsls	r2, r2, #2
 8007486:	300c      	adds	r0, #12
 8007488:	f000 fc5a 	bl	8007d40 <memcpy>
 800748c:	2201      	movs	r2, #1
 800748e:	4629      	mov	r1, r5
 8007490:	4620      	mov	r0, r4
 8007492:	f000 fe5f 	bl	8008154 <__lshift>
 8007496:	46b9      	mov	r9, r7
 8007498:	4607      	mov	r7, r0
 800749a:	9b06      	ldr	r3, [sp, #24]
 800749c:	9307      	str	r3, [sp, #28]
 800749e:	9b02      	ldr	r3, [sp, #8]
 80074a0:	f003 0301 	and.w	r3, r3, #1
 80074a4:	9308      	str	r3, [sp, #32]
 80074a6:	4631      	mov	r1, r6
 80074a8:	4658      	mov	r0, fp
 80074aa:	f7ff faa1 	bl	80069f0 <quorem>
 80074ae:	4649      	mov	r1, r9
 80074b0:	4605      	mov	r5, r0
 80074b2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80074b6:	4658      	mov	r0, fp
 80074b8:	f000 fea0 	bl	80081fc <__mcmp>
 80074bc:	463a      	mov	r2, r7
 80074be:	9002      	str	r0, [sp, #8]
 80074c0:	4631      	mov	r1, r6
 80074c2:	4620      	mov	r0, r4
 80074c4:	f000 feb4 	bl	8008230 <__mdiff>
 80074c8:	68c3      	ldr	r3, [r0, #12]
 80074ca:	4602      	mov	r2, r0
 80074cc:	bb03      	cbnz	r3, 8007510 <_dtoa_r+0xa00>
 80074ce:	4601      	mov	r1, r0
 80074d0:	9009      	str	r0, [sp, #36]	; 0x24
 80074d2:	4658      	mov	r0, fp
 80074d4:	f000 fe92 	bl	80081fc <__mcmp>
 80074d8:	4603      	mov	r3, r0
 80074da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074dc:	4611      	mov	r1, r2
 80074de:	4620      	mov	r0, r4
 80074e0:	9309      	str	r3, [sp, #36]	; 0x24
 80074e2:	f000 fc6c 	bl	8007dbe <_Bfree>
 80074e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074e8:	b9a3      	cbnz	r3, 8007514 <_dtoa_r+0xa04>
 80074ea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80074ec:	b992      	cbnz	r2, 8007514 <_dtoa_r+0xa04>
 80074ee:	9a08      	ldr	r2, [sp, #32]
 80074f0:	b982      	cbnz	r2, 8007514 <_dtoa_r+0xa04>
 80074f2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80074f6:	d029      	beq.n	800754c <_dtoa_r+0xa3c>
 80074f8:	9b02      	ldr	r3, [sp, #8]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	dd01      	ble.n	8007502 <_dtoa_r+0x9f2>
 80074fe:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007502:	9b07      	ldr	r3, [sp, #28]
 8007504:	1c5d      	adds	r5, r3, #1
 8007506:	f883 8000 	strb.w	r8, [r3]
 800750a:	e784      	b.n	8007416 <_dtoa_r+0x906>
 800750c:	4638      	mov	r0, r7
 800750e:	e7c2      	b.n	8007496 <_dtoa_r+0x986>
 8007510:	2301      	movs	r3, #1
 8007512:	e7e3      	b.n	80074dc <_dtoa_r+0x9cc>
 8007514:	9a02      	ldr	r2, [sp, #8]
 8007516:	2a00      	cmp	r2, #0
 8007518:	db04      	blt.n	8007524 <_dtoa_r+0xa14>
 800751a:	d123      	bne.n	8007564 <_dtoa_r+0xa54>
 800751c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800751e:	bb0a      	cbnz	r2, 8007564 <_dtoa_r+0xa54>
 8007520:	9a08      	ldr	r2, [sp, #32]
 8007522:	b9fa      	cbnz	r2, 8007564 <_dtoa_r+0xa54>
 8007524:	2b00      	cmp	r3, #0
 8007526:	ddec      	ble.n	8007502 <_dtoa_r+0x9f2>
 8007528:	4659      	mov	r1, fp
 800752a:	2201      	movs	r2, #1
 800752c:	4620      	mov	r0, r4
 800752e:	f000 fe11 	bl	8008154 <__lshift>
 8007532:	4631      	mov	r1, r6
 8007534:	4683      	mov	fp, r0
 8007536:	f000 fe61 	bl	80081fc <__mcmp>
 800753a:	2800      	cmp	r0, #0
 800753c:	dc03      	bgt.n	8007546 <_dtoa_r+0xa36>
 800753e:	d1e0      	bne.n	8007502 <_dtoa_r+0x9f2>
 8007540:	f018 0f01 	tst.w	r8, #1
 8007544:	d0dd      	beq.n	8007502 <_dtoa_r+0x9f2>
 8007546:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800754a:	d1d8      	bne.n	80074fe <_dtoa_r+0x9ee>
 800754c:	9b07      	ldr	r3, [sp, #28]
 800754e:	9a07      	ldr	r2, [sp, #28]
 8007550:	1c5d      	adds	r5, r3, #1
 8007552:	2339      	movs	r3, #57	; 0x39
 8007554:	7013      	strb	r3, [r2, #0]
 8007556:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800755a:	1e6a      	subs	r2, r5, #1
 800755c:	2b39      	cmp	r3, #57	; 0x39
 800755e:	d04d      	beq.n	80075fc <_dtoa_r+0xaec>
 8007560:	3301      	adds	r3, #1
 8007562:	e052      	b.n	800760a <_dtoa_r+0xafa>
 8007564:	9a07      	ldr	r2, [sp, #28]
 8007566:	2b00      	cmp	r3, #0
 8007568:	f102 0501 	add.w	r5, r2, #1
 800756c:	dd06      	ble.n	800757c <_dtoa_r+0xa6c>
 800756e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007572:	d0eb      	beq.n	800754c <_dtoa_r+0xa3c>
 8007574:	f108 0801 	add.w	r8, r8, #1
 8007578:	9b07      	ldr	r3, [sp, #28]
 800757a:	e7c4      	b.n	8007506 <_dtoa_r+0x9f6>
 800757c:	9b06      	ldr	r3, [sp, #24]
 800757e:	9a04      	ldr	r2, [sp, #16]
 8007580:	1aeb      	subs	r3, r5, r3
 8007582:	4293      	cmp	r3, r2
 8007584:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007588:	d021      	beq.n	80075ce <_dtoa_r+0xabe>
 800758a:	4659      	mov	r1, fp
 800758c:	2300      	movs	r3, #0
 800758e:	220a      	movs	r2, #10
 8007590:	4620      	mov	r0, r4
 8007592:	f000 fc2b 	bl	8007dec <__multadd>
 8007596:	45b9      	cmp	r9, r7
 8007598:	4683      	mov	fp, r0
 800759a:	f04f 0300 	mov.w	r3, #0
 800759e:	f04f 020a 	mov.w	r2, #10
 80075a2:	4649      	mov	r1, r9
 80075a4:	4620      	mov	r0, r4
 80075a6:	d105      	bne.n	80075b4 <_dtoa_r+0xaa4>
 80075a8:	f000 fc20 	bl	8007dec <__multadd>
 80075ac:	4681      	mov	r9, r0
 80075ae:	4607      	mov	r7, r0
 80075b0:	9507      	str	r5, [sp, #28]
 80075b2:	e778      	b.n	80074a6 <_dtoa_r+0x996>
 80075b4:	f000 fc1a 	bl	8007dec <__multadd>
 80075b8:	4639      	mov	r1, r7
 80075ba:	4681      	mov	r9, r0
 80075bc:	2300      	movs	r3, #0
 80075be:	220a      	movs	r2, #10
 80075c0:	4620      	mov	r0, r4
 80075c2:	f000 fc13 	bl	8007dec <__multadd>
 80075c6:	4607      	mov	r7, r0
 80075c8:	e7f2      	b.n	80075b0 <_dtoa_r+0xaa0>
 80075ca:	f04f 0900 	mov.w	r9, #0
 80075ce:	4659      	mov	r1, fp
 80075d0:	2201      	movs	r2, #1
 80075d2:	4620      	mov	r0, r4
 80075d4:	f000 fdbe 	bl	8008154 <__lshift>
 80075d8:	4631      	mov	r1, r6
 80075da:	4683      	mov	fp, r0
 80075dc:	f000 fe0e 	bl	80081fc <__mcmp>
 80075e0:	2800      	cmp	r0, #0
 80075e2:	dcb8      	bgt.n	8007556 <_dtoa_r+0xa46>
 80075e4:	d102      	bne.n	80075ec <_dtoa_r+0xadc>
 80075e6:	f018 0f01 	tst.w	r8, #1
 80075ea:	d1b4      	bne.n	8007556 <_dtoa_r+0xa46>
 80075ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80075f0:	1e6a      	subs	r2, r5, #1
 80075f2:	2b30      	cmp	r3, #48	; 0x30
 80075f4:	f47f af0f 	bne.w	8007416 <_dtoa_r+0x906>
 80075f8:	4615      	mov	r5, r2
 80075fa:	e7f7      	b.n	80075ec <_dtoa_r+0xadc>
 80075fc:	9b06      	ldr	r3, [sp, #24]
 80075fe:	4293      	cmp	r3, r2
 8007600:	d105      	bne.n	800760e <_dtoa_r+0xafe>
 8007602:	2331      	movs	r3, #49	; 0x31
 8007604:	9a06      	ldr	r2, [sp, #24]
 8007606:	f10a 0a01 	add.w	sl, sl, #1
 800760a:	7013      	strb	r3, [r2, #0]
 800760c:	e703      	b.n	8007416 <_dtoa_r+0x906>
 800760e:	4615      	mov	r5, r2
 8007610:	e7a1      	b.n	8007556 <_dtoa_r+0xa46>
 8007612:	4b17      	ldr	r3, [pc, #92]	; (8007670 <_dtoa_r+0xb60>)
 8007614:	f7ff bae1 	b.w	8006bda <_dtoa_r+0xca>
 8007618:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800761a:	2b00      	cmp	r3, #0
 800761c:	f47f aabb 	bne.w	8006b96 <_dtoa_r+0x86>
 8007620:	4b14      	ldr	r3, [pc, #80]	; (8007674 <_dtoa_r+0xb64>)
 8007622:	f7ff bada 	b.w	8006bda <_dtoa_r+0xca>
 8007626:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007628:	2b01      	cmp	r3, #1
 800762a:	f77f ae3f 	ble.w	80072ac <_dtoa_r+0x79c>
 800762e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007630:	9308      	str	r3, [sp, #32]
 8007632:	e653      	b.n	80072dc <_dtoa_r+0x7cc>
 8007634:	9b04      	ldr	r3, [sp, #16]
 8007636:	2b00      	cmp	r3, #0
 8007638:	dc03      	bgt.n	8007642 <_dtoa_r+0xb32>
 800763a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800763c:	2b02      	cmp	r3, #2
 800763e:	f73f aed5 	bgt.w	80073ec <_dtoa_r+0x8dc>
 8007642:	9d06      	ldr	r5, [sp, #24]
 8007644:	4631      	mov	r1, r6
 8007646:	4658      	mov	r0, fp
 8007648:	f7ff f9d2 	bl	80069f0 <quorem>
 800764c:	9b06      	ldr	r3, [sp, #24]
 800764e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007652:	f805 8b01 	strb.w	r8, [r5], #1
 8007656:	9a04      	ldr	r2, [sp, #16]
 8007658:	1aeb      	subs	r3, r5, r3
 800765a:	429a      	cmp	r2, r3
 800765c:	ddb5      	ble.n	80075ca <_dtoa_r+0xaba>
 800765e:	4659      	mov	r1, fp
 8007660:	2300      	movs	r3, #0
 8007662:	220a      	movs	r2, #10
 8007664:	4620      	mov	r0, r4
 8007666:	f000 fbc1 	bl	8007dec <__multadd>
 800766a:	4683      	mov	fp, r0
 800766c:	e7ea      	b.n	8007644 <_dtoa_r+0xb34>
 800766e:	bf00      	nop
 8007670:	08008c9c 	.word	0x08008c9c
 8007674:	08008d10 	.word	0x08008d10

08007678 <rshift>:
 8007678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800767a:	6906      	ldr	r6, [r0, #16]
 800767c:	114b      	asrs	r3, r1, #5
 800767e:	429e      	cmp	r6, r3
 8007680:	f100 0414 	add.w	r4, r0, #20
 8007684:	dd31      	ble.n	80076ea <rshift+0x72>
 8007686:	f011 011f 	ands.w	r1, r1, #31
 800768a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800768e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007692:	d108      	bne.n	80076a6 <rshift+0x2e>
 8007694:	4621      	mov	r1, r4
 8007696:	42b2      	cmp	r2, r6
 8007698:	460b      	mov	r3, r1
 800769a:	d211      	bcs.n	80076c0 <rshift+0x48>
 800769c:	f852 3b04 	ldr.w	r3, [r2], #4
 80076a0:	f841 3b04 	str.w	r3, [r1], #4
 80076a4:	e7f7      	b.n	8007696 <rshift+0x1e>
 80076a6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80076aa:	4623      	mov	r3, r4
 80076ac:	f1c1 0c20 	rsb	ip, r1, #32
 80076b0:	40cd      	lsrs	r5, r1
 80076b2:	3204      	adds	r2, #4
 80076b4:	42b2      	cmp	r2, r6
 80076b6:	4617      	mov	r7, r2
 80076b8:	d30d      	bcc.n	80076d6 <rshift+0x5e>
 80076ba:	601d      	str	r5, [r3, #0]
 80076bc:	b105      	cbz	r5, 80076c0 <rshift+0x48>
 80076be:	3304      	adds	r3, #4
 80076c0:	42a3      	cmp	r3, r4
 80076c2:	eba3 0204 	sub.w	r2, r3, r4
 80076c6:	bf08      	it	eq
 80076c8:	2300      	moveq	r3, #0
 80076ca:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80076ce:	6102      	str	r2, [r0, #16]
 80076d0:	bf08      	it	eq
 80076d2:	6143      	streq	r3, [r0, #20]
 80076d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076d6:	683f      	ldr	r7, [r7, #0]
 80076d8:	fa07 f70c 	lsl.w	r7, r7, ip
 80076dc:	433d      	orrs	r5, r7
 80076de:	f843 5b04 	str.w	r5, [r3], #4
 80076e2:	f852 5b04 	ldr.w	r5, [r2], #4
 80076e6:	40cd      	lsrs	r5, r1
 80076e8:	e7e4      	b.n	80076b4 <rshift+0x3c>
 80076ea:	4623      	mov	r3, r4
 80076ec:	e7e8      	b.n	80076c0 <rshift+0x48>

080076ee <__hexdig_fun>:
 80076ee:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80076f2:	2b09      	cmp	r3, #9
 80076f4:	d802      	bhi.n	80076fc <__hexdig_fun+0xe>
 80076f6:	3820      	subs	r0, #32
 80076f8:	b2c0      	uxtb	r0, r0
 80076fa:	4770      	bx	lr
 80076fc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007700:	2b05      	cmp	r3, #5
 8007702:	d801      	bhi.n	8007708 <__hexdig_fun+0x1a>
 8007704:	3847      	subs	r0, #71	; 0x47
 8007706:	e7f7      	b.n	80076f8 <__hexdig_fun+0xa>
 8007708:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800770c:	2b05      	cmp	r3, #5
 800770e:	d801      	bhi.n	8007714 <__hexdig_fun+0x26>
 8007710:	3827      	subs	r0, #39	; 0x27
 8007712:	e7f1      	b.n	80076f8 <__hexdig_fun+0xa>
 8007714:	2000      	movs	r0, #0
 8007716:	4770      	bx	lr

08007718 <__gethex>:
 8007718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800771c:	b08b      	sub	sp, #44	; 0x2c
 800771e:	9002      	str	r0, [sp, #8]
 8007720:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007722:	468a      	mov	sl, r1
 8007724:	4690      	mov	r8, r2
 8007726:	9306      	str	r3, [sp, #24]
 8007728:	f000 fad1 	bl	8007cce <__localeconv_l>
 800772c:	6803      	ldr	r3, [r0, #0]
 800772e:	f04f 0b00 	mov.w	fp, #0
 8007732:	4618      	mov	r0, r3
 8007734:	9303      	str	r3, [sp, #12]
 8007736:	f7f8 fd15 	bl	8000164 <strlen>
 800773a:	9b03      	ldr	r3, [sp, #12]
 800773c:	9001      	str	r0, [sp, #4]
 800773e:	4403      	add	r3, r0
 8007740:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007744:	9307      	str	r3, [sp, #28]
 8007746:	f8da 3000 	ldr.w	r3, [sl]
 800774a:	3302      	adds	r3, #2
 800774c:	461f      	mov	r7, r3
 800774e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007752:	2830      	cmp	r0, #48	; 0x30
 8007754:	d06c      	beq.n	8007830 <__gethex+0x118>
 8007756:	f7ff ffca 	bl	80076ee <__hexdig_fun>
 800775a:	4604      	mov	r4, r0
 800775c:	2800      	cmp	r0, #0
 800775e:	d16a      	bne.n	8007836 <__gethex+0x11e>
 8007760:	9a01      	ldr	r2, [sp, #4]
 8007762:	9903      	ldr	r1, [sp, #12]
 8007764:	4638      	mov	r0, r7
 8007766:	f001 f905 	bl	8008974 <strncmp>
 800776a:	2800      	cmp	r0, #0
 800776c:	d166      	bne.n	800783c <__gethex+0x124>
 800776e:	9b01      	ldr	r3, [sp, #4]
 8007770:	5cf8      	ldrb	r0, [r7, r3]
 8007772:	18fe      	adds	r6, r7, r3
 8007774:	f7ff ffbb 	bl	80076ee <__hexdig_fun>
 8007778:	2800      	cmp	r0, #0
 800777a:	d062      	beq.n	8007842 <__gethex+0x12a>
 800777c:	4633      	mov	r3, r6
 800777e:	7818      	ldrb	r0, [r3, #0]
 8007780:	461f      	mov	r7, r3
 8007782:	2830      	cmp	r0, #48	; 0x30
 8007784:	f103 0301 	add.w	r3, r3, #1
 8007788:	d0f9      	beq.n	800777e <__gethex+0x66>
 800778a:	f7ff ffb0 	bl	80076ee <__hexdig_fun>
 800778e:	fab0 f580 	clz	r5, r0
 8007792:	4634      	mov	r4, r6
 8007794:	f04f 0b01 	mov.w	fp, #1
 8007798:	096d      	lsrs	r5, r5, #5
 800779a:	463a      	mov	r2, r7
 800779c:	4616      	mov	r6, r2
 800779e:	7830      	ldrb	r0, [r6, #0]
 80077a0:	3201      	adds	r2, #1
 80077a2:	f7ff ffa4 	bl	80076ee <__hexdig_fun>
 80077a6:	2800      	cmp	r0, #0
 80077a8:	d1f8      	bne.n	800779c <__gethex+0x84>
 80077aa:	9a01      	ldr	r2, [sp, #4]
 80077ac:	9903      	ldr	r1, [sp, #12]
 80077ae:	4630      	mov	r0, r6
 80077b0:	f001 f8e0 	bl	8008974 <strncmp>
 80077b4:	b950      	cbnz	r0, 80077cc <__gethex+0xb4>
 80077b6:	b954      	cbnz	r4, 80077ce <__gethex+0xb6>
 80077b8:	9b01      	ldr	r3, [sp, #4]
 80077ba:	18f4      	adds	r4, r6, r3
 80077bc:	4622      	mov	r2, r4
 80077be:	4616      	mov	r6, r2
 80077c0:	7830      	ldrb	r0, [r6, #0]
 80077c2:	3201      	adds	r2, #1
 80077c4:	f7ff ff93 	bl	80076ee <__hexdig_fun>
 80077c8:	2800      	cmp	r0, #0
 80077ca:	d1f8      	bne.n	80077be <__gethex+0xa6>
 80077cc:	b10c      	cbz	r4, 80077d2 <__gethex+0xba>
 80077ce:	1ba4      	subs	r4, r4, r6
 80077d0:	00a4      	lsls	r4, r4, #2
 80077d2:	7833      	ldrb	r3, [r6, #0]
 80077d4:	2b50      	cmp	r3, #80	; 0x50
 80077d6:	d001      	beq.n	80077dc <__gethex+0xc4>
 80077d8:	2b70      	cmp	r3, #112	; 0x70
 80077da:	d140      	bne.n	800785e <__gethex+0x146>
 80077dc:	7873      	ldrb	r3, [r6, #1]
 80077de:	2b2b      	cmp	r3, #43	; 0x2b
 80077e0:	d031      	beq.n	8007846 <__gethex+0x12e>
 80077e2:	2b2d      	cmp	r3, #45	; 0x2d
 80077e4:	d033      	beq.n	800784e <__gethex+0x136>
 80077e6:	f04f 0900 	mov.w	r9, #0
 80077ea:	1c71      	adds	r1, r6, #1
 80077ec:	7808      	ldrb	r0, [r1, #0]
 80077ee:	f7ff ff7e 	bl	80076ee <__hexdig_fun>
 80077f2:	1e43      	subs	r3, r0, #1
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b18      	cmp	r3, #24
 80077f8:	d831      	bhi.n	800785e <__gethex+0x146>
 80077fa:	f1a0 0210 	sub.w	r2, r0, #16
 80077fe:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007802:	f7ff ff74 	bl	80076ee <__hexdig_fun>
 8007806:	1e43      	subs	r3, r0, #1
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b18      	cmp	r3, #24
 800780c:	d922      	bls.n	8007854 <__gethex+0x13c>
 800780e:	f1b9 0f00 	cmp.w	r9, #0
 8007812:	d000      	beq.n	8007816 <__gethex+0xfe>
 8007814:	4252      	negs	r2, r2
 8007816:	4414      	add	r4, r2
 8007818:	f8ca 1000 	str.w	r1, [sl]
 800781c:	b30d      	cbz	r5, 8007862 <__gethex+0x14a>
 800781e:	f1bb 0f00 	cmp.w	fp, #0
 8007822:	bf0c      	ite	eq
 8007824:	2706      	moveq	r7, #6
 8007826:	2700      	movne	r7, #0
 8007828:	4638      	mov	r0, r7
 800782a:	b00b      	add	sp, #44	; 0x2c
 800782c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007830:	f10b 0b01 	add.w	fp, fp, #1
 8007834:	e78a      	b.n	800774c <__gethex+0x34>
 8007836:	2500      	movs	r5, #0
 8007838:	462c      	mov	r4, r5
 800783a:	e7ae      	b.n	800779a <__gethex+0x82>
 800783c:	463e      	mov	r6, r7
 800783e:	2501      	movs	r5, #1
 8007840:	e7c7      	b.n	80077d2 <__gethex+0xba>
 8007842:	4604      	mov	r4, r0
 8007844:	e7fb      	b.n	800783e <__gethex+0x126>
 8007846:	f04f 0900 	mov.w	r9, #0
 800784a:	1cb1      	adds	r1, r6, #2
 800784c:	e7ce      	b.n	80077ec <__gethex+0xd4>
 800784e:	f04f 0901 	mov.w	r9, #1
 8007852:	e7fa      	b.n	800784a <__gethex+0x132>
 8007854:	230a      	movs	r3, #10
 8007856:	fb03 0202 	mla	r2, r3, r2, r0
 800785a:	3a10      	subs	r2, #16
 800785c:	e7cf      	b.n	80077fe <__gethex+0xe6>
 800785e:	4631      	mov	r1, r6
 8007860:	e7da      	b.n	8007818 <__gethex+0x100>
 8007862:	4629      	mov	r1, r5
 8007864:	1bf3      	subs	r3, r6, r7
 8007866:	3b01      	subs	r3, #1
 8007868:	2b07      	cmp	r3, #7
 800786a:	dc49      	bgt.n	8007900 <__gethex+0x1e8>
 800786c:	9802      	ldr	r0, [sp, #8]
 800786e:	f000 fa72 	bl	8007d56 <_Balloc>
 8007872:	f04f 0b00 	mov.w	fp, #0
 8007876:	4605      	mov	r5, r0
 8007878:	46da      	mov	sl, fp
 800787a:	9b01      	ldr	r3, [sp, #4]
 800787c:	f100 0914 	add.w	r9, r0, #20
 8007880:	f1c3 0301 	rsb	r3, r3, #1
 8007884:	f8cd 9010 	str.w	r9, [sp, #16]
 8007888:	9308      	str	r3, [sp, #32]
 800788a:	42b7      	cmp	r7, r6
 800788c:	d33b      	bcc.n	8007906 <__gethex+0x1ee>
 800788e:	9804      	ldr	r0, [sp, #16]
 8007890:	f840 ab04 	str.w	sl, [r0], #4
 8007894:	eba0 0009 	sub.w	r0, r0, r9
 8007898:	1080      	asrs	r0, r0, #2
 800789a:	6128      	str	r0, [r5, #16]
 800789c:	0147      	lsls	r7, r0, #5
 800789e:	4650      	mov	r0, sl
 80078a0:	f000 fb1d 	bl	8007ede <__hi0bits>
 80078a4:	f8d8 6000 	ldr.w	r6, [r8]
 80078a8:	1a3f      	subs	r7, r7, r0
 80078aa:	42b7      	cmp	r7, r6
 80078ac:	dd64      	ble.n	8007978 <__gethex+0x260>
 80078ae:	1bbf      	subs	r7, r7, r6
 80078b0:	4639      	mov	r1, r7
 80078b2:	4628      	mov	r0, r5
 80078b4:	f000 fe27 	bl	8008506 <__any_on>
 80078b8:	4682      	mov	sl, r0
 80078ba:	b178      	cbz	r0, 80078dc <__gethex+0x1c4>
 80078bc:	f04f 0a01 	mov.w	sl, #1
 80078c0:	1e7b      	subs	r3, r7, #1
 80078c2:	1159      	asrs	r1, r3, #5
 80078c4:	f003 021f 	and.w	r2, r3, #31
 80078c8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80078cc:	fa0a f202 	lsl.w	r2, sl, r2
 80078d0:	420a      	tst	r2, r1
 80078d2:	d003      	beq.n	80078dc <__gethex+0x1c4>
 80078d4:	4553      	cmp	r3, sl
 80078d6:	dc46      	bgt.n	8007966 <__gethex+0x24e>
 80078d8:	f04f 0a02 	mov.w	sl, #2
 80078dc:	4639      	mov	r1, r7
 80078de:	4628      	mov	r0, r5
 80078e0:	f7ff feca 	bl	8007678 <rshift>
 80078e4:	443c      	add	r4, r7
 80078e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80078ea:	42a3      	cmp	r3, r4
 80078ec:	da52      	bge.n	8007994 <__gethex+0x27c>
 80078ee:	4629      	mov	r1, r5
 80078f0:	9802      	ldr	r0, [sp, #8]
 80078f2:	f000 fa64 	bl	8007dbe <_Bfree>
 80078f6:	2300      	movs	r3, #0
 80078f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80078fa:	27a3      	movs	r7, #163	; 0xa3
 80078fc:	6013      	str	r3, [r2, #0]
 80078fe:	e793      	b.n	8007828 <__gethex+0x110>
 8007900:	3101      	adds	r1, #1
 8007902:	105b      	asrs	r3, r3, #1
 8007904:	e7b0      	b.n	8007868 <__gethex+0x150>
 8007906:	1e73      	subs	r3, r6, #1
 8007908:	9305      	str	r3, [sp, #20]
 800790a:	9a07      	ldr	r2, [sp, #28]
 800790c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007910:	4293      	cmp	r3, r2
 8007912:	d018      	beq.n	8007946 <__gethex+0x22e>
 8007914:	f1bb 0f20 	cmp.w	fp, #32
 8007918:	d107      	bne.n	800792a <__gethex+0x212>
 800791a:	9b04      	ldr	r3, [sp, #16]
 800791c:	f8c3 a000 	str.w	sl, [r3]
 8007920:	f04f 0a00 	mov.w	sl, #0
 8007924:	46d3      	mov	fp, sl
 8007926:	3304      	adds	r3, #4
 8007928:	9304      	str	r3, [sp, #16]
 800792a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800792e:	f7ff fede 	bl	80076ee <__hexdig_fun>
 8007932:	f000 000f 	and.w	r0, r0, #15
 8007936:	fa00 f00b 	lsl.w	r0, r0, fp
 800793a:	ea4a 0a00 	orr.w	sl, sl, r0
 800793e:	f10b 0b04 	add.w	fp, fp, #4
 8007942:	9b05      	ldr	r3, [sp, #20]
 8007944:	e00d      	b.n	8007962 <__gethex+0x24a>
 8007946:	9b05      	ldr	r3, [sp, #20]
 8007948:	9a08      	ldr	r2, [sp, #32]
 800794a:	4413      	add	r3, r2
 800794c:	42bb      	cmp	r3, r7
 800794e:	d3e1      	bcc.n	8007914 <__gethex+0x1fc>
 8007950:	4618      	mov	r0, r3
 8007952:	9a01      	ldr	r2, [sp, #4]
 8007954:	9903      	ldr	r1, [sp, #12]
 8007956:	9309      	str	r3, [sp, #36]	; 0x24
 8007958:	f001 f80c 	bl	8008974 <strncmp>
 800795c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800795e:	2800      	cmp	r0, #0
 8007960:	d1d8      	bne.n	8007914 <__gethex+0x1fc>
 8007962:	461e      	mov	r6, r3
 8007964:	e791      	b.n	800788a <__gethex+0x172>
 8007966:	1eb9      	subs	r1, r7, #2
 8007968:	4628      	mov	r0, r5
 800796a:	f000 fdcc 	bl	8008506 <__any_on>
 800796e:	2800      	cmp	r0, #0
 8007970:	d0b2      	beq.n	80078d8 <__gethex+0x1c0>
 8007972:	f04f 0a03 	mov.w	sl, #3
 8007976:	e7b1      	b.n	80078dc <__gethex+0x1c4>
 8007978:	da09      	bge.n	800798e <__gethex+0x276>
 800797a:	1bf7      	subs	r7, r6, r7
 800797c:	4629      	mov	r1, r5
 800797e:	463a      	mov	r2, r7
 8007980:	9802      	ldr	r0, [sp, #8]
 8007982:	f000 fbe7 	bl	8008154 <__lshift>
 8007986:	4605      	mov	r5, r0
 8007988:	1be4      	subs	r4, r4, r7
 800798a:	f100 0914 	add.w	r9, r0, #20
 800798e:	f04f 0a00 	mov.w	sl, #0
 8007992:	e7a8      	b.n	80078e6 <__gethex+0x1ce>
 8007994:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007998:	42a0      	cmp	r0, r4
 800799a:	dd6b      	ble.n	8007a74 <__gethex+0x35c>
 800799c:	1b04      	subs	r4, r0, r4
 800799e:	42a6      	cmp	r6, r4
 80079a0:	dc2e      	bgt.n	8007a00 <__gethex+0x2e8>
 80079a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d022      	beq.n	80079f0 <__gethex+0x2d8>
 80079aa:	2b03      	cmp	r3, #3
 80079ac:	d024      	beq.n	80079f8 <__gethex+0x2e0>
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d115      	bne.n	80079de <__gethex+0x2c6>
 80079b2:	42a6      	cmp	r6, r4
 80079b4:	d113      	bne.n	80079de <__gethex+0x2c6>
 80079b6:	2e01      	cmp	r6, #1
 80079b8:	dc0b      	bgt.n	80079d2 <__gethex+0x2ba>
 80079ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80079be:	9a06      	ldr	r2, [sp, #24]
 80079c0:	2762      	movs	r7, #98	; 0x62
 80079c2:	6013      	str	r3, [r2, #0]
 80079c4:	2301      	movs	r3, #1
 80079c6:	612b      	str	r3, [r5, #16]
 80079c8:	f8c9 3000 	str.w	r3, [r9]
 80079cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80079ce:	601d      	str	r5, [r3, #0]
 80079d0:	e72a      	b.n	8007828 <__gethex+0x110>
 80079d2:	1e71      	subs	r1, r6, #1
 80079d4:	4628      	mov	r0, r5
 80079d6:	f000 fd96 	bl	8008506 <__any_on>
 80079da:	2800      	cmp	r0, #0
 80079dc:	d1ed      	bne.n	80079ba <__gethex+0x2a2>
 80079de:	4629      	mov	r1, r5
 80079e0:	9802      	ldr	r0, [sp, #8]
 80079e2:	f000 f9ec 	bl	8007dbe <_Bfree>
 80079e6:	2300      	movs	r3, #0
 80079e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80079ea:	2750      	movs	r7, #80	; 0x50
 80079ec:	6013      	str	r3, [r2, #0]
 80079ee:	e71b      	b.n	8007828 <__gethex+0x110>
 80079f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d0e1      	beq.n	80079ba <__gethex+0x2a2>
 80079f6:	e7f2      	b.n	80079de <__gethex+0x2c6>
 80079f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1dd      	bne.n	80079ba <__gethex+0x2a2>
 80079fe:	e7ee      	b.n	80079de <__gethex+0x2c6>
 8007a00:	1e67      	subs	r7, r4, #1
 8007a02:	f1ba 0f00 	cmp.w	sl, #0
 8007a06:	d132      	bne.n	8007a6e <__gethex+0x356>
 8007a08:	b127      	cbz	r7, 8007a14 <__gethex+0x2fc>
 8007a0a:	4639      	mov	r1, r7
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	f000 fd7a 	bl	8008506 <__any_on>
 8007a12:	4682      	mov	sl, r0
 8007a14:	2301      	movs	r3, #1
 8007a16:	117a      	asrs	r2, r7, #5
 8007a18:	f007 071f 	and.w	r7, r7, #31
 8007a1c:	fa03 f707 	lsl.w	r7, r3, r7
 8007a20:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8007a24:	4621      	mov	r1, r4
 8007a26:	421f      	tst	r7, r3
 8007a28:	f04f 0702 	mov.w	r7, #2
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	bf18      	it	ne
 8007a30:	f04a 0a02 	orrne.w	sl, sl, #2
 8007a34:	1b36      	subs	r6, r6, r4
 8007a36:	f7ff fe1f 	bl	8007678 <rshift>
 8007a3a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8007a3e:	f1ba 0f00 	cmp.w	sl, #0
 8007a42:	d048      	beq.n	8007ad6 <__gethex+0x3be>
 8007a44:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d015      	beq.n	8007a78 <__gethex+0x360>
 8007a4c:	2b03      	cmp	r3, #3
 8007a4e:	d017      	beq.n	8007a80 <__gethex+0x368>
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d109      	bne.n	8007a68 <__gethex+0x350>
 8007a54:	f01a 0f02 	tst.w	sl, #2
 8007a58:	d006      	beq.n	8007a68 <__gethex+0x350>
 8007a5a:	f8d9 3000 	ldr.w	r3, [r9]
 8007a5e:	ea4a 0a03 	orr.w	sl, sl, r3
 8007a62:	f01a 0f01 	tst.w	sl, #1
 8007a66:	d10e      	bne.n	8007a86 <__gethex+0x36e>
 8007a68:	f047 0710 	orr.w	r7, r7, #16
 8007a6c:	e033      	b.n	8007ad6 <__gethex+0x3be>
 8007a6e:	f04f 0a01 	mov.w	sl, #1
 8007a72:	e7cf      	b.n	8007a14 <__gethex+0x2fc>
 8007a74:	2701      	movs	r7, #1
 8007a76:	e7e2      	b.n	8007a3e <__gethex+0x326>
 8007a78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a7a:	f1c3 0301 	rsb	r3, r3, #1
 8007a7e:	9315      	str	r3, [sp, #84]	; 0x54
 8007a80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d0f0      	beq.n	8007a68 <__gethex+0x350>
 8007a86:	f04f 0c00 	mov.w	ip, #0
 8007a8a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8007a8e:	f105 0314 	add.w	r3, r5, #20
 8007a92:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8007a96:	eb03 010a 	add.w	r1, r3, sl
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007aa0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007aa4:	d01c      	beq.n	8007ae0 <__gethex+0x3c8>
 8007aa6:	3201      	adds	r2, #1
 8007aa8:	6002      	str	r2, [r0, #0]
 8007aaa:	2f02      	cmp	r7, #2
 8007aac:	f105 0314 	add.w	r3, r5, #20
 8007ab0:	d138      	bne.n	8007b24 <__gethex+0x40c>
 8007ab2:	f8d8 2000 	ldr.w	r2, [r8]
 8007ab6:	3a01      	subs	r2, #1
 8007ab8:	42b2      	cmp	r2, r6
 8007aba:	d10a      	bne.n	8007ad2 <__gethex+0x3ba>
 8007abc:	2201      	movs	r2, #1
 8007abe:	1171      	asrs	r1, r6, #5
 8007ac0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007ac4:	f006 061f 	and.w	r6, r6, #31
 8007ac8:	fa02 f606 	lsl.w	r6, r2, r6
 8007acc:	421e      	tst	r6, r3
 8007ace:	bf18      	it	ne
 8007ad0:	4617      	movne	r7, r2
 8007ad2:	f047 0720 	orr.w	r7, r7, #32
 8007ad6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007ad8:	601d      	str	r5, [r3, #0]
 8007ada:	9b06      	ldr	r3, [sp, #24]
 8007adc:	601c      	str	r4, [r3, #0]
 8007ade:	e6a3      	b.n	8007828 <__gethex+0x110>
 8007ae0:	4299      	cmp	r1, r3
 8007ae2:	f843 cc04 	str.w	ip, [r3, #-4]
 8007ae6:	d8d8      	bhi.n	8007a9a <__gethex+0x382>
 8007ae8:	68ab      	ldr	r3, [r5, #8]
 8007aea:	4599      	cmp	r9, r3
 8007aec:	db12      	blt.n	8007b14 <__gethex+0x3fc>
 8007aee:	6869      	ldr	r1, [r5, #4]
 8007af0:	9802      	ldr	r0, [sp, #8]
 8007af2:	3101      	adds	r1, #1
 8007af4:	f000 f92f 	bl	8007d56 <_Balloc>
 8007af8:	4683      	mov	fp, r0
 8007afa:	692a      	ldr	r2, [r5, #16]
 8007afc:	f105 010c 	add.w	r1, r5, #12
 8007b00:	3202      	adds	r2, #2
 8007b02:	0092      	lsls	r2, r2, #2
 8007b04:	300c      	adds	r0, #12
 8007b06:	f000 f91b 	bl	8007d40 <memcpy>
 8007b0a:	4629      	mov	r1, r5
 8007b0c:	9802      	ldr	r0, [sp, #8]
 8007b0e:	f000 f956 	bl	8007dbe <_Bfree>
 8007b12:	465d      	mov	r5, fp
 8007b14:	692b      	ldr	r3, [r5, #16]
 8007b16:	1c5a      	adds	r2, r3, #1
 8007b18:	612a      	str	r2, [r5, #16]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007b20:	615a      	str	r2, [r3, #20]
 8007b22:	e7c2      	b.n	8007aaa <__gethex+0x392>
 8007b24:	692a      	ldr	r2, [r5, #16]
 8007b26:	454a      	cmp	r2, r9
 8007b28:	dd0b      	ble.n	8007b42 <__gethex+0x42a>
 8007b2a:	2101      	movs	r1, #1
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	f7ff fda3 	bl	8007678 <rshift>
 8007b32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007b36:	3401      	adds	r4, #1
 8007b38:	42a3      	cmp	r3, r4
 8007b3a:	f6ff aed8 	blt.w	80078ee <__gethex+0x1d6>
 8007b3e:	2701      	movs	r7, #1
 8007b40:	e7c7      	b.n	8007ad2 <__gethex+0x3ba>
 8007b42:	f016 061f 	ands.w	r6, r6, #31
 8007b46:	d0fa      	beq.n	8007b3e <__gethex+0x426>
 8007b48:	449a      	add	sl, r3
 8007b4a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007b4e:	f000 f9c6 	bl	8007ede <__hi0bits>
 8007b52:	f1c6 0620 	rsb	r6, r6, #32
 8007b56:	42b0      	cmp	r0, r6
 8007b58:	dbe7      	blt.n	8007b2a <__gethex+0x412>
 8007b5a:	e7f0      	b.n	8007b3e <__gethex+0x426>

08007b5c <L_shift>:
 8007b5c:	f1c2 0208 	rsb	r2, r2, #8
 8007b60:	0092      	lsls	r2, r2, #2
 8007b62:	b570      	push	{r4, r5, r6, lr}
 8007b64:	f1c2 0620 	rsb	r6, r2, #32
 8007b68:	6843      	ldr	r3, [r0, #4]
 8007b6a:	6804      	ldr	r4, [r0, #0]
 8007b6c:	fa03 f506 	lsl.w	r5, r3, r6
 8007b70:	432c      	orrs	r4, r5
 8007b72:	40d3      	lsrs	r3, r2
 8007b74:	6004      	str	r4, [r0, #0]
 8007b76:	f840 3f04 	str.w	r3, [r0, #4]!
 8007b7a:	4288      	cmp	r0, r1
 8007b7c:	d3f4      	bcc.n	8007b68 <L_shift+0xc>
 8007b7e:	bd70      	pop	{r4, r5, r6, pc}

08007b80 <__match>:
 8007b80:	b530      	push	{r4, r5, lr}
 8007b82:	6803      	ldr	r3, [r0, #0]
 8007b84:	3301      	adds	r3, #1
 8007b86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b8a:	b914      	cbnz	r4, 8007b92 <__match+0x12>
 8007b8c:	6003      	str	r3, [r0, #0]
 8007b8e:	2001      	movs	r0, #1
 8007b90:	bd30      	pop	{r4, r5, pc}
 8007b92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b96:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007b9a:	2d19      	cmp	r5, #25
 8007b9c:	bf98      	it	ls
 8007b9e:	3220      	addls	r2, #32
 8007ba0:	42a2      	cmp	r2, r4
 8007ba2:	d0f0      	beq.n	8007b86 <__match+0x6>
 8007ba4:	2000      	movs	r0, #0
 8007ba6:	e7f3      	b.n	8007b90 <__match+0x10>

08007ba8 <__hexnan>:
 8007ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bac:	2500      	movs	r5, #0
 8007bae:	680b      	ldr	r3, [r1, #0]
 8007bb0:	4682      	mov	sl, r0
 8007bb2:	115f      	asrs	r7, r3, #5
 8007bb4:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007bb8:	f013 031f 	ands.w	r3, r3, #31
 8007bbc:	bf18      	it	ne
 8007bbe:	3704      	addne	r7, #4
 8007bc0:	1f3e      	subs	r6, r7, #4
 8007bc2:	4690      	mov	r8, r2
 8007bc4:	46b1      	mov	r9, r6
 8007bc6:	4634      	mov	r4, r6
 8007bc8:	46ab      	mov	fp, r5
 8007bca:	b087      	sub	sp, #28
 8007bcc:	6801      	ldr	r1, [r0, #0]
 8007bce:	9301      	str	r3, [sp, #4]
 8007bd0:	f847 5c04 	str.w	r5, [r7, #-4]
 8007bd4:	9502      	str	r5, [sp, #8]
 8007bd6:	784a      	ldrb	r2, [r1, #1]
 8007bd8:	1c4b      	adds	r3, r1, #1
 8007bda:	9303      	str	r3, [sp, #12]
 8007bdc:	b342      	cbz	r2, 8007c30 <__hexnan+0x88>
 8007bde:	4610      	mov	r0, r2
 8007be0:	9105      	str	r1, [sp, #20]
 8007be2:	9204      	str	r2, [sp, #16]
 8007be4:	f7ff fd83 	bl	80076ee <__hexdig_fun>
 8007be8:	2800      	cmp	r0, #0
 8007bea:	d143      	bne.n	8007c74 <__hexnan+0xcc>
 8007bec:	9a04      	ldr	r2, [sp, #16]
 8007bee:	9905      	ldr	r1, [sp, #20]
 8007bf0:	2a20      	cmp	r2, #32
 8007bf2:	d818      	bhi.n	8007c26 <__hexnan+0x7e>
 8007bf4:	9b02      	ldr	r3, [sp, #8]
 8007bf6:	459b      	cmp	fp, r3
 8007bf8:	dd13      	ble.n	8007c22 <__hexnan+0x7a>
 8007bfa:	454c      	cmp	r4, r9
 8007bfc:	d206      	bcs.n	8007c0c <__hexnan+0x64>
 8007bfe:	2d07      	cmp	r5, #7
 8007c00:	dc04      	bgt.n	8007c0c <__hexnan+0x64>
 8007c02:	462a      	mov	r2, r5
 8007c04:	4649      	mov	r1, r9
 8007c06:	4620      	mov	r0, r4
 8007c08:	f7ff ffa8 	bl	8007b5c <L_shift>
 8007c0c:	4544      	cmp	r4, r8
 8007c0e:	d944      	bls.n	8007c9a <__hexnan+0xf2>
 8007c10:	2300      	movs	r3, #0
 8007c12:	f1a4 0904 	sub.w	r9, r4, #4
 8007c16:	f844 3c04 	str.w	r3, [r4, #-4]
 8007c1a:	461d      	mov	r5, r3
 8007c1c:	464c      	mov	r4, r9
 8007c1e:	f8cd b008 	str.w	fp, [sp, #8]
 8007c22:	9903      	ldr	r1, [sp, #12]
 8007c24:	e7d7      	b.n	8007bd6 <__hexnan+0x2e>
 8007c26:	2a29      	cmp	r2, #41	; 0x29
 8007c28:	d14a      	bne.n	8007cc0 <__hexnan+0x118>
 8007c2a:	3102      	adds	r1, #2
 8007c2c:	f8ca 1000 	str.w	r1, [sl]
 8007c30:	f1bb 0f00 	cmp.w	fp, #0
 8007c34:	d044      	beq.n	8007cc0 <__hexnan+0x118>
 8007c36:	454c      	cmp	r4, r9
 8007c38:	d206      	bcs.n	8007c48 <__hexnan+0xa0>
 8007c3a:	2d07      	cmp	r5, #7
 8007c3c:	dc04      	bgt.n	8007c48 <__hexnan+0xa0>
 8007c3e:	462a      	mov	r2, r5
 8007c40:	4649      	mov	r1, r9
 8007c42:	4620      	mov	r0, r4
 8007c44:	f7ff ff8a 	bl	8007b5c <L_shift>
 8007c48:	4544      	cmp	r4, r8
 8007c4a:	d928      	bls.n	8007c9e <__hexnan+0xf6>
 8007c4c:	4643      	mov	r3, r8
 8007c4e:	f854 2b04 	ldr.w	r2, [r4], #4
 8007c52:	42a6      	cmp	r6, r4
 8007c54:	f843 2b04 	str.w	r2, [r3], #4
 8007c58:	d2f9      	bcs.n	8007c4e <__hexnan+0xa6>
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f843 2b04 	str.w	r2, [r3], #4
 8007c60:	429e      	cmp	r6, r3
 8007c62:	d2fb      	bcs.n	8007c5c <__hexnan+0xb4>
 8007c64:	6833      	ldr	r3, [r6, #0]
 8007c66:	b91b      	cbnz	r3, 8007c70 <__hexnan+0xc8>
 8007c68:	4546      	cmp	r6, r8
 8007c6a:	d127      	bne.n	8007cbc <__hexnan+0x114>
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	6033      	str	r3, [r6, #0]
 8007c70:	2005      	movs	r0, #5
 8007c72:	e026      	b.n	8007cc2 <__hexnan+0x11a>
 8007c74:	3501      	adds	r5, #1
 8007c76:	2d08      	cmp	r5, #8
 8007c78:	f10b 0b01 	add.w	fp, fp, #1
 8007c7c:	dd06      	ble.n	8007c8c <__hexnan+0xe4>
 8007c7e:	4544      	cmp	r4, r8
 8007c80:	d9cf      	bls.n	8007c22 <__hexnan+0x7a>
 8007c82:	2300      	movs	r3, #0
 8007c84:	2501      	movs	r5, #1
 8007c86:	f844 3c04 	str.w	r3, [r4, #-4]
 8007c8a:	3c04      	subs	r4, #4
 8007c8c:	6822      	ldr	r2, [r4, #0]
 8007c8e:	f000 000f 	and.w	r0, r0, #15
 8007c92:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007c96:	6020      	str	r0, [r4, #0]
 8007c98:	e7c3      	b.n	8007c22 <__hexnan+0x7a>
 8007c9a:	2508      	movs	r5, #8
 8007c9c:	e7c1      	b.n	8007c22 <__hexnan+0x7a>
 8007c9e:	9b01      	ldr	r3, [sp, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d0df      	beq.n	8007c64 <__hexnan+0xbc>
 8007ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ca8:	f1c3 0320 	rsb	r3, r3, #32
 8007cac:	fa22 f303 	lsr.w	r3, r2, r3
 8007cb0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007cb4:	401a      	ands	r2, r3
 8007cb6:	f847 2c04 	str.w	r2, [r7, #-4]
 8007cba:	e7d3      	b.n	8007c64 <__hexnan+0xbc>
 8007cbc:	3e04      	subs	r6, #4
 8007cbe:	e7d1      	b.n	8007c64 <__hexnan+0xbc>
 8007cc0:	2004      	movs	r0, #4
 8007cc2:	b007      	add	sp, #28
 8007cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007cc8 <__locale_ctype_ptr_l>:
 8007cc8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007ccc:	4770      	bx	lr

08007cce <__localeconv_l>:
 8007cce:	30f0      	adds	r0, #240	; 0xf0
 8007cd0:	4770      	bx	lr
	...

08007cd4 <_localeconv_r>:
 8007cd4:	4b04      	ldr	r3, [pc, #16]	; (8007ce8 <_localeconv_r+0x14>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	6a18      	ldr	r0, [r3, #32]
 8007cda:	4b04      	ldr	r3, [pc, #16]	; (8007cec <_localeconv_r+0x18>)
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	bf08      	it	eq
 8007ce0:	4618      	moveq	r0, r3
 8007ce2:	30f0      	adds	r0, #240	; 0xf0
 8007ce4:	4770      	bx	lr
 8007ce6:	bf00      	nop
 8007ce8:	2000000c 	.word	0x2000000c
 8007cec:	20000070 	.word	0x20000070

08007cf0 <malloc>:
 8007cf0:	4b02      	ldr	r3, [pc, #8]	; (8007cfc <malloc+0xc>)
 8007cf2:	4601      	mov	r1, r0
 8007cf4:	6818      	ldr	r0, [r3, #0]
 8007cf6:	f000 bc81 	b.w	80085fc <_malloc_r>
 8007cfa:	bf00      	nop
 8007cfc:	2000000c 	.word	0x2000000c

08007d00 <__ascii_mbtowc>:
 8007d00:	b082      	sub	sp, #8
 8007d02:	b901      	cbnz	r1, 8007d06 <__ascii_mbtowc+0x6>
 8007d04:	a901      	add	r1, sp, #4
 8007d06:	b142      	cbz	r2, 8007d1a <__ascii_mbtowc+0x1a>
 8007d08:	b14b      	cbz	r3, 8007d1e <__ascii_mbtowc+0x1e>
 8007d0a:	7813      	ldrb	r3, [r2, #0]
 8007d0c:	600b      	str	r3, [r1, #0]
 8007d0e:	7812      	ldrb	r2, [r2, #0]
 8007d10:	1c10      	adds	r0, r2, #0
 8007d12:	bf18      	it	ne
 8007d14:	2001      	movne	r0, #1
 8007d16:	b002      	add	sp, #8
 8007d18:	4770      	bx	lr
 8007d1a:	4610      	mov	r0, r2
 8007d1c:	e7fb      	b.n	8007d16 <__ascii_mbtowc+0x16>
 8007d1e:	f06f 0001 	mvn.w	r0, #1
 8007d22:	e7f8      	b.n	8007d16 <__ascii_mbtowc+0x16>

08007d24 <memchr>:
 8007d24:	b510      	push	{r4, lr}
 8007d26:	b2c9      	uxtb	r1, r1
 8007d28:	4402      	add	r2, r0
 8007d2a:	4290      	cmp	r0, r2
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	d101      	bne.n	8007d34 <memchr+0x10>
 8007d30:	2300      	movs	r3, #0
 8007d32:	e003      	b.n	8007d3c <memchr+0x18>
 8007d34:	781c      	ldrb	r4, [r3, #0]
 8007d36:	3001      	adds	r0, #1
 8007d38:	428c      	cmp	r4, r1
 8007d3a:	d1f6      	bne.n	8007d2a <memchr+0x6>
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	bd10      	pop	{r4, pc}

08007d40 <memcpy>:
 8007d40:	b510      	push	{r4, lr}
 8007d42:	1e43      	subs	r3, r0, #1
 8007d44:	440a      	add	r2, r1
 8007d46:	4291      	cmp	r1, r2
 8007d48:	d100      	bne.n	8007d4c <memcpy+0xc>
 8007d4a:	bd10      	pop	{r4, pc}
 8007d4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d54:	e7f7      	b.n	8007d46 <memcpy+0x6>

08007d56 <_Balloc>:
 8007d56:	b570      	push	{r4, r5, r6, lr}
 8007d58:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007d5a:	4604      	mov	r4, r0
 8007d5c:	460e      	mov	r6, r1
 8007d5e:	b93d      	cbnz	r5, 8007d70 <_Balloc+0x1a>
 8007d60:	2010      	movs	r0, #16
 8007d62:	f7ff ffc5 	bl	8007cf0 <malloc>
 8007d66:	6260      	str	r0, [r4, #36]	; 0x24
 8007d68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007d6c:	6005      	str	r5, [r0, #0]
 8007d6e:	60c5      	str	r5, [r0, #12]
 8007d70:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007d72:	68eb      	ldr	r3, [r5, #12]
 8007d74:	b183      	cbz	r3, 8007d98 <_Balloc+0x42>
 8007d76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007d7e:	b9b8      	cbnz	r0, 8007db0 <_Balloc+0x5a>
 8007d80:	2101      	movs	r1, #1
 8007d82:	fa01 f506 	lsl.w	r5, r1, r6
 8007d86:	1d6a      	adds	r2, r5, #5
 8007d88:	0092      	lsls	r2, r2, #2
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	f000 fbdc 	bl	8008548 <_calloc_r>
 8007d90:	b160      	cbz	r0, 8007dac <_Balloc+0x56>
 8007d92:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007d96:	e00e      	b.n	8007db6 <_Balloc+0x60>
 8007d98:	2221      	movs	r2, #33	; 0x21
 8007d9a:	2104      	movs	r1, #4
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	f000 fbd3 	bl	8008548 <_calloc_r>
 8007da2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007da4:	60e8      	str	r0, [r5, #12]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d1e4      	bne.n	8007d76 <_Balloc+0x20>
 8007dac:	2000      	movs	r0, #0
 8007dae:	bd70      	pop	{r4, r5, r6, pc}
 8007db0:	6802      	ldr	r2, [r0, #0]
 8007db2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007db6:	2300      	movs	r3, #0
 8007db8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007dbc:	e7f7      	b.n	8007dae <_Balloc+0x58>

08007dbe <_Bfree>:
 8007dbe:	b570      	push	{r4, r5, r6, lr}
 8007dc0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007dc2:	4606      	mov	r6, r0
 8007dc4:	460d      	mov	r5, r1
 8007dc6:	b93c      	cbnz	r4, 8007dd8 <_Bfree+0x1a>
 8007dc8:	2010      	movs	r0, #16
 8007dca:	f7ff ff91 	bl	8007cf0 <malloc>
 8007dce:	6270      	str	r0, [r6, #36]	; 0x24
 8007dd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007dd4:	6004      	str	r4, [r0, #0]
 8007dd6:	60c4      	str	r4, [r0, #12]
 8007dd8:	b13d      	cbz	r5, 8007dea <_Bfree+0x2c>
 8007dda:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007ddc:	686a      	ldr	r2, [r5, #4]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007de4:	6029      	str	r1, [r5, #0]
 8007de6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007dea:	bd70      	pop	{r4, r5, r6, pc}

08007dec <__multadd>:
 8007dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007df0:	461f      	mov	r7, r3
 8007df2:	4606      	mov	r6, r0
 8007df4:	460c      	mov	r4, r1
 8007df6:	2300      	movs	r3, #0
 8007df8:	690d      	ldr	r5, [r1, #16]
 8007dfa:	f101 0c14 	add.w	ip, r1, #20
 8007dfe:	f8dc 0000 	ldr.w	r0, [ip]
 8007e02:	3301      	adds	r3, #1
 8007e04:	b281      	uxth	r1, r0
 8007e06:	fb02 7101 	mla	r1, r2, r1, r7
 8007e0a:	0c00      	lsrs	r0, r0, #16
 8007e0c:	0c0f      	lsrs	r7, r1, #16
 8007e0e:	fb02 7000 	mla	r0, r2, r0, r7
 8007e12:	b289      	uxth	r1, r1
 8007e14:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007e18:	429d      	cmp	r5, r3
 8007e1a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007e1e:	f84c 1b04 	str.w	r1, [ip], #4
 8007e22:	dcec      	bgt.n	8007dfe <__multadd+0x12>
 8007e24:	b1d7      	cbz	r7, 8007e5c <__multadd+0x70>
 8007e26:	68a3      	ldr	r3, [r4, #8]
 8007e28:	42ab      	cmp	r3, r5
 8007e2a:	dc12      	bgt.n	8007e52 <__multadd+0x66>
 8007e2c:	6861      	ldr	r1, [r4, #4]
 8007e2e:	4630      	mov	r0, r6
 8007e30:	3101      	adds	r1, #1
 8007e32:	f7ff ff90 	bl	8007d56 <_Balloc>
 8007e36:	4680      	mov	r8, r0
 8007e38:	6922      	ldr	r2, [r4, #16]
 8007e3a:	f104 010c 	add.w	r1, r4, #12
 8007e3e:	3202      	adds	r2, #2
 8007e40:	0092      	lsls	r2, r2, #2
 8007e42:	300c      	adds	r0, #12
 8007e44:	f7ff ff7c 	bl	8007d40 <memcpy>
 8007e48:	4621      	mov	r1, r4
 8007e4a:	4630      	mov	r0, r6
 8007e4c:	f7ff ffb7 	bl	8007dbe <_Bfree>
 8007e50:	4644      	mov	r4, r8
 8007e52:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007e56:	3501      	adds	r5, #1
 8007e58:	615f      	str	r7, [r3, #20]
 8007e5a:	6125      	str	r5, [r4, #16]
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007e62 <__s2b>:
 8007e62:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e66:	4615      	mov	r5, r2
 8007e68:	2209      	movs	r2, #9
 8007e6a:	461f      	mov	r7, r3
 8007e6c:	3308      	adds	r3, #8
 8007e6e:	460c      	mov	r4, r1
 8007e70:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e74:	4606      	mov	r6, r0
 8007e76:	2201      	movs	r2, #1
 8007e78:	2100      	movs	r1, #0
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	db20      	blt.n	8007ec0 <__s2b+0x5e>
 8007e7e:	4630      	mov	r0, r6
 8007e80:	f7ff ff69 	bl	8007d56 <_Balloc>
 8007e84:	9b08      	ldr	r3, [sp, #32]
 8007e86:	2d09      	cmp	r5, #9
 8007e88:	6143      	str	r3, [r0, #20]
 8007e8a:	f04f 0301 	mov.w	r3, #1
 8007e8e:	6103      	str	r3, [r0, #16]
 8007e90:	dd19      	ble.n	8007ec6 <__s2b+0x64>
 8007e92:	f104 0809 	add.w	r8, r4, #9
 8007e96:	46c1      	mov	r9, r8
 8007e98:	442c      	add	r4, r5
 8007e9a:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007e9e:	4601      	mov	r1, r0
 8007ea0:	3b30      	subs	r3, #48	; 0x30
 8007ea2:	220a      	movs	r2, #10
 8007ea4:	4630      	mov	r0, r6
 8007ea6:	f7ff ffa1 	bl	8007dec <__multadd>
 8007eaa:	45a1      	cmp	r9, r4
 8007eac:	d1f5      	bne.n	8007e9a <__s2b+0x38>
 8007eae:	eb08 0405 	add.w	r4, r8, r5
 8007eb2:	3c08      	subs	r4, #8
 8007eb4:	1b2d      	subs	r5, r5, r4
 8007eb6:	1963      	adds	r3, r4, r5
 8007eb8:	42bb      	cmp	r3, r7
 8007eba:	db07      	blt.n	8007ecc <__s2b+0x6a>
 8007ebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ec0:	0052      	lsls	r2, r2, #1
 8007ec2:	3101      	adds	r1, #1
 8007ec4:	e7d9      	b.n	8007e7a <__s2b+0x18>
 8007ec6:	340a      	adds	r4, #10
 8007ec8:	2509      	movs	r5, #9
 8007eca:	e7f3      	b.n	8007eb4 <__s2b+0x52>
 8007ecc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007ed0:	4601      	mov	r1, r0
 8007ed2:	3b30      	subs	r3, #48	; 0x30
 8007ed4:	220a      	movs	r2, #10
 8007ed6:	4630      	mov	r0, r6
 8007ed8:	f7ff ff88 	bl	8007dec <__multadd>
 8007edc:	e7eb      	b.n	8007eb6 <__s2b+0x54>

08007ede <__hi0bits>:
 8007ede:	0c02      	lsrs	r2, r0, #16
 8007ee0:	0412      	lsls	r2, r2, #16
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	b9b2      	cbnz	r2, 8007f14 <__hi0bits+0x36>
 8007ee6:	0403      	lsls	r3, r0, #16
 8007ee8:	2010      	movs	r0, #16
 8007eea:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007eee:	bf04      	itt	eq
 8007ef0:	021b      	lsleq	r3, r3, #8
 8007ef2:	3008      	addeq	r0, #8
 8007ef4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007ef8:	bf04      	itt	eq
 8007efa:	011b      	lsleq	r3, r3, #4
 8007efc:	3004      	addeq	r0, #4
 8007efe:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007f02:	bf04      	itt	eq
 8007f04:	009b      	lsleq	r3, r3, #2
 8007f06:	3002      	addeq	r0, #2
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	db06      	blt.n	8007f1a <__hi0bits+0x3c>
 8007f0c:	005b      	lsls	r3, r3, #1
 8007f0e:	d503      	bpl.n	8007f18 <__hi0bits+0x3a>
 8007f10:	3001      	adds	r0, #1
 8007f12:	4770      	bx	lr
 8007f14:	2000      	movs	r0, #0
 8007f16:	e7e8      	b.n	8007eea <__hi0bits+0xc>
 8007f18:	2020      	movs	r0, #32
 8007f1a:	4770      	bx	lr

08007f1c <__lo0bits>:
 8007f1c:	6803      	ldr	r3, [r0, #0]
 8007f1e:	4601      	mov	r1, r0
 8007f20:	f013 0207 	ands.w	r2, r3, #7
 8007f24:	d00b      	beq.n	8007f3e <__lo0bits+0x22>
 8007f26:	07da      	lsls	r2, r3, #31
 8007f28:	d423      	bmi.n	8007f72 <__lo0bits+0x56>
 8007f2a:	0798      	lsls	r0, r3, #30
 8007f2c:	bf49      	itett	mi
 8007f2e:	085b      	lsrmi	r3, r3, #1
 8007f30:	089b      	lsrpl	r3, r3, #2
 8007f32:	2001      	movmi	r0, #1
 8007f34:	600b      	strmi	r3, [r1, #0]
 8007f36:	bf5c      	itt	pl
 8007f38:	600b      	strpl	r3, [r1, #0]
 8007f3a:	2002      	movpl	r0, #2
 8007f3c:	4770      	bx	lr
 8007f3e:	b298      	uxth	r0, r3
 8007f40:	b9a8      	cbnz	r0, 8007f6e <__lo0bits+0x52>
 8007f42:	2010      	movs	r0, #16
 8007f44:	0c1b      	lsrs	r3, r3, #16
 8007f46:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007f4a:	bf04      	itt	eq
 8007f4c:	0a1b      	lsreq	r3, r3, #8
 8007f4e:	3008      	addeq	r0, #8
 8007f50:	071a      	lsls	r2, r3, #28
 8007f52:	bf04      	itt	eq
 8007f54:	091b      	lsreq	r3, r3, #4
 8007f56:	3004      	addeq	r0, #4
 8007f58:	079a      	lsls	r2, r3, #30
 8007f5a:	bf04      	itt	eq
 8007f5c:	089b      	lsreq	r3, r3, #2
 8007f5e:	3002      	addeq	r0, #2
 8007f60:	07da      	lsls	r2, r3, #31
 8007f62:	d402      	bmi.n	8007f6a <__lo0bits+0x4e>
 8007f64:	085b      	lsrs	r3, r3, #1
 8007f66:	d006      	beq.n	8007f76 <__lo0bits+0x5a>
 8007f68:	3001      	adds	r0, #1
 8007f6a:	600b      	str	r3, [r1, #0]
 8007f6c:	4770      	bx	lr
 8007f6e:	4610      	mov	r0, r2
 8007f70:	e7e9      	b.n	8007f46 <__lo0bits+0x2a>
 8007f72:	2000      	movs	r0, #0
 8007f74:	4770      	bx	lr
 8007f76:	2020      	movs	r0, #32
 8007f78:	4770      	bx	lr

08007f7a <__i2b>:
 8007f7a:	b510      	push	{r4, lr}
 8007f7c:	460c      	mov	r4, r1
 8007f7e:	2101      	movs	r1, #1
 8007f80:	f7ff fee9 	bl	8007d56 <_Balloc>
 8007f84:	2201      	movs	r2, #1
 8007f86:	6144      	str	r4, [r0, #20]
 8007f88:	6102      	str	r2, [r0, #16]
 8007f8a:	bd10      	pop	{r4, pc}

08007f8c <__multiply>:
 8007f8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f90:	4614      	mov	r4, r2
 8007f92:	690a      	ldr	r2, [r1, #16]
 8007f94:	6923      	ldr	r3, [r4, #16]
 8007f96:	4688      	mov	r8, r1
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	bfbe      	ittt	lt
 8007f9c:	460b      	movlt	r3, r1
 8007f9e:	46a0      	movlt	r8, r4
 8007fa0:	461c      	movlt	r4, r3
 8007fa2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007fa6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007faa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007fae:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007fb2:	eb07 0609 	add.w	r6, r7, r9
 8007fb6:	42b3      	cmp	r3, r6
 8007fb8:	bfb8      	it	lt
 8007fba:	3101      	addlt	r1, #1
 8007fbc:	f7ff fecb 	bl	8007d56 <_Balloc>
 8007fc0:	f100 0514 	add.w	r5, r0, #20
 8007fc4:	462b      	mov	r3, r5
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007fcc:	4573      	cmp	r3, lr
 8007fce:	d316      	bcc.n	8007ffe <__multiply+0x72>
 8007fd0:	f104 0214 	add.w	r2, r4, #20
 8007fd4:	f108 0114 	add.w	r1, r8, #20
 8007fd8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007fdc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007fe0:	9300      	str	r3, [sp, #0]
 8007fe2:	9b00      	ldr	r3, [sp, #0]
 8007fe4:	9201      	str	r2, [sp, #4]
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d80c      	bhi.n	8008004 <__multiply+0x78>
 8007fea:	2e00      	cmp	r6, #0
 8007fec:	dd03      	ble.n	8007ff6 <__multiply+0x6a>
 8007fee:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d05d      	beq.n	80080b2 <__multiply+0x126>
 8007ff6:	6106      	str	r6, [r0, #16]
 8007ff8:	b003      	add	sp, #12
 8007ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ffe:	f843 2b04 	str.w	r2, [r3], #4
 8008002:	e7e3      	b.n	8007fcc <__multiply+0x40>
 8008004:	f8b2 b000 	ldrh.w	fp, [r2]
 8008008:	f1bb 0f00 	cmp.w	fp, #0
 800800c:	d023      	beq.n	8008056 <__multiply+0xca>
 800800e:	4689      	mov	r9, r1
 8008010:	46ac      	mov	ip, r5
 8008012:	f04f 0800 	mov.w	r8, #0
 8008016:	f859 4b04 	ldr.w	r4, [r9], #4
 800801a:	f8dc a000 	ldr.w	sl, [ip]
 800801e:	b2a3      	uxth	r3, r4
 8008020:	fa1f fa8a 	uxth.w	sl, sl
 8008024:	fb0b a303 	mla	r3, fp, r3, sl
 8008028:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800802c:	f8dc 4000 	ldr.w	r4, [ip]
 8008030:	4443      	add	r3, r8
 8008032:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008036:	fb0b 840a 	mla	r4, fp, sl, r8
 800803a:	46e2      	mov	sl, ip
 800803c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008040:	b29b      	uxth	r3, r3
 8008042:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008046:	454f      	cmp	r7, r9
 8008048:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800804c:	f84a 3b04 	str.w	r3, [sl], #4
 8008050:	d82b      	bhi.n	80080aa <__multiply+0x11e>
 8008052:	f8cc 8004 	str.w	r8, [ip, #4]
 8008056:	9b01      	ldr	r3, [sp, #4]
 8008058:	3204      	adds	r2, #4
 800805a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800805e:	f1ba 0f00 	cmp.w	sl, #0
 8008062:	d020      	beq.n	80080a6 <__multiply+0x11a>
 8008064:	4689      	mov	r9, r1
 8008066:	46a8      	mov	r8, r5
 8008068:	f04f 0b00 	mov.w	fp, #0
 800806c:	682b      	ldr	r3, [r5, #0]
 800806e:	f8b9 c000 	ldrh.w	ip, [r9]
 8008072:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008076:	b29b      	uxth	r3, r3
 8008078:	fb0a 440c 	mla	r4, sl, ip, r4
 800807c:	46c4      	mov	ip, r8
 800807e:	445c      	add	r4, fp
 8008080:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008084:	f84c 3b04 	str.w	r3, [ip], #4
 8008088:	f859 3b04 	ldr.w	r3, [r9], #4
 800808c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008090:	0c1b      	lsrs	r3, r3, #16
 8008092:	fb0a b303 	mla	r3, sl, r3, fp
 8008096:	454f      	cmp	r7, r9
 8008098:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800809c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80080a0:	d805      	bhi.n	80080ae <__multiply+0x122>
 80080a2:	f8c8 3004 	str.w	r3, [r8, #4]
 80080a6:	3504      	adds	r5, #4
 80080a8:	e79b      	b.n	8007fe2 <__multiply+0x56>
 80080aa:	46d4      	mov	ip, sl
 80080ac:	e7b3      	b.n	8008016 <__multiply+0x8a>
 80080ae:	46e0      	mov	r8, ip
 80080b0:	e7dd      	b.n	800806e <__multiply+0xe2>
 80080b2:	3e01      	subs	r6, #1
 80080b4:	e799      	b.n	8007fea <__multiply+0x5e>
	...

080080b8 <__pow5mult>:
 80080b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080bc:	4615      	mov	r5, r2
 80080be:	f012 0203 	ands.w	r2, r2, #3
 80080c2:	4606      	mov	r6, r0
 80080c4:	460f      	mov	r7, r1
 80080c6:	d007      	beq.n	80080d8 <__pow5mult+0x20>
 80080c8:	4c21      	ldr	r4, [pc, #132]	; (8008150 <__pow5mult+0x98>)
 80080ca:	3a01      	subs	r2, #1
 80080cc:	2300      	movs	r3, #0
 80080ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80080d2:	f7ff fe8b 	bl	8007dec <__multadd>
 80080d6:	4607      	mov	r7, r0
 80080d8:	10ad      	asrs	r5, r5, #2
 80080da:	d035      	beq.n	8008148 <__pow5mult+0x90>
 80080dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80080de:	b93c      	cbnz	r4, 80080f0 <__pow5mult+0x38>
 80080e0:	2010      	movs	r0, #16
 80080e2:	f7ff fe05 	bl	8007cf0 <malloc>
 80080e6:	6270      	str	r0, [r6, #36]	; 0x24
 80080e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80080ec:	6004      	str	r4, [r0, #0]
 80080ee:	60c4      	str	r4, [r0, #12]
 80080f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80080f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80080f8:	b94c      	cbnz	r4, 800810e <__pow5mult+0x56>
 80080fa:	f240 2171 	movw	r1, #625	; 0x271
 80080fe:	4630      	mov	r0, r6
 8008100:	f7ff ff3b 	bl	8007f7a <__i2b>
 8008104:	2300      	movs	r3, #0
 8008106:	4604      	mov	r4, r0
 8008108:	f8c8 0008 	str.w	r0, [r8, #8]
 800810c:	6003      	str	r3, [r0, #0]
 800810e:	f04f 0800 	mov.w	r8, #0
 8008112:	07eb      	lsls	r3, r5, #31
 8008114:	d50a      	bpl.n	800812c <__pow5mult+0x74>
 8008116:	4639      	mov	r1, r7
 8008118:	4622      	mov	r2, r4
 800811a:	4630      	mov	r0, r6
 800811c:	f7ff ff36 	bl	8007f8c <__multiply>
 8008120:	4681      	mov	r9, r0
 8008122:	4639      	mov	r1, r7
 8008124:	4630      	mov	r0, r6
 8008126:	f7ff fe4a 	bl	8007dbe <_Bfree>
 800812a:	464f      	mov	r7, r9
 800812c:	106d      	asrs	r5, r5, #1
 800812e:	d00b      	beq.n	8008148 <__pow5mult+0x90>
 8008130:	6820      	ldr	r0, [r4, #0]
 8008132:	b938      	cbnz	r0, 8008144 <__pow5mult+0x8c>
 8008134:	4622      	mov	r2, r4
 8008136:	4621      	mov	r1, r4
 8008138:	4630      	mov	r0, r6
 800813a:	f7ff ff27 	bl	8007f8c <__multiply>
 800813e:	6020      	str	r0, [r4, #0]
 8008140:	f8c0 8000 	str.w	r8, [r0]
 8008144:	4604      	mov	r4, r0
 8008146:	e7e4      	b.n	8008112 <__pow5mult+0x5a>
 8008148:	4638      	mov	r0, r7
 800814a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800814e:	bf00      	nop
 8008150:	08008e18 	.word	0x08008e18

08008154 <__lshift>:
 8008154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008158:	460c      	mov	r4, r1
 800815a:	4607      	mov	r7, r0
 800815c:	4616      	mov	r6, r2
 800815e:	6923      	ldr	r3, [r4, #16]
 8008160:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008164:	eb0a 0903 	add.w	r9, sl, r3
 8008168:	6849      	ldr	r1, [r1, #4]
 800816a:	68a3      	ldr	r3, [r4, #8]
 800816c:	f109 0501 	add.w	r5, r9, #1
 8008170:	42ab      	cmp	r3, r5
 8008172:	db32      	blt.n	80081da <__lshift+0x86>
 8008174:	4638      	mov	r0, r7
 8008176:	f7ff fdee 	bl	8007d56 <_Balloc>
 800817a:	2300      	movs	r3, #0
 800817c:	4680      	mov	r8, r0
 800817e:	461a      	mov	r2, r3
 8008180:	f100 0114 	add.w	r1, r0, #20
 8008184:	4553      	cmp	r3, sl
 8008186:	db2b      	blt.n	80081e0 <__lshift+0x8c>
 8008188:	6920      	ldr	r0, [r4, #16]
 800818a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800818e:	f104 0314 	add.w	r3, r4, #20
 8008192:	f016 021f 	ands.w	r2, r6, #31
 8008196:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800819a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800819e:	d025      	beq.n	80081ec <__lshift+0x98>
 80081a0:	2000      	movs	r0, #0
 80081a2:	f1c2 0e20 	rsb	lr, r2, #32
 80081a6:	468a      	mov	sl, r1
 80081a8:	681e      	ldr	r6, [r3, #0]
 80081aa:	4096      	lsls	r6, r2
 80081ac:	4330      	orrs	r0, r6
 80081ae:	f84a 0b04 	str.w	r0, [sl], #4
 80081b2:	f853 0b04 	ldr.w	r0, [r3], #4
 80081b6:	459c      	cmp	ip, r3
 80081b8:	fa20 f00e 	lsr.w	r0, r0, lr
 80081bc:	d814      	bhi.n	80081e8 <__lshift+0x94>
 80081be:	6048      	str	r0, [r1, #4]
 80081c0:	b108      	cbz	r0, 80081c6 <__lshift+0x72>
 80081c2:	f109 0502 	add.w	r5, r9, #2
 80081c6:	3d01      	subs	r5, #1
 80081c8:	4638      	mov	r0, r7
 80081ca:	f8c8 5010 	str.w	r5, [r8, #16]
 80081ce:	4621      	mov	r1, r4
 80081d0:	f7ff fdf5 	bl	8007dbe <_Bfree>
 80081d4:	4640      	mov	r0, r8
 80081d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081da:	3101      	adds	r1, #1
 80081dc:	005b      	lsls	r3, r3, #1
 80081de:	e7c7      	b.n	8008170 <__lshift+0x1c>
 80081e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80081e4:	3301      	adds	r3, #1
 80081e6:	e7cd      	b.n	8008184 <__lshift+0x30>
 80081e8:	4651      	mov	r1, sl
 80081ea:	e7dc      	b.n	80081a6 <__lshift+0x52>
 80081ec:	3904      	subs	r1, #4
 80081ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80081f2:	459c      	cmp	ip, r3
 80081f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80081f8:	d8f9      	bhi.n	80081ee <__lshift+0x9a>
 80081fa:	e7e4      	b.n	80081c6 <__lshift+0x72>

080081fc <__mcmp>:
 80081fc:	6903      	ldr	r3, [r0, #16]
 80081fe:	690a      	ldr	r2, [r1, #16]
 8008200:	b530      	push	{r4, r5, lr}
 8008202:	1a9b      	subs	r3, r3, r2
 8008204:	d10c      	bne.n	8008220 <__mcmp+0x24>
 8008206:	0092      	lsls	r2, r2, #2
 8008208:	3014      	adds	r0, #20
 800820a:	3114      	adds	r1, #20
 800820c:	1884      	adds	r4, r0, r2
 800820e:	4411      	add	r1, r2
 8008210:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008214:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008218:	4295      	cmp	r5, r2
 800821a:	d003      	beq.n	8008224 <__mcmp+0x28>
 800821c:	d305      	bcc.n	800822a <__mcmp+0x2e>
 800821e:	2301      	movs	r3, #1
 8008220:	4618      	mov	r0, r3
 8008222:	bd30      	pop	{r4, r5, pc}
 8008224:	42a0      	cmp	r0, r4
 8008226:	d3f3      	bcc.n	8008210 <__mcmp+0x14>
 8008228:	e7fa      	b.n	8008220 <__mcmp+0x24>
 800822a:	f04f 33ff 	mov.w	r3, #4294967295
 800822e:	e7f7      	b.n	8008220 <__mcmp+0x24>

08008230 <__mdiff>:
 8008230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008234:	460d      	mov	r5, r1
 8008236:	4607      	mov	r7, r0
 8008238:	4611      	mov	r1, r2
 800823a:	4628      	mov	r0, r5
 800823c:	4614      	mov	r4, r2
 800823e:	f7ff ffdd 	bl	80081fc <__mcmp>
 8008242:	1e06      	subs	r6, r0, #0
 8008244:	d108      	bne.n	8008258 <__mdiff+0x28>
 8008246:	4631      	mov	r1, r6
 8008248:	4638      	mov	r0, r7
 800824a:	f7ff fd84 	bl	8007d56 <_Balloc>
 800824e:	2301      	movs	r3, #1
 8008250:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008258:	bfa4      	itt	ge
 800825a:	4623      	movge	r3, r4
 800825c:	462c      	movge	r4, r5
 800825e:	4638      	mov	r0, r7
 8008260:	6861      	ldr	r1, [r4, #4]
 8008262:	bfa6      	itte	ge
 8008264:	461d      	movge	r5, r3
 8008266:	2600      	movge	r6, #0
 8008268:	2601      	movlt	r6, #1
 800826a:	f7ff fd74 	bl	8007d56 <_Balloc>
 800826e:	f04f 0e00 	mov.w	lr, #0
 8008272:	60c6      	str	r6, [r0, #12]
 8008274:	692b      	ldr	r3, [r5, #16]
 8008276:	6926      	ldr	r6, [r4, #16]
 8008278:	f104 0214 	add.w	r2, r4, #20
 800827c:	f105 0914 	add.w	r9, r5, #20
 8008280:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008284:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008288:	f100 0114 	add.w	r1, r0, #20
 800828c:	f852 ab04 	ldr.w	sl, [r2], #4
 8008290:	f859 5b04 	ldr.w	r5, [r9], #4
 8008294:	fa1f f38a 	uxth.w	r3, sl
 8008298:	4473      	add	r3, lr
 800829a:	b2ac      	uxth	r4, r5
 800829c:	1b1b      	subs	r3, r3, r4
 800829e:	0c2c      	lsrs	r4, r5, #16
 80082a0:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80082a4:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80082ae:	45c8      	cmp	r8, r9
 80082b0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80082b4:	4694      	mov	ip, r2
 80082b6:	f841 4b04 	str.w	r4, [r1], #4
 80082ba:	d8e7      	bhi.n	800828c <__mdiff+0x5c>
 80082bc:	45bc      	cmp	ip, r7
 80082be:	d304      	bcc.n	80082ca <__mdiff+0x9a>
 80082c0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80082c4:	b183      	cbz	r3, 80082e8 <__mdiff+0xb8>
 80082c6:	6106      	str	r6, [r0, #16]
 80082c8:	e7c4      	b.n	8008254 <__mdiff+0x24>
 80082ca:	f85c 4b04 	ldr.w	r4, [ip], #4
 80082ce:	b2a2      	uxth	r2, r4
 80082d0:	4472      	add	r2, lr
 80082d2:	1413      	asrs	r3, r2, #16
 80082d4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80082d8:	b292      	uxth	r2, r2
 80082da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80082de:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80082e2:	f841 2b04 	str.w	r2, [r1], #4
 80082e6:	e7e9      	b.n	80082bc <__mdiff+0x8c>
 80082e8:	3e01      	subs	r6, #1
 80082ea:	e7e9      	b.n	80082c0 <__mdiff+0x90>

080082ec <__ulp>:
 80082ec:	4b10      	ldr	r3, [pc, #64]	; (8008330 <__ulp+0x44>)
 80082ee:	400b      	ands	r3, r1
 80082f0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	dd02      	ble.n	80082fe <__ulp+0x12>
 80082f8:	2000      	movs	r0, #0
 80082fa:	4619      	mov	r1, r3
 80082fc:	4770      	bx	lr
 80082fe:	425b      	negs	r3, r3
 8008300:	151b      	asrs	r3, r3, #20
 8008302:	2b13      	cmp	r3, #19
 8008304:	f04f 0000 	mov.w	r0, #0
 8008308:	f04f 0100 	mov.w	r1, #0
 800830c:	dc04      	bgt.n	8008318 <__ulp+0x2c>
 800830e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008312:	fa42 f103 	asr.w	r1, r2, r3
 8008316:	4770      	bx	lr
 8008318:	2201      	movs	r2, #1
 800831a:	3b14      	subs	r3, #20
 800831c:	2b1e      	cmp	r3, #30
 800831e:	bfce      	itee	gt
 8008320:	4613      	movgt	r3, r2
 8008322:	f1c3 031f 	rsble	r3, r3, #31
 8008326:	fa02 f303 	lslle.w	r3, r2, r3
 800832a:	4618      	mov	r0, r3
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	7ff00000 	.word	0x7ff00000

08008334 <__b2d>:
 8008334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008338:	6907      	ldr	r7, [r0, #16]
 800833a:	f100 0914 	add.w	r9, r0, #20
 800833e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008342:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008346:	f1a7 0804 	sub.w	r8, r7, #4
 800834a:	4630      	mov	r0, r6
 800834c:	f7ff fdc7 	bl	8007ede <__hi0bits>
 8008350:	f1c0 0320 	rsb	r3, r0, #32
 8008354:	280a      	cmp	r0, #10
 8008356:	600b      	str	r3, [r1, #0]
 8008358:	491e      	ldr	r1, [pc, #120]	; (80083d4 <__b2d+0xa0>)
 800835a:	dc17      	bgt.n	800838c <__b2d+0x58>
 800835c:	45c1      	cmp	r9, r8
 800835e:	bf28      	it	cs
 8008360:	2200      	movcs	r2, #0
 8008362:	f1c0 0c0b 	rsb	ip, r0, #11
 8008366:	fa26 f30c 	lsr.w	r3, r6, ip
 800836a:	bf38      	it	cc
 800836c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008370:	ea43 0501 	orr.w	r5, r3, r1
 8008374:	f100 0315 	add.w	r3, r0, #21
 8008378:	fa06 f303 	lsl.w	r3, r6, r3
 800837c:	fa22 f20c 	lsr.w	r2, r2, ip
 8008380:	ea43 0402 	orr.w	r4, r3, r2
 8008384:	4620      	mov	r0, r4
 8008386:	4629      	mov	r1, r5
 8008388:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800838c:	45c1      	cmp	r9, r8
 800838e:	bf3a      	itte	cc
 8008390:	f1a7 0808 	subcc.w	r8, r7, #8
 8008394:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008398:	2200      	movcs	r2, #0
 800839a:	f1b0 030b 	subs.w	r3, r0, #11
 800839e:	d015      	beq.n	80083cc <__b2d+0x98>
 80083a0:	409e      	lsls	r6, r3
 80083a2:	f1c3 0720 	rsb	r7, r3, #32
 80083a6:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 80083aa:	fa22 f107 	lsr.w	r1, r2, r7
 80083ae:	45c8      	cmp	r8, r9
 80083b0:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 80083b4:	ea46 0501 	orr.w	r5, r6, r1
 80083b8:	bf94      	ite	ls
 80083ba:	2100      	movls	r1, #0
 80083bc:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80083c0:	fa02 f003 	lsl.w	r0, r2, r3
 80083c4:	40f9      	lsrs	r1, r7
 80083c6:	ea40 0401 	orr.w	r4, r0, r1
 80083ca:	e7db      	b.n	8008384 <__b2d+0x50>
 80083cc:	ea46 0501 	orr.w	r5, r6, r1
 80083d0:	4614      	mov	r4, r2
 80083d2:	e7d7      	b.n	8008384 <__b2d+0x50>
 80083d4:	3ff00000 	.word	0x3ff00000

080083d8 <__d2b>:
 80083d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80083dc:	461c      	mov	r4, r3
 80083de:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80083e2:	2101      	movs	r1, #1
 80083e4:	4690      	mov	r8, r2
 80083e6:	f7ff fcb6 	bl	8007d56 <_Balloc>
 80083ea:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80083ee:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80083f2:	4607      	mov	r7, r0
 80083f4:	bb34      	cbnz	r4, 8008444 <__d2b+0x6c>
 80083f6:	9201      	str	r2, [sp, #4]
 80083f8:	f1b8 0200 	subs.w	r2, r8, #0
 80083fc:	d027      	beq.n	800844e <__d2b+0x76>
 80083fe:	a802      	add	r0, sp, #8
 8008400:	f840 2d08 	str.w	r2, [r0, #-8]!
 8008404:	f7ff fd8a 	bl	8007f1c <__lo0bits>
 8008408:	9900      	ldr	r1, [sp, #0]
 800840a:	b1f0      	cbz	r0, 800844a <__d2b+0x72>
 800840c:	9a01      	ldr	r2, [sp, #4]
 800840e:	f1c0 0320 	rsb	r3, r0, #32
 8008412:	fa02 f303 	lsl.w	r3, r2, r3
 8008416:	430b      	orrs	r3, r1
 8008418:	40c2      	lsrs	r2, r0
 800841a:	617b      	str	r3, [r7, #20]
 800841c:	9201      	str	r2, [sp, #4]
 800841e:	9b01      	ldr	r3, [sp, #4]
 8008420:	2b00      	cmp	r3, #0
 8008422:	bf14      	ite	ne
 8008424:	2102      	movne	r1, #2
 8008426:	2101      	moveq	r1, #1
 8008428:	61bb      	str	r3, [r7, #24]
 800842a:	6139      	str	r1, [r7, #16]
 800842c:	b1c4      	cbz	r4, 8008460 <__d2b+0x88>
 800842e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008432:	4404      	add	r4, r0
 8008434:	6034      	str	r4, [r6, #0]
 8008436:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800843a:	6028      	str	r0, [r5, #0]
 800843c:	4638      	mov	r0, r7
 800843e:	b002      	add	sp, #8
 8008440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008444:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008448:	e7d5      	b.n	80083f6 <__d2b+0x1e>
 800844a:	6179      	str	r1, [r7, #20]
 800844c:	e7e7      	b.n	800841e <__d2b+0x46>
 800844e:	a801      	add	r0, sp, #4
 8008450:	f7ff fd64 	bl	8007f1c <__lo0bits>
 8008454:	2101      	movs	r1, #1
 8008456:	9b01      	ldr	r3, [sp, #4]
 8008458:	6139      	str	r1, [r7, #16]
 800845a:	617b      	str	r3, [r7, #20]
 800845c:	3020      	adds	r0, #32
 800845e:	e7e5      	b.n	800842c <__d2b+0x54>
 8008460:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008464:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008468:	6030      	str	r0, [r6, #0]
 800846a:	6918      	ldr	r0, [r3, #16]
 800846c:	f7ff fd37 	bl	8007ede <__hi0bits>
 8008470:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008474:	e7e1      	b.n	800843a <__d2b+0x62>

08008476 <__ratio>:
 8008476:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800847a:	4688      	mov	r8, r1
 800847c:	4669      	mov	r1, sp
 800847e:	4681      	mov	r9, r0
 8008480:	f7ff ff58 	bl	8008334 <__b2d>
 8008484:	468b      	mov	fp, r1
 8008486:	4606      	mov	r6, r0
 8008488:	460f      	mov	r7, r1
 800848a:	4640      	mov	r0, r8
 800848c:	a901      	add	r1, sp, #4
 800848e:	f7ff ff51 	bl	8008334 <__b2d>
 8008492:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008496:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800849a:	460d      	mov	r5, r1
 800849c:	eba3 0c02 	sub.w	ip, r3, r2
 80084a0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80084a4:	1a9b      	subs	r3, r3, r2
 80084a6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	bfd5      	itete	le
 80084ae:	460a      	movle	r2, r1
 80084b0:	463a      	movgt	r2, r7
 80084b2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80084b6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80084ba:	bfd8      	it	le
 80084bc:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 80084c0:	462b      	mov	r3, r5
 80084c2:	4602      	mov	r2, r0
 80084c4:	4659      	mov	r1, fp
 80084c6:	4630      	mov	r0, r6
 80084c8:	f7f8 f93a 	bl	8000740 <__aeabi_ddiv>
 80084cc:	b003      	add	sp, #12
 80084ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080084d2 <__copybits>:
 80084d2:	3901      	subs	r1, #1
 80084d4:	b510      	push	{r4, lr}
 80084d6:	1149      	asrs	r1, r1, #5
 80084d8:	6914      	ldr	r4, [r2, #16]
 80084da:	3101      	adds	r1, #1
 80084dc:	f102 0314 	add.w	r3, r2, #20
 80084e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80084e4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80084e8:	42a3      	cmp	r3, r4
 80084ea:	4602      	mov	r2, r0
 80084ec:	d303      	bcc.n	80084f6 <__copybits+0x24>
 80084ee:	2300      	movs	r3, #0
 80084f0:	428a      	cmp	r2, r1
 80084f2:	d305      	bcc.n	8008500 <__copybits+0x2e>
 80084f4:	bd10      	pop	{r4, pc}
 80084f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80084fa:	f840 2b04 	str.w	r2, [r0], #4
 80084fe:	e7f3      	b.n	80084e8 <__copybits+0x16>
 8008500:	f842 3b04 	str.w	r3, [r2], #4
 8008504:	e7f4      	b.n	80084f0 <__copybits+0x1e>

08008506 <__any_on>:
 8008506:	f100 0214 	add.w	r2, r0, #20
 800850a:	6900      	ldr	r0, [r0, #16]
 800850c:	114b      	asrs	r3, r1, #5
 800850e:	4298      	cmp	r0, r3
 8008510:	b510      	push	{r4, lr}
 8008512:	db11      	blt.n	8008538 <__any_on+0x32>
 8008514:	dd0a      	ble.n	800852c <__any_on+0x26>
 8008516:	f011 011f 	ands.w	r1, r1, #31
 800851a:	d007      	beq.n	800852c <__any_on+0x26>
 800851c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008520:	fa24 f001 	lsr.w	r0, r4, r1
 8008524:	fa00 f101 	lsl.w	r1, r0, r1
 8008528:	428c      	cmp	r4, r1
 800852a:	d10b      	bne.n	8008544 <__any_on+0x3e>
 800852c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008530:	4293      	cmp	r3, r2
 8008532:	d803      	bhi.n	800853c <__any_on+0x36>
 8008534:	2000      	movs	r0, #0
 8008536:	bd10      	pop	{r4, pc}
 8008538:	4603      	mov	r3, r0
 800853a:	e7f7      	b.n	800852c <__any_on+0x26>
 800853c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008540:	2900      	cmp	r1, #0
 8008542:	d0f5      	beq.n	8008530 <__any_on+0x2a>
 8008544:	2001      	movs	r0, #1
 8008546:	e7f6      	b.n	8008536 <__any_on+0x30>

08008548 <_calloc_r>:
 8008548:	b538      	push	{r3, r4, r5, lr}
 800854a:	fb02 f401 	mul.w	r4, r2, r1
 800854e:	4621      	mov	r1, r4
 8008550:	f000 f854 	bl	80085fc <_malloc_r>
 8008554:	4605      	mov	r5, r0
 8008556:	b118      	cbz	r0, 8008560 <_calloc_r+0x18>
 8008558:	4622      	mov	r2, r4
 800855a:	2100      	movs	r1, #0
 800855c:	f7fc fee8 	bl	8005330 <memset>
 8008560:	4628      	mov	r0, r5
 8008562:	bd38      	pop	{r3, r4, r5, pc}

08008564 <_free_r>:
 8008564:	b538      	push	{r3, r4, r5, lr}
 8008566:	4605      	mov	r5, r0
 8008568:	2900      	cmp	r1, #0
 800856a:	d043      	beq.n	80085f4 <_free_r+0x90>
 800856c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008570:	1f0c      	subs	r4, r1, #4
 8008572:	2b00      	cmp	r3, #0
 8008574:	bfb8      	it	lt
 8008576:	18e4      	addlt	r4, r4, r3
 8008578:	f000 fa34 	bl	80089e4 <__malloc_lock>
 800857c:	4a1e      	ldr	r2, [pc, #120]	; (80085f8 <_free_r+0x94>)
 800857e:	6813      	ldr	r3, [r2, #0]
 8008580:	4610      	mov	r0, r2
 8008582:	b933      	cbnz	r3, 8008592 <_free_r+0x2e>
 8008584:	6063      	str	r3, [r4, #4]
 8008586:	6014      	str	r4, [r2, #0]
 8008588:	4628      	mov	r0, r5
 800858a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800858e:	f000 ba2a 	b.w	80089e6 <__malloc_unlock>
 8008592:	42a3      	cmp	r3, r4
 8008594:	d90b      	bls.n	80085ae <_free_r+0x4a>
 8008596:	6821      	ldr	r1, [r4, #0]
 8008598:	1862      	adds	r2, r4, r1
 800859a:	4293      	cmp	r3, r2
 800859c:	bf01      	itttt	eq
 800859e:	681a      	ldreq	r2, [r3, #0]
 80085a0:	685b      	ldreq	r3, [r3, #4]
 80085a2:	1852      	addeq	r2, r2, r1
 80085a4:	6022      	streq	r2, [r4, #0]
 80085a6:	6063      	str	r3, [r4, #4]
 80085a8:	6004      	str	r4, [r0, #0]
 80085aa:	e7ed      	b.n	8008588 <_free_r+0x24>
 80085ac:	4613      	mov	r3, r2
 80085ae:	685a      	ldr	r2, [r3, #4]
 80085b0:	b10a      	cbz	r2, 80085b6 <_free_r+0x52>
 80085b2:	42a2      	cmp	r2, r4
 80085b4:	d9fa      	bls.n	80085ac <_free_r+0x48>
 80085b6:	6819      	ldr	r1, [r3, #0]
 80085b8:	1858      	adds	r0, r3, r1
 80085ba:	42a0      	cmp	r0, r4
 80085bc:	d10b      	bne.n	80085d6 <_free_r+0x72>
 80085be:	6820      	ldr	r0, [r4, #0]
 80085c0:	4401      	add	r1, r0
 80085c2:	1858      	adds	r0, r3, r1
 80085c4:	4282      	cmp	r2, r0
 80085c6:	6019      	str	r1, [r3, #0]
 80085c8:	d1de      	bne.n	8008588 <_free_r+0x24>
 80085ca:	6810      	ldr	r0, [r2, #0]
 80085cc:	6852      	ldr	r2, [r2, #4]
 80085ce:	4401      	add	r1, r0
 80085d0:	6019      	str	r1, [r3, #0]
 80085d2:	605a      	str	r2, [r3, #4]
 80085d4:	e7d8      	b.n	8008588 <_free_r+0x24>
 80085d6:	d902      	bls.n	80085de <_free_r+0x7a>
 80085d8:	230c      	movs	r3, #12
 80085da:	602b      	str	r3, [r5, #0]
 80085dc:	e7d4      	b.n	8008588 <_free_r+0x24>
 80085de:	6820      	ldr	r0, [r4, #0]
 80085e0:	1821      	adds	r1, r4, r0
 80085e2:	428a      	cmp	r2, r1
 80085e4:	bf01      	itttt	eq
 80085e6:	6811      	ldreq	r1, [r2, #0]
 80085e8:	6852      	ldreq	r2, [r2, #4]
 80085ea:	1809      	addeq	r1, r1, r0
 80085ec:	6021      	streq	r1, [r4, #0]
 80085ee:	6062      	str	r2, [r4, #4]
 80085f0:	605c      	str	r4, [r3, #4]
 80085f2:	e7c9      	b.n	8008588 <_free_r+0x24>
 80085f4:	bd38      	pop	{r3, r4, r5, pc}
 80085f6:	bf00      	nop
 80085f8:	20000220 	.word	0x20000220

080085fc <_malloc_r>:
 80085fc:	b570      	push	{r4, r5, r6, lr}
 80085fe:	1ccd      	adds	r5, r1, #3
 8008600:	f025 0503 	bic.w	r5, r5, #3
 8008604:	3508      	adds	r5, #8
 8008606:	2d0c      	cmp	r5, #12
 8008608:	bf38      	it	cc
 800860a:	250c      	movcc	r5, #12
 800860c:	2d00      	cmp	r5, #0
 800860e:	4606      	mov	r6, r0
 8008610:	db01      	blt.n	8008616 <_malloc_r+0x1a>
 8008612:	42a9      	cmp	r1, r5
 8008614:	d903      	bls.n	800861e <_malloc_r+0x22>
 8008616:	230c      	movs	r3, #12
 8008618:	6033      	str	r3, [r6, #0]
 800861a:	2000      	movs	r0, #0
 800861c:	bd70      	pop	{r4, r5, r6, pc}
 800861e:	f000 f9e1 	bl	80089e4 <__malloc_lock>
 8008622:	4a21      	ldr	r2, [pc, #132]	; (80086a8 <_malloc_r+0xac>)
 8008624:	6814      	ldr	r4, [r2, #0]
 8008626:	4621      	mov	r1, r4
 8008628:	b991      	cbnz	r1, 8008650 <_malloc_r+0x54>
 800862a:	4c20      	ldr	r4, [pc, #128]	; (80086ac <_malloc_r+0xb0>)
 800862c:	6823      	ldr	r3, [r4, #0]
 800862e:	b91b      	cbnz	r3, 8008638 <_malloc_r+0x3c>
 8008630:	4630      	mov	r0, r6
 8008632:	f000 f98f 	bl	8008954 <_sbrk_r>
 8008636:	6020      	str	r0, [r4, #0]
 8008638:	4629      	mov	r1, r5
 800863a:	4630      	mov	r0, r6
 800863c:	f000 f98a 	bl	8008954 <_sbrk_r>
 8008640:	1c43      	adds	r3, r0, #1
 8008642:	d124      	bne.n	800868e <_malloc_r+0x92>
 8008644:	230c      	movs	r3, #12
 8008646:	4630      	mov	r0, r6
 8008648:	6033      	str	r3, [r6, #0]
 800864a:	f000 f9cc 	bl	80089e6 <__malloc_unlock>
 800864e:	e7e4      	b.n	800861a <_malloc_r+0x1e>
 8008650:	680b      	ldr	r3, [r1, #0]
 8008652:	1b5b      	subs	r3, r3, r5
 8008654:	d418      	bmi.n	8008688 <_malloc_r+0x8c>
 8008656:	2b0b      	cmp	r3, #11
 8008658:	d90f      	bls.n	800867a <_malloc_r+0x7e>
 800865a:	600b      	str	r3, [r1, #0]
 800865c:	18cc      	adds	r4, r1, r3
 800865e:	50cd      	str	r5, [r1, r3]
 8008660:	4630      	mov	r0, r6
 8008662:	f000 f9c0 	bl	80089e6 <__malloc_unlock>
 8008666:	f104 000b 	add.w	r0, r4, #11
 800866a:	1d23      	adds	r3, r4, #4
 800866c:	f020 0007 	bic.w	r0, r0, #7
 8008670:	1ac3      	subs	r3, r0, r3
 8008672:	d0d3      	beq.n	800861c <_malloc_r+0x20>
 8008674:	425a      	negs	r2, r3
 8008676:	50e2      	str	r2, [r4, r3]
 8008678:	e7d0      	b.n	800861c <_malloc_r+0x20>
 800867a:	684b      	ldr	r3, [r1, #4]
 800867c:	428c      	cmp	r4, r1
 800867e:	bf16      	itet	ne
 8008680:	6063      	strne	r3, [r4, #4]
 8008682:	6013      	streq	r3, [r2, #0]
 8008684:	460c      	movne	r4, r1
 8008686:	e7eb      	b.n	8008660 <_malloc_r+0x64>
 8008688:	460c      	mov	r4, r1
 800868a:	6849      	ldr	r1, [r1, #4]
 800868c:	e7cc      	b.n	8008628 <_malloc_r+0x2c>
 800868e:	1cc4      	adds	r4, r0, #3
 8008690:	f024 0403 	bic.w	r4, r4, #3
 8008694:	42a0      	cmp	r0, r4
 8008696:	d005      	beq.n	80086a4 <_malloc_r+0xa8>
 8008698:	1a21      	subs	r1, r4, r0
 800869a:	4630      	mov	r0, r6
 800869c:	f000 f95a 	bl	8008954 <_sbrk_r>
 80086a0:	3001      	adds	r0, #1
 80086a2:	d0cf      	beq.n	8008644 <_malloc_r+0x48>
 80086a4:	6025      	str	r5, [r4, #0]
 80086a6:	e7db      	b.n	8008660 <_malloc_r+0x64>
 80086a8:	20000220 	.word	0x20000220
 80086ac:	20000224 	.word	0x20000224

080086b0 <__ssputs_r>:
 80086b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086b4:	688e      	ldr	r6, [r1, #8]
 80086b6:	4682      	mov	sl, r0
 80086b8:	429e      	cmp	r6, r3
 80086ba:	460c      	mov	r4, r1
 80086bc:	4690      	mov	r8, r2
 80086be:	4699      	mov	r9, r3
 80086c0:	d837      	bhi.n	8008732 <__ssputs_r+0x82>
 80086c2:	898a      	ldrh	r2, [r1, #12]
 80086c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80086c8:	d031      	beq.n	800872e <__ssputs_r+0x7e>
 80086ca:	2302      	movs	r3, #2
 80086cc:	6825      	ldr	r5, [r4, #0]
 80086ce:	6909      	ldr	r1, [r1, #16]
 80086d0:	1a6f      	subs	r7, r5, r1
 80086d2:	6965      	ldr	r5, [r4, #20]
 80086d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086d8:	fb95 f5f3 	sdiv	r5, r5, r3
 80086dc:	f109 0301 	add.w	r3, r9, #1
 80086e0:	443b      	add	r3, r7
 80086e2:	429d      	cmp	r5, r3
 80086e4:	bf38      	it	cc
 80086e6:	461d      	movcc	r5, r3
 80086e8:	0553      	lsls	r3, r2, #21
 80086ea:	d530      	bpl.n	800874e <__ssputs_r+0x9e>
 80086ec:	4629      	mov	r1, r5
 80086ee:	f7ff ff85 	bl	80085fc <_malloc_r>
 80086f2:	4606      	mov	r6, r0
 80086f4:	b950      	cbnz	r0, 800870c <__ssputs_r+0x5c>
 80086f6:	230c      	movs	r3, #12
 80086f8:	f04f 30ff 	mov.w	r0, #4294967295
 80086fc:	f8ca 3000 	str.w	r3, [sl]
 8008700:	89a3      	ldrh	r3, [r4, #12]
 8008702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008706:	81a3      	strh	r3, [r4, #12]
 8008708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800870c:	463a      	mov	r2, r7
 800870e:	6921      	ldr	r1, [r4, #16]
 8008710:	f7ff fb16 	bl	8007d40 <memcpy>
 8008714:	89a3      	ldrh	r3, [r4, #12]
 8008716:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800871a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800871e:	81a3      	strh	r3, [r4, #12]
 8008720:	6126      	str	r6, [r4, #16]
 8008722:	443e      	add	r6, r7
 8008724:	6026      	str	r6, [r4, #0]
 8008726:	464e      	mov	r6, r9
 8008728:	6165      	str	r5, [r4, #20]
 800872a:	1bed      	subs	r5, r5, r7
 800872c:	60a5      	str	r5, [r4, #8]
 800872e:	454e      	cmp	r6, r9
 8008730:	d900      	bls.n	8008734 <__ssputs_r+0x84>
 8008732:	464e      	mov	r6, r9
 8008734:	4632      	mov	r2, r6
 8008736:	4641      	mov	r1, r8
 8008738:	6820      	ldr	r0, [r4, #0]
 800873a:	f000 f93a 	bl	80089b2 <memmove>
 800873e:	68a3      	ldr	r3, [r4, #8]
 8008740:	2000      	movs	r0, #0
 8008742:	1b9b      	subs	r3, r3, r6
 8008744:	60a3      	str	r3, [r4, #8]
 8008746:	6823      	ldr	r3, [r4, #0]
 8008748:	441e      	add	r6, r3
 800874a:	6026      	str	r6, [r4, #0]
 800874c:	e7dc      	b.n	8008708 <__ssputs_r+0x58>
 800874e:	462a      	mov	r2, r5
 8008750:	f000 f94a 	bl	80089e8 <_realloc_r>
 8008754:	4606      	mov	r6, r0
 8008756:	2800      	cmp	r0, #0
 8008758:	d1e2      	bne.n	8008720 <__ssputs_r+0x70>
 800875a:	6921      	ldr	r1, [r4, #16]
 800875c:	4650      	mov	r0, sl
 800875e:	f7ff ff01 	bl	8008564 <_free_r>
 8008762:	e7c8      	b.n	80086f6 <__ssputs_r+0x46>

08008764 <_svfiprintf_r>:
 8008764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008768:	461d      	mov	r5, r3
 800876a:	898b      	ldrh	r3, [r1, #12]
 800876c:	b09d      	sub	sp, #116	; 0x74
 800876e:	061f      	lsls	r7, r3, #24
 8008770:	4680      	mov	r8, r0
 8008772:	460c      	mov	r4, r1
 8008774:	4616      	mov	r6, r2
 8008776:	d50f      	bpl.n	8008798 <_svfiprintf_r+0x34>
 8008778:	690b      	ldr	r3, [r1, #16]
 800877a:	b96b      	cbnz	r3, 8008798 <_svfiprintf_r+0x34>
 800877c:	2140      	movs	r1, #64	; 0x40
 800877e:	f7ff ff3d 	bl	80085fc <_malloc_r>
 8008782:	6020      	str	r0, [r4, #0]
 8008784:	6120      	str	r0, [r4, #16]
 8008786:	b928      	cbnz	r0, 8008794 <_svfiprintf_r+0x30>
 8008788:	230c      	movs	r3, #12
 800878a:	f8c8 3000 	str.w	r3, [r8]
 800878e:	f04f 30ff 	mov.w	r0, #4294967295
 8008792:	e0c8      	b.n	8008926 <_svfiprintf_r+0x1c2>
 8008794:	2340      	movs	r3, #64	; 0x40
 8008796:	6163      	str	r3, [r4, #20]
 8008798:	2300      	movs	r3, #0
 800879a:	9309      	str	r3, [sp, #36]	; 0x24
 800879c:	2320      	movs	r3, #32
 800879e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087a2:	2330      	movs	r3, #48	; 0x30
 80087a4:	f04f 0b01 	mov.w	fp, #1
 80087a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087ac:	9503      	str	r5, [sp, #12]
 80087ae:	4637      	mov	r7, r6
 80087b0:	463d      	mov	r5, r7
 80087b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80087b6:	b10b      	cbz	r3, 80087bc <_svfiprintf_r+0x58>
 80087b8:	2b25      	cmp	r3, #37	; 0x25
 80087ba:	d13e      	bne.n	800883a <_svfiprintf_r+0xd6>
 80087bc:	ebb7 0a06 	subs.w	sl, r7, r6
 80087c0:	d00b      	beq.n	80087da <_svfiprintf_r+0x76>
 80087c2:	4653      	mov	r3, sl
 80087c4:	4632      	mov	r2, r6
 80087c6:	4621      	mov	r1, r4
 80087c8:	4640      	mov	r0, r8
 80087ca:	f7ff ff71 	bl	80086b0 <__ssputs_r>
 80087ce:	3001      	adds	r0, #1
 80087d0:	f000 80a4 	beq.w	800891c <_svfiprintf_r+0x1b8>
 80087d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087d6:	4453      	add	r3, sl
 80087d8:	9309      	str	r3, [sp, #36]	; 0x24
 80087da:	783b      	ldrb	r3, [r7, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f000 809d 	beq.w	800891c <_svfiprintf_r+0x1b8>
 80087e2:	2300      	movs	r3, #0
 80087e4:	f04f 32ff 	mov.w	r2, #4294967295
 80087e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087ec:	9304      	str	r3, [sp, #16]
 80087ee:	9307      	str	r3, [sp, #28]
 80087f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087f4:	931a      	str	r3, [sp, #104]	; 0x68
 80087f6:	462f      	mov	r7, r5
 80087f8:	2205      	movs	r2, #5
 80087fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80087fe:	4850      	ldr	r0, [pc, #320]	; (8008940 <_svfiprintf_r+0x1dc>)
 8008800:	f7ff fa90 	bl	8007d24 <memchr>
 8008804:	9b04      	ldr	r3, [sp, #16]
 8008806:	b9d0      	cbnz	r0, 800883e <_svfiprintf_r+0xda>
 8008808:	06d9      	lsls	r1, r3, #27
 800880a:	bf44      	itt	mi
 800880c:	2220      	movmi	r2, #32
 800880e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008812:	071a      	lsls	r2, r3, #28
 8008814:	bf44      	itt	mi
 8008816:	222b      	movmi	r2, #43	; 0x2b
 8008818:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800881c:	782a      	ldrb	r2, [r5, #0]
 800881e:	2a2a      	cmp	r2, #42	; 0x2a
 8008820:	d015      	beq.n	800884e <_svfiprintf_r+0xea>
 8008822:	462f      	mov	r7, r5
 8008824:	2000      	movs	r0, #0
 8008826:	250a      	movs	r5, #10
 8008828:	9a07      	ldr	r2, [sp, #28]
 800882a:	4639      	mov	r1, r7
 800882c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008830:	3b30      	subs	r3, #48	; 0x30
 8008832:	2b09      	cmp	r3, #9
 8008834:	d94d      	bls.n	80088d2 <_svfiprintf_r+0x16e>
 8008836:	b1b8      	cbz	r0, 8008868 <_svfiprintf_r+0x104>
 8008838:	e00f      	b.n	800885a <_svfiprintf_r+0xf6>
 800883a:	462f      	mov	r7, r5
 800883c:	e7b8      	b.n	80087b0 <_svfiprintf_r+0x4c>
 800883e:	4a40      	ldr	r2, [pc, #256]	; (8008940 <_svfiprintf_r+0x1dc>)
 8008840:	463d      	mov	r5, r7
 8008842:	1a80      	subs	r0, r0, r2
 8008844:	fa0b f000 	lsl.w	r0, fp, r0
 8008848:	4318      	orrs	r0, r3
 800884a:	9004      	str	r0, [sp, #16]
 800884c:	e7d3      	b.n	80087f6 <_svfiprintf_r+0x92>
 800884e:	9a03      	ldr	r2, [sp, #12]
 8008850:	1d11      	adds	r1, r2, #4
 8008852:	6812      	ldr	r2, [r2, #0]
 8008854:	9103      	str	r1, [sp, #12]
 8008856:	2a00      	cmp	r2, #0
 8008858:	db01      	blt.n	800885e <_svfiprintf_r+0xfa>
 800885a:	9207      	str	r2, [sp, #28]
 800885c:	e004      	b.n	8008868 <_svfiprintf_r+0x104>
 800885e:	4252      	negs	r2, r2
 8008860:	f043 0302 	orr.w	r3, r3, #2
 8008864:	9207      	str	r2, [sp, #28]
 8008866:	9304      	str	r3, [sp, #16]
 8008868:	783b      	ldrb	r3, [r7, #0]
 800886a:	2b2e      	cmp	r3, #46	; 0x2e
 800886c:	d10c      	bne.n	8008888 <_svfiprintf_r+0x124>
 800886e:	787b      	ldrb	r3, [r7, #1]
 8008870:	2b2a      	cmp	r3, #42	; 0x2a
 8008872:	d133      	bne.n	80088dc <_svfiprintf_r+0x178>
 8008874:	9b03      	ldr	r3, [sp, #12]
 8008876:	3702      	adds	r7, #2
 8008878:	1d1a      	adds	r2, r3, #4
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	9203      	str	r2, [sp, #12]
 800887e:	2b00      	cmp	r3, #0
 8008880:	bfb8      	it	lt
 8008882:	f04f 33ff 	movlt.w	r3, #4294967295
 8008886:	9305      	str	r3, [sp, #20]
 8008888:	4d2e      	ldr	r5, [pc, #184]	; (8008944 <_svfiprintf_r+0x1e0>)
 800888a:	2203      	movs	r2, #3
 800888c:	7839      	ldrb	r1, [r7, #0]
 800888e:	4628      	mov	r0, r5
 8008890:	f7ff fa48 	bl	8007d24 <memchr>
 8008894:	b138      	cbz	r0, 80088a6 <_svfiprintf_r+0x142>
 8008896:	2340      	movs	r3, #64	; 0x40
 8008898:	1b40      	subs	r0, r0, r5
 800889a:	fa03 f000 	lsl.w	r0, r3, r0
 800889e:	9b04      	ldr	r3, [sp, #16]
 80088a0:	3701      	adds	r7, #1
 80088a2:	4303      	orrs	r3, r0
 80088a4:	9304      	str	r3, [sp, #16]
 80088a6:	7839      	ldrb	r1, [r7, #0]
 80088a8:	2206      	movs	r2, #6
 80088aa:	4827      	ldr	r0, [pc, #156]	; (8008948 <_svfiprintf_r+0x1e4>)
 80088ac:	1c7e      	adds	r6, r7, #1
 80088ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088b2:	f7ff fa37 	bl	8007d24 <memchr>
 80088b6:	2800      	cmp	r0, #0
 80088b8:	d038      	beq.n	800892c <_svfiprintf_r+0x1c8>
 80088ba:	4b24      	ldr	r3, [pc, #144]	; (800894c <_svfiprintf_r+0x1e8>)
 80088bc:	bb13      	cbnz	r3, 8008904 <_svfiprintf_r+0x1a0>
 80088be:	9b03      	ldr	r3, [sp, #12]
 80088c0:	3307      	adds	r3, #7
 80088c2:	f023 0307 	bic.w	r3, r3, #7
 80088c6:	3308      	adds	r3, #8
 80088c8:	9303      	str	r3, [sp, #12]
 80088ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088cc:	444b      	add	r3, r9
 80088ce:	9309      	str	r3, [sp, #36]	; 0x24
 80088d0:	e76d      	b.n	80087ae <_svfiprintf_r+0x4a>
 80088d2:	fb05 3202 	mla	r2, r5, r2, r3
 80088d6:	2001      	movs	r0, #1
 80088d8:	460f      	mov	r7, r1
 80088da:	e7a6      	b.n	800882a <_svfiprintf_r+0xc6>
 80088dc:	2300      	movs	r3, #0
 80088de:	250a      	movs	r5, #10
 80088e0:	4619      	mov	r1, r3
 80088e2:	3701      	adds	r7, #1
 80088e4:	9305      	str	r3, [sp, #20]
 80088e6:	4638      	mov	r0, r7
 80088e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088ec:	3a30      	subs	r2, #48	; 0x30
 80088ee:	2a09      	cmp	r2, #9
 80088f0:	d903      	bls.n	80088fa <_svfiprintf_r+0x196>
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d0c8      	beq.n	8008888 <_svfiprintf_r+0x124>
 80088f6:	9105      	str	r1, [sp, #20]
 80088f8:	e7c6      	b.n	8008888 <_svfiprintf_r+0x124>
 80088fa:	fb05 2101 	mla	r1, r5, r1, r2
 80088fe:	2301      	movs	r3, #1
 8008900:	4607      	mov	r7, r0
 8008902:	e7f0      	b.n	80088e6 <_svfiprintf_r+0x182>
 8008904:	ab03      	add	r3, sp, #12
 8008906:	9300      	str	r3, [sp, #0]
 8008908:	4622      	mov	r2, r4
 800890a:	4b11      	ldr	r3, [pc, #68]	; (8008950 <_svfiprintf_r+0x1ec>)
 800890c:	a904      	add	r1, sp, #16
 800890e:	4640      	mov	r0, r8
 8008910:	f7fc fda8 	bl	8005464 <_printf_float>
 8008914:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008918:	4681      	mov	r9, r0
 800891a:	d1d6      	bne.n	80088ca <_svfiprintf_r+0x166>
 800891c:	89a3      	ldrh	r3, [r4, #12]
 800891e:	065b      	lsls	r3, r3, #25
 8008920:	f53f af35 	bmi.w	800878e <_svfiprintf_r+0x2a>
 8008924:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008926:	b01d      	add	sp, #116	; 0x74
 8008928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800892c:	ab03      	add	r3, sp, #12
 800892e:	9300      	str	r3, [sp, #0]
 8008930:	4622      	mov	r2, r4
 8008932:	4b07      	ldr	r3, [pc, #28]	; (8008950 <_svfiprintf_r+0x1ec>)
 8008934:	a904      	add	r1, sp, #16
 8008936:	4640      	mov	r0, r8
 8008938:	f7fd f840 	bl	80059bc <_printf_i>
 800893c:	e7ea      	b.n	8008914 <_svfiprintf_r+0x1b0>
 800893e:	bf00      	nop
 8008940:	08008e24 	.word	0x08008e24
 8008944:	08008e2a 	.word	0x08008e2a
 8008948:	08008e2e 	.word	0x08008e2e
 800894c:	08005465 	.word	0x08005465
 8008950:	080086b1 	.word	0x080086b1

08008954 <_sbrk_r>:
 8008954:	b538      	push	{r3, r4, r5, lr}
 8008956:	2300      	movs	r3, #0
 8008958:	4c05      	ldr	r4, [pc, #20]	; (8008970 <_sbrk_r+0x1c>)
 800895a:	4605      	mov	r5, r0
 800895c:	4608      	mov	r0, r1
 800895e:	6023      	str	r3, [r4, #0]
 8008960:	f7fa f876 	bl	8002a50 <_sbrk>
 8008964:	1c43      	adds	r3, r0, #1
 8008966:	d102      	bne.n	800896e <_sbrk_r+0x1a>
 8008968:	6823      	ldr	r3, [r4, #0]
 800896a:	b103      	cbz	r3, 800896e <_sbrk_r+0x1a>
 800896c:	602b      	str	r3, [r5, #0]
 800896e:	bd38      	pop	{r3, r4, r5, pc}
 8008970:	2000079c 	.word	0x2000079c

08008974 <strncmp>:
 8008974:	b510      	push	{r4, lr}
 8008976:	b16a      	cbz	r2, 8008994 <strncmp+0x20>
 8008978:	3901      	subs	r1, #1
 800897a:	1884      	adds	r4, r0, r2
 800897c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008980:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008984:	4293      	cmp	r3, r2
 8008986:	d103      	bne.n	8008990 <strncmp+0x1c>
 8008988:	42a0      	cmp	r0, r4
 800898a:	d001      	beq.n	8008990 <strncmp+0x1c>
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1f5      	bne.n	800897c <strncmp+0x8>
 8008990:	1a98      	subs	r0, r3, r2
 8008992:	bd10      	pop	{r4, pc}
 8008994:	4610      	mov	r0, r2
 8008996:	e7fc      	b.n	8008992 <strncmp+0x1e>

08008998 <__ascii_wctomb>:
 8008998:	b149      	cbz	r1, 80089ae <__ascii_wctomb+0x16>
 800899a:	2aff      	cmp	r2, #255	; 0xff
 800899c:	bf8b      	itete	hi
 800899e:	238a      	movhi	r3, #138	; 0x8a
 80089a0:	700a      	strbls	r2, [r1, #0]
 80089a2:	6003      	strhi	r3, [r0, #0]
 80089a4:	2001      	movls	r0, #1
 80089a6:	bf88      	it	hi
 80089a8:	f04f 30ff 	movhi.w	r0, #4294967295
 80089ac:	4770      	bx	lr
 80089ae:	4608      	mov	r0, r1
 80089b0:	4770      	bx	lr

080089b2 <memmove>:
 80089b2:	4288      	cmp	r0, r1
 80089b4:	b510      	push	{r4, lr}
 80089b6:	eb01 0302 	add.w	r3, r1, r2
 80089ba:	d807      	bhi.n	80089cc <memmove+0x1a>
 80089bc:	1e42      	subs	r2, r0, #1
 80089be:	4299      	cmp	r1, r3
 80089c0:	d00a      	beq.n	80089d8 <memmove+0x26>
 80089c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089c6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80089ca:	e7f8      	b.n	80089be <memmove+0xc>
 80089cc:	4283      	cmp	r3, r0
 80089ce:	d9f5      	bls.n	80089bc <memmove+0xa>
 80089d0:	1881      	adds	r1, r0, r2
 80089d2:	1ad2      	subs	r2, r2, r3
 80089d4:	42d3      	cmn	r3, r2
 80089d6:	d100      	bne.n	80089da <memmove+0x28>
 80089d8:	bd10      	pop	{r4, pc}
 80089da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089de:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80089e2:	e7f7      	b.n	80089d4 <memmove+0x22>

080089e4 <__malloc_lock>:
 80089e4:	4770      	bx	lr

080089e6 <__malloc_unlock>:
 80089e6:	4770      	bx	lr

080089e8 <_realloc_r>:
 80089e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ea:	4607      	mov	r7, r0
 80089ec:	4614      	mov	r4, r2
 80089ee:	460e      	mov	r6, r1
 80089f0:	b921      	cbnz	r1, 80089fc <_realloc_r+0x14>
 80089f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80089f6:	4611      	mov	r1, r2
 80089f8:	f7ff be00 	b.w	80085fc <_malloc_r>
 80089fc:	b922      	cbnz	r2, 8008a08 <_realloc_r+0x20>
 80089fe:	f7ff fdb1 	bl	8008564 <_free_r>
 8008a02:	4625      	mov	r5, r4
 8008a04:	4628      	mov	r0, r5
 8008a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a08:	f000 f814 	bl	8008a34 <_malloc_usable_size_r>
 8008a0c:	42a0      	cmp	r0, r4
 8008a0e:	d20f      	bcs.n	8008a30 <_realloc_r+0x48>
 8008a10:	4621      	mov	r1, r4
 8008a12:	4638      	mov	r0, r7
 8008a14:	f7ff fdf2 	bl	80085fc <_malloc_r>
 8008a18:	4605      	mov	r5, r0
 8008a1a:	2800      	cmp	r0, #0
 8008a1c:	d0f2      	beq.n	8008a04 <_realloc_r+0x1c>
 8008a1e:	4631      	mov	r1, r6
 8008a20:	4622      	mov	r2, r4
 8008a22:	f7ff f98d 	bl	8007d40 <memcpy>
 8008a26:	4631      	mov	r1, r6
 8008a28:	4638      	mov	r0, r7
 8008a2a:	f7ff fd9b 	bl	8008564 <_free_r>
 8008a2e:	e7e9      	b.n	8008a04 <_realloc_r+0x1c>
 8008a30:	4635      	mov	r5, r6
 8008a32:	e7e7      	b.n	8008a04 <_realloc_r+0x1c>

08008a34 <_malloc_usable_size_r>:
 8008a34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a38:	1f18      	subs	r0, r3, #4
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	bfbc      	itt	lt
 8008a3e:	580b      	ldrlt	r3, [r1, r0]
 8008a40:	18c0      	addlt	r0, r0, r3
 8008a42:	4770      	bx	lr

08008a44 <_init>:
 8008a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a46:	bf00      	nop
 8008a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a4a:	bc08      	pop	{r3}
 8008a4c:	469e      	mov	lr, r3
 8008a4e:	4770      	bx	lr

08008a50 <_fini>:
 8008a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a52:	bf00      	nop
 8008a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a56:	bc08      	pop	{r3}
 8008a58:	469e      	mov	lr, r3
 8008a5a:	4770      	bx	lr
